
SmartSBOARD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002652  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f6  00800060  00002652  000026e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000042e  00800156  00800156  000027dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000027dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d8  00000000  00000000  00002848  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000048f8  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009ff  00000000  00000000  00007418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e4  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a28  00000000  00000000  00008efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009e7  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003c90  00000000  00000000  0000a30b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000df9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 03 	jmp	0x672	; 0x672 <__ctors_end>
       4:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_1>
       8:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
       c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      10:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      14:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      18:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      1c:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_7>
      20:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      24:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      28:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      2c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      30:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      34:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      38:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      3c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      40:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      44:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      48:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      4c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      50:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__bad_interrupt>
      54:	35 0d       	add	r19, r5
      56:	76 0d       	add	r23, r6
      58:	76 0d       	add	r23, r6
      5a:	76 0d       	add	r23, r6
      5c:	76 0d       	add	r23, r6
      5e:	76 0d       	add	r23, r6
      60:	e5 0c       	add	r14, r5
      62:	ef 0c       	add	r14, r15
      64:	fa 0c       	add	r15, r10
      66:	05 0d       	add	r16, r5
      68:	11 0d       	add	r17, r1
      6a:	1d 0d       	add	r17, r13
      6c:	29 0d       	add	r18, r9
      6e:	ec 0e       	add	r14, r28
      70:	f1 0e       	add	r15, r17
      72:	f8 0e       	add	r15, r24
      74:	ff 0e       	add	r15, r31
      76:	06 0f       	add	r16, r22
      78:	0d 0f       	add	r16, r29
      7a:	14 0f       	add	r17, r20
      7c:	1b 0f       	add	r17, r27
      7e:	22 0f       	add	r18, r18
      80:	29 0f       	add	r18, r25
      82:	37 0f       	add	r19, r23
      84:	37 0f       	add	r19, r23
      86:	37 0f       	add	r19, r23
      88:	37 0f       	add	r19, r23
      8a:	37 0f       	add	r19, r23
      8c:	37 0f       	add	r19, r23
      8e:	37 0f       	add	r19, r23
      90:	37 0f       	add	r19, r23
      92:	37 0f       	add	r19, r23
      94:	30 0f       	add	r19, r16

00000096 <__trampolines_end>:
      96:	00 00       	nop
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 5f       	subi	r16, 0xF0	; 240
      9e:	00 00       	nop
      a0:	00 07       	cpc	r16, r16
      a2:	00 07       	cpc	r16, r16
      a4:	00 14       	cp	r0, r0
      a6:	7f 14       	cp	r7, r15
      a8:	7f 14       	cp	r7, r15
      aa:	24 2a       	or	r2, r20
      ac:	7f 2a       	or	r7, r31
      ae:	12 23       	and	r17, r18
      b0:	13 08       	sbc	r1, r3
      b2:	64 62       	ori	r22, 0x24	; 36
      b4:	36 49       	sbci	r19, 0x96	; 150
      b6:	55 22       	and	r5, r21
      b8:	50 00       	.word	0x0050	; ????
      ba:	05 03       	mulsu	r16, r21
      bc:	00 00       	nop
      be:	00 1c       	adc	r0, r0
      c0:	22 41       	sbci	r18, 0x12	; 18
      c2:	00 00       	nop
      c4:	41 22       	and	r4, r17
      c6:	1c 00       	.word	0x001c	; ????
      c8:	08 2a       	or	r0, r24
      ca:	1c 2a       	or	r1, r28
      cc:	08 08       	sbc	r0, r8
      ce:	08 3e       	cpi	r16, 0xE8	; 232
      d0:	08 08       	sbc	r0, r8
      d2:	00 50       	subi	r16, 0x00	; 0
      d4:	30 00       	.word	0x0030	; ????
      d6:	00 08       	sbc	r0, r0
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	00 60       	ori	r16, 0x00	; 0
      de:	60 00       	.word	0x0060	; ????
      e0:	00 20       	and	r0, r0
      e2:	10 08       	sbc	r1, r0
      e4:	04 02       	muls	r16, r20
      e6:	3e 51       	subi	r19, 0x1E	; 30
      e8:	49 45       	sbci	r20, 0x59	; 89
      ea:	3e 00       	.word	0x003e	; ????
      ec:	42 7f       	andi	r20, 0xF2	; 242
      ee:	40 00       	.word	0x0040	; ????
      f0:	42 61       	ori	r20, 0x12	; 18
      f2:	51 49       	sbci	r21, 0x91	; 145
      f4:	46 21       	and	r20, r6
      f6:	41 45       	sbci	r20, 0x51	; 81
      f8:	4b 31       	cpi	r20, 0x1B	; 27
      fa:	18 14       	cp	r1, r8
      fc:	12 7f       	andi	r17, 0xF2	; 242
      fe:	10 27       	eor	r17, r16
     100:	45 45       	sbci	r20, 0x55	; 85
     102:	45 39       	cpi	r20, 0x95	; 149
     104:	3c 4a       	sbci	r19, 0xAC	; 172
     106:	49 49       	sbci	r20, 0x99	; 153
     108:	30 01       	movw	r6, r0
     10a:	71 09       	sbc	r23, r1
     10c:	05 03       	mulsu	r16, r21
     10e:	36 49       	sbci	r19, 0x96	; 150
     110:	49 49       	sbci	r20, 0x99	; 153
     112:	36 06       	cpc	r3, r22
     114:	49 49       	sbci	r20, 0x99	; 153
     116:	29 1e       	adc	r2, r25
     118:	00 36       	cpi	r16, 0x60	; 96
     11a:	36 00       	.word	0x0036	; ????
     11c:	00 00       	nop
     11e:	56 36       	cpi	r21, 0x66	; 102
     120:	00 00       	nop
     122:	00 08       	sbc	r0, r0
     124:	14 22       	and	r1, r20
     126:	41 14       	cp	r4, r1
     128:	14 14       	cp	r1, r4
     12a:	14 14       	cp	r1, r4
     12c:	41 22       	and	r4, r17
     12e:	14 08       	sbc	r1, r4
     130:	00 02       	muls	r16, r16
     132:	01 51       	subi	r16, 0x11	; 17
     134:	09 06       	cpc	r0, r25
     136:	32 49       	sbci	r19, 0x92	; 146
     138:	79 41       	sbci	r23, 0x19	; 25
     13a:	3e 7e       	andi	r19, 0xEE	; 238
     13c:	11 11       	cpse	r17, r1
     13e:	11 7e       	andi	r17, 0xE1	; 225
     140:	7f 49       	sbci	r23, 0x9F	; 159
     142:	49 49       	sbci	r20, 0x99	; 153
     144:	36 3e       	cpi	r19, 0xE6	; 230
     146:	41 41       	sbci	r20, 0x11	; 17
     148:	41 22       	and	r4, r17
     14a:	7f 41       	sbci	r23, 0x1F	; 31
     14c:	41 22       	and	r4, r17
     14e:	1c 7f       	andi	r17, 0xFC	; 252
     150:	49 49       	sbci	r20, 0x99	; 153
     152:	49 41       	sbci	r20, 0x19	; 25
     154:	7f 09       	sbc	r23, r15
     156:	09 01       	movw	r0, r18
     158:	01 3e       	cpi	r16, 0xE1	; 225
     15a:	41 41       	sbci	r20, 0x11	; 17
     15c:	51 32       	cpi	r21, 0x21	; 33
     15e:	7f 08       	sbc	r7, r15
     160:	08 08       	sbc	r0, r8
     162:	7f 00       	.word	0x007f	; ????
     164:	41 7f       	andi	r20, 0xF1	; 241
     166:	41 00       	.word	0x0041	; ????
     168:	20 40       	sbci	r18, 0x00	; 0
     16a:	41 3f       	cpi	r20, 0xF1	; 241
     16c:	01 7f       	andi	r16, 0xF1	; 241
     16e:	08 14       	cp	r0, r8
     170:	22 41       	sbci	r18, 0x12	; 18
     172:	7f 40       	sbci	r23, 0x0F	; 15
     174:	40 40       	sbci	r20, 0x00	; 0
     176:	40 7f       	andi	r20, 0xF0	; 240
     178:	02 04       	cpc	r0, r2
     17a:	02 7f       	andi	r16, 0xF2	; 242
     17c:	7f 04       	cpc	r7, r15
     17e:	08 10       	cpse	r0, r8
     180:	7f 3e       	cpi	r23, 0xEF	; 239
     182:	41 41       	sbci	r20, 0x11	; 17
     184:	41 3e       	cpi	r20, 0xE1	; 225
     186:	7f 09       	sbc	r23, r15
     188:	09 09       	sbc	r16, r9
     18a:	06 3e       	cpi	r16, 0xE6	; 230
     18c:	41 51       	subi	r20, 0x11	; 17
     18e:	21 5e       	subi	r18, 0xE1	; 225
     190:	7f 09       	sbc	r23, r15
     192:	19 29       	or	r17, r9
     194:	46 46       	sbci	r20, 0x66	; 102
     196:	49 49       	sbci	r20, 0x99	; 153
     198:	49 31       	cpi	r20, 0x19	; 25
     19a:	01 01       	movw	r0, r2
     19c:	7f 01       	movw	r14, r30
     19e:	01 3f       	cpi	r16, 0xF1	; 241
     1a0:	40 40       	sbci	r20, 0x00	; 0
     1a2:	40 3f       	cpi	r20, 0xF0	; 240
     1a4:	1f 20       	and	r1, r15
     1a6:	40 20       	and	r4, r0
     1a8:	1f 7f       	andi	r17, 0xFF	; 255
     1aa:	20 18       	sub	r2, r0
     1ac:	20 7f       	andi	r18, 0xF0	; 240
     1ae:	63 14       	cp	r6, r3
     1b0:	08 14       	cp	r0, r8
     1b2:	63 03       	mulsu	r22, r19
     1b4:	04 78       	andi	r16, 0x84	; 132
     1b6:	04 03       	mulsu	r16, r20
     1b8:	61 51       	subi	r22, 0x11	; 17
     1ba:	49 45       	sbci	r20, 0x59	; 89
     1bc:	43 00       	.word	0x0043	; ????
     1be:	00 7f       	andi	r16, 0xF0	; 240
     1c0:	41 41       	sbci	r20, 0x11	; 17
     1c2:	02 04       	cpc	r0, r2
     1c4:	08 10       	cpse	r0, r8
     1c6:	20 41       	sbci	r18, 0x10	; 16
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	00 00       	nop
     1cc:	04 02       	muls	r16, r20
     1ce:	01 02       	muls	r16, r17
     1d0:	04 40       	sbci	r16, 0x04	; 4
     1d2:	40 40       	sbci	r20, 0x00	; 0
     1d4:	40 40       	sbci	r20, 0x00	; 0
     1d6:	00 01       	movw	r0, r0
     1d8:	02 04       	cpc	r0, r2
     1da:	00 20       	and	r0, r0
     1dc:	54 54       	subi	r21, 0x44	; 68
     1de:	54 78       	andi	r21, 0x84	; 132
     1e0:	7f 48       	sbci	r23, 0x8F	; 143
     1e2:	44 44       	sbci	r20, 0x44	; 68
     1e4:	38 38       	cpi	r19, 0x88	; 136
     1e6:	44 44       	sbci	r20, 0x44	; 68
     1e8:	44 20       	and	r4, r4
     1ea:	38 44       	sbci	r19, 0x48	; 72
     1ec:	44 48       	sbci	r20, 0x84	; 132
     1ee:	7f 38       	cpi	r23, 0x8F	; 143
     1f0:	54 54       	subi	r21, 0x44	; 68
     1f2:	54 18       	sub	r5, r4
     1f4:	08 7e       	andi	r16, 0xE8	; 232
     1f6:	09 01       	movw	r0, r18
     1f8:	02 08       	sbc	r0, r2
     1fa:	54 54       	subi	r21, 0x44	; 68
     1fc:	54 3c       	cpi	r21, 0xC4	; 196
     1fe:	7f 08       	sbc	r7, r15
     200:	04 04       	cpc	r0, r4
     202:	78 00       	.word	0x0078	; ????
     204:	44 7d       	andi	r20, 0xD4	; 212
     206:	40 00       	.word	0x0040	; ????
     208:	20 40       	sbci	r18, 0x00	; 0
     20a:	44 3d       	cpi	r20, 0xD4	; 212
     20c:	00 00       	nop
     20e:	7f 10       	cpse	r7, r15
     210:	28 44       	sbci	r18, 0x48	; 72
     212:	00 41       	sbci	r16, 0x10	; 16
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	00 7c       	andi	r16, 0xC0	; 192
     218:	04 18       	sub	r0, r4
     21a:	04 78       	andi	r16, 0x84	; 132
     21c:	7c 08       	sbc	r7, r12
     21e:	04 04       	cpc	r0, r4
     220:	78 38       	cpi	r23, 0x88	; 136
     222:	44 44       	sbci	r20, 0x44	; 68
     224:	44 38       	cpi	r20, 0x84	; 132
     226:	7c 14       	cp	r7, r12
     228:	14 14       	cp	r1, r4
     22a:	08 08       	sbc	r0, r8
     22c:	14 14       	cp	r1, r4
     22e:	18 7c       	andi	r17, 0xC8	; 200
     230:	7c 08       	sbc	r7, r12
     232:	04 04       	cpc	r0, r4
     234:	08 48       	sbci	r16, 0x88	; 136
     236:	54 54       	subi	r21, 0x44	; 68
     238:	54 20       	and	r5, r4
     23a:	04 3f       	cpi	r16, 0xF4	; 244
     23c:	44 40       	sbci	r20, 0x04	; 4
     23e:	20 3c       	cpi	r18, 0xC0	; 192
     240:	40 40       	sbci	r20, 0x00	; 0
     242:	20 7c       	andi	r18, 0xC0	; 192
     244:	1c 20       	and	r1, r12
     246:	40 20       	and	r4, r0
     248:	1c 3c       	cpi	r17, 0xCC	; 204
     24a:	40 30       	cpi	r20, 0x00	; 0
     24c:	40 3c       	cpi	r20, 0xC0	; 192
     24e:	44 28       	or	r4, r4
     250:	10 28       	or	r1, r0
     252:	44 0c       	add	r4, r4
     254:	50 50       	subi	r21, 0x00	; 0
     256:	50 3c       	cpi	r21, 0xC0	; 192
     258:	44 64       	ori	r20, 0x44	; 68
     25a:	54 4c       	sbci	r21, 0xC4	; 196
     25c:	44 00       	.word	0x0044	; ????
     25e:	08 36       	cpi	r16, 0x68	; 104
     260:	41 00       	.word	0x0041	; ????
     262:	00 00       	nop
     264:	7f 00       	.word	0x007f	; ????
     266:	00 00       	nop
     268:	41 36       	cpi	r20, 0x61	; 97
     26a:	08 00       	.word	0x0008	; ????
     26c:	00 30       	cpi	r16, 0x00	; 0
     26e:	08 10       	cpse	r0, r8
     270:	0c 00       	.word	0x000c	; ????

00000271 <splash>:
	...
     2d1:	00 00 00 3f e0 00 00 00 00 00 00 00 00 00 00 00     ...?............
     2e1:	00 00 7f ff e0 00 00 00 00 00 00 00 00 00 00 00     ................
     2f1:	00 ff ff ff e0 00 00 00 00 00 00 00 00 00 00 00     ................
     301:	1f ff ff ff e0 00 00 00 00 0f 00 00 00 00 00 00     ................
     311:	1f ff ff ff e0 00 00 3f e0 18 00 00 00 02 00 00     .......?........
     321:	1f ff ff ff e0 00 00 7f c0 10 00 00 00 02 00 00     ................
     331:	1f ff ff c1 e0 00 01 f8 00 30 00 00 00 02 00 00     .........0......
     341:	1f ff cc 01 e0 00 03 c0 00 10 17 38 70 b7 80 00     ...........8p...
     351:	1f e0 0c 01 e0 00 07 80 00 18 19 c8 98 c7 80 00     ................
     361:	0f 80 0c 01 f0 00 07 0f c0 0c 11 8c 08 c2 00 00     ................
     371:	0f 80 0c 00 f0 00 0e 3f c0 06 10 8c 08 82 00 00     .......?........
     381:	0f 80 0c 00 f0 00 1c 7f 80 03 10 8c 78 82 00 00     ............x...
     391:	0f 80 0c 00 f0 00 18 f0 00 01 90 8c e8 82 00 00     ................
     3a1:	0f 80 0c 00 f0 00 39 e0 00 00 90 8c 88 82 00 00     ......9.........
     3b1:	0f c0 04 00 f0 00 31 c0 00 00 90 8d 88 82 00 00     ......1.........
     3c1:	0f c0 04 00 f0 00 33 8f 80 01 90 8d 88 82 00 00     ......3.........
     3d1:	0f c0 04 00 f0 00 73 1f 80 3f 10 8c f8 83 80 00     ......s..?......
     3e1:	0f c0 04 00 f0 00 67 3c 00 1e 10 80 e0 81 80 00     ......g<........
     3f1:	0f c0 04 03 f0 00 66 30 00 00 00 00 00 00 00 00     ......f0........
     401:	0f c0 06 7f f0 00 66 70 00 00 00 00 00 00 00 00     ......fp........
     411:	0f c0 1f ff f0 00 06 62 00 00 00 00 00 00 00 00     .......b........
     421:	0f c1 ff ff f0 00 04 66 00 00 00 00 00 00 00 00     .......f........
     431:	07 ff ff ff f0 1e 00 47 00 03 03 00 00 00 00 c0     .......G........
     441:	07 ff ff fe f0 3e 00 02 20 03 03 00 00 00 00 c0     .....>.. .......
     451:	07 ff ff c0 f0 7e 00 00 20 03 03 00 00 00 00 c0     .....~.. .......
     461:	07 ff fe 00 f0 60 00 00 20 03 03 00 00 00 00 c0     .....`.. .......
     471:	07 ff 06 00 f0 60 42 22 70 73 63 60 c1 c2 46 c0     .....`B"psc`..F.
     481:	0f e0 06 00 f0 60 67 36 fc f3 f3 f1 f3 e3 cf c0     .....`g6........
     491:	0f c0 06 00 f0 60 67 36 fd f3 f3 f3 f3 f3 cf c0     .....`g6........
     4a1:	07 c0 06 00 f0 78 67 26 21 83 33 33 30 33 99 c0     .....xg&!.3303..
     4b1:	07 c0 06 00 f0 3e 67 66 21 83 33 33 10 33 18 c0     .....>gf!.33.3..
     4c1:	07 c0 06 00 70 0f 2d 66 21 83 33 13 11 f3 18 c0     ....p.-f!.3.....
     4d1:	07 c0 06 00 70 03 2d 66 21 83 33 13 13 f3 18 c0     ....p.-f!.3.....
     4e1:	07 c0 06 00 78 03 3d e6 21 83 33 13 13 33 18 c0     ....x.=.!.3..3..
     4f1:	07 c0 06 00 78 03 39 e6 21 83 33 33 12 33 18 c0     ....x.9.!.33.3..
     501:	07 e0 06 00 78 03 39 e6 21 83 33 33 32 33 18 c0     ....x.9.!.3323..
     511:	07 e0 06 03 f8 07 38 c6 31 c3 33 33 33 73 0d c0     ......8.1.333s..
     521:	07 e0 06 7f f8 7f 38 c6 3c f3 33 f3 f3 f3 0f 80     ......8.<.3.....
     531:	07 e0 07 ff f8 3e 18 c6 1c f3 31 e1 e1 b3 07 00     .....>....1.....
     541:	07 e0 1f ff f8 00 00 00 00 00 00 00 00 00 00 00     ................
     551:	07 e1 ff ff f0 00 00 00 00 00 00 00 00 00 00 00     ................
     561:	07 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
     571:	07 ff ff f8 00 00 00 00 00 00 00 00 00 00 00 00     ................
     581:	07 ff ff 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
     591:	03 ff fc 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5a1:	03 ff e0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5b1:	03 fe 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5c1:	03 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .p..............
     5d1:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000672 <__ctors_end>:
     672:	11 24       	eor	r1, r1
     674:	1f be       	out	0x3f, r1	; 63
     676:	cf e5       	ldi	r28, 0x5F	; 95
     678:	d8 e0       	ldi	r29, 0x08	; 8
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	cd bf       	out	0x3d, r28	; 61

0000067e <__do_copy_data>:
     67e:	11 e0       	ldi	r17, 0x01	; 1
     680:	a0 e6       	ldi	r26, 0x60	; 96
     682:	b0 e0       	ldi	r27, 0x00	; 0
     684:	e2 e5       	ldi	r30, 0x52	; 82
     686:	f6 e2       	ldi	r31, 0x26	; 38
     688:	02 c0       	rjmp	.+4      	; 0x68e <__do_copy_data+0x10>
     68a:	05 90       	lpm	r0, Z+
     68c:	0d 92       	st	X+, r0
     68e:	a6 35       	cpi	r26, 0x56	; 86
     690:	b1 07       	cpc	r27, r17
     692:	d9 f7       	brne	.-10     	; 0x68a <__do_copy_data+0xc>

00000694 <__do_clear_bss>:
     694:	25 e0       	ldi	r18, 0x05	; 5
     696:	a6 e5       	ldi	r26, 0x56	; 86
     698:	b1 e0       	ldi	r27, 0x01	; 1
     69a:	01 c0       	rjmp	.+2      	; 0x69e <.do_clear_bss_start>

0000069c <.do_clear_bss_loop>:
     69c:	1d 92       	st	X+, r1

0000069e <.do_clear_bss_start>:
     69e:	a4 38       	cpi	r26, 0x84	; 132
     6a0:	b2 07       	cpc	r27, r18
     6a2:	e1 f7       	brne	.-8      	; 0x69c <.do_clear_bss_loop>
     6a4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <main>
     6a8:	0c 94 27 13 	jmp	0x264e	; 0x264e <_exit>

000006ac <__bad_interrupt>:
     6ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006b0 <Write_2Nibbles>:
	#endif	
}

void Write_2Nibbles(unsigned char ch)
{
	E_HIGH;
     6b0:	c2 9a       	sbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b2:	ef e3       	ldi	r30, 0x3F	; 63
     6b4:	f1 e0       	ldi	r31, 0x01	; 1
     6b6:	31 97       	sbiw	r30, 0x01	; 1
     6b8:	f1 f7       	brne	.-4      	; 0x6b6 <Write_2Nibbles+0x6>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <Write_2Nibbles+0xc>
     6bc:	00 00       	nop
	if (ch & 0x10) D4_HIGH; else D4_LOW;
     6be:	84 ff       	sbrs	r24, 4
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <Write_2Nibbles+0x16>
     6c2:	94 9a       	sbi	0x12, 4	; 18
     6c4:	01 c0       	rjmp	.+2      	; 0x6c8 <Write_2Nibbles+0x18>
     6c6:	94 98       	cbi	0x12, 4	; 18
	if (ch & 0x20) D5_HIGH; else D5_LOW;
     6c8:	85 ff       	sbrs	r24, 5
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <Write_2Nibbles+0x20>
     6cc:	95 9a       	sbi	0x12, 5	; 18
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <Write_2Nibbles+0x22>
     6d0:	95 98       	cbi	0x12, 5	; 18
	if (ch & 0x40) D6_HIGH; else D6_LOW;
     6d2:	86 ff       	sbrs	r24, 6
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <Write_2Nibbles+0x2a>
     6d6:	96 9a       	sbi	0x12, 6	; 18
     6d8:	01 c0       	rjmp	.+2      	; 0x6dc <Write_2Nibbles+0x2c>
     6da:	96 98       	cbi	0x12, 6	; 18
	if (ch & 0x80) D7_HIGH; else D7_LOW;	
     6dc:	88 23       	and	r24, r24
     6de:	14 f4       	brge	.+4      	; 0x6e4 <Write_2Nibbles+0x34>
     6e0:	97 9a       	sbi	0x12, 7	; 18
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <Write_2Nibbles+0x36>
     6e4:	97 98       	cbi	0x12, 7	; 18
	E_LOW;
     6e6:	c2 98       	cbi	0x18, 2	; 24
     6e8:	ef e3       	ldi	r30, 0x3F	; 63
     6ea:	f1 e0       	ldi	r31, 0x01	; 1
     6ec:	31 97       	sbiw	r30, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <Write_2Nibbles+0x3c>
     6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <Write_2Nibbles+0x42>
     6f2:	00 00       	nop
	
	E_HIGH;
     6f4:	c2 9a       	sbi	0x18, 2	; 24
     6f6:	ef e3       	ldi	r30, 0x3F	; 63
     6f8:	f1 e0       	ldi	r31, 0x01	; 1
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <Write_2Nibbles+0x4a>
     6fe:	00 c0       	rjmp	.+0      	; 0x700 <Write_2Nibbles+0x50>
     700:	00 00       	nop
	if (ch & 0x01) D4_HIGH; else D4_LOW;
     702:	80 ff       	sbrs	r24, 0
     704:	02 c0       	rjmp	.+4      	; 0x70a <Write_2Nibbles+0x5a>
     706:	94 9a       	sbi	0x12, 4	; 18
     708:	01 c0       	rjmp	.+2      	; 0x70c <Write_2Nibbles+0x5c>
     70a:	94 98       	cbi	0x12, 4	; 18
	if (ch & 0x02) D5_HIGH; else D5_LOW;
     70c:	81 ff       	sbrs	r24, 1
     70e:	02 c0       	rjmp	.+4      	; 0x714 <Write_2Nibbles+0x64>
     710:	95 9a       	sbi	0x12, 5	; 18
     712:	01 c0       	rjmp	.+2      	; 0x716 <Write_2Nibbles+0x66>
     714:	95 98       	cbi	0x12, 5	; 18
	if (ch & 0x04) D6_HIGH; else D6_LOW;
     716:	82 ff       	sbrs	r24, 2
     718:	02 c0       	rjmp	.+4      	; 0x71e <Write_2Nibbles+0x6e>
     71a:	96 9a       	sbi	0x12, 6	; 18
     71c:	01 c0       	rjmp	.+2      	; 0x720 <Write_2Nibbles+0x70>
     71e:	96 98       	cbi	0x12, 6	; 18
	if (ch & 0x08) D7_HIGH; else D7_LOW;
     720:	83 ff       	sbrs	r24, 3
     722:	02 c0       	rjmp	.+4      	; 0x728 <Write_2Nibbles+0x78>
     724:	97 9a       	sbi	0x12, 7	; 18
     726:	01 c0       	rjmp	.+2      	; 0x72a <Write_2Nibbles+0x7a>
     728:	97 98       	cbi	0x12, 7	; 18
	E_LOW;	
     72a:	c2 98       	cbi	0x18, 2	; 24
     72c:	8f e3       	ldi	r24, 0x3F	; 63
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <Write_2Nibbles+0x80>
     734:	00 c0       	rjmp	.+0      	; 0x736 <Write_2Nibbles+0x86>
     736:	00 00       	nop
     738:	08 95       	ret

0000073a <GLCD_checkBusy>:
}

void GLCD_checkBusy()
{
	DATA_IN();
     73a:	81 b3       	in	r24, 0x11	; 17
     73c:	11 ba       	out	0x11, r1	; 17
	RS_LOW;	//Instruction
     73e:	c0 98       	cbi	0x18, 0	; 24
     740:	8f e3       	ldi	r24, 0x3F	; 63
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	f1 f7       	brne	.-4      	; 0x744 <GLCD_checkBusy+0xa>
     748:	00 c0       	rjmp	.+0      	; 0x74a <GLCD_checkBusy+0x10>
     74a:	00 00       	nop
	RW_HIGH; //Read mode
     74c:	c1 9a       	sbi	0x18, 1	; 24
     74e:	ef e3       	ldi	r30, 0x3F	; 63
     750:	f1 e0       	ldi	r31, 0x01	; 1
     752:	31 97       	sbiw	r30, 0x01	; 1
     754:	f1 f7       	brne	.-4      	; 0x752 <GLCD_checkBusy+0x18>
     756:	00 c0       	rjmp	.+0      	; 0x758 <GLCD_checkBusy+0x1e>
     758:	00 00       	nop
		
	#ifdef GLCD_4bit
		unsigned char highbyte, lowbyte;
		do
		{
			E_HIGH;
     75a:	c2 9a       	sbi	0x18, 2	; 24
     75c:	8f e3       	ldi	r24, 0x3F	; 63
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	01 97       	sbiw	r24, 0x01	; 1
     762:	f1 f7       	brne	.-4      	; 0x760 <GLCD_checkBusy+0x26>
     764:	00 c0       	rjmp	.+0      	; 0x766 <GLCD_checkBusy+0x2c>
     766:	00 00       	nop
			highbyte = DATA_GET(); _delay_us(5);
     768:	80 b3       	in	r24, 0x10	; 16
     76a:	9a e1       	ldi	r25, 0x1A	; 26
     76c:	9a 95       	dec	r25
     76e:	f1 f7       	brne	.-4      	; 0x76c <GLCD_checkBusy+0x32>
     770:	00 c0       	rjmp	.+0      	; 0x772 <GLCD_checkBusy+0x38>
			E_LOW;
     772:	c2 98       	cbi	0x18, 2	; 24
     774:	ef e3       	ldi	r30, 0x3F	; 63
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	31 97       	sbiw	r30, 0x01	; 1
     77a:	f1 f7       	brne	.-4      	; 0x778 <GLCD_checkBusy+0x3e>
     77c:	00 c0       	rjmp	.+0      	; 0x77e <GLCD_checkBusy+0x44>
     77e:	00 00       	nop
				
			E_HIGH;
     780:	c2 9a       	sbi	0x18, 2	; 24
     782:	ef e3       	ldi	r30, 0x3F	; 63
     784:	f1 e0       	ldi	r31, 0x01	; 1
     786:	31 97       	sbiw	r30, 0x01	; 1
     788:	f1 f7       	brne	.-4      	; 0x786 <GLCD_checkBusy+0x4c>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <GLCD_checkBusy+0x52>
     78c:	00 00       	nop
			lowbyte = DATA_GET(); _delay_us(5);
     78e:	90 b3       	in	r25, 0x10	; 16
     790:	fa e1       	ldi	r31, 0x1A	; 26
     792:	fa 95       	dec	r31
     794:	f1 f7       	brne	.-4      	; 0x792 <GLCD_checkBusy+0x58>
     796:	00 c0       	rjmp	.+0      	; 0x798 <GLCD_checkBusy+0x5e>
			E_LOW;
     798:	c2 98       	cbi	0x18, 2	; 24
     79a:	ef e3       	ldi	r30, 0x3F	; 63
     79c:	f1 e0       	ldi	r31, 0x01	; 1
     79e:	31 97       	sbiw	r30, 0x01	; 1
     7a0:	f1 f7       	brne	.-4      	; 0x79e <GLCD_checkBusy+0x64>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <GLCD_checkBusy+0x6a>
     7a4:	00 00       	nop
		} while (highbyte & BUSY_FLAG);
     7a6:	88 23       	and	r24, r24
     7a8:	c4 f2       	brlt	.-80     	; 0x75a <GLCD_checkBusy+0x20>
		{
			temp = DATA_GET();
		}while( (temp & 0x7F)== BUSY_FLAG); 
	#endif

	DATA_PORT_OUT();
     7aa:	81 b3       	in	r24, 0x11	; 17
     7ac:	80 6f       	ori	r24, 0xF0	; 240
     7ae:	81 bb       	out	0x11, r24	; 17
	RS_LOW;
     7b0:	c0 98       	cbi	0x18, 0	; 24
     7b2:	8f e3       	ldi	r24, 0x3F	; 63
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	f1 f7       	brne	.-4      	; 0x7b6 <GLCD_checkBusy+0x7c>
     7ba:	00 c0       	rjmp	.+0      	; 0x7bc <GLCD_checkBusy+0x82>
     7bc:	00 00       	nop
	RW_LOW;
     7be:	c1 98       	cbi	0x18, 1	; 24
     7c0:	ef e3       	ldi	r30, 0x3F	; 63
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	31 97       	sbiw	r30, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <GLCD_checkBusy+0x8a>
     7c8:	00 c0       	rjmp	.+0      	; 0x7ca <GLCD_checkBusy+0x90>
     7ca:	00 00       	nop
     7cc:	08 95       	ret

000007ce <GLCD_Write>:
	
	GLCD_enable(ON);	
}

void GLCD_Write(unsigned char type, unsigned char data)
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	d8 2f       	mov	r29, r24
     7d4:	c6 2f       	mov	r28, r22
	GLCD_checkBusy();	
     7d6:	0e 94 9d 03 	call	0x73a	; 0x73a <GLCD_checkBusy>
	if (type == DATA)
     7da:	d1 30       	cpi	r29, 0x01	; 1
     7dc:	41 f4       	brne	.+16     	; 0x7ee <GLCD_Write+0x20>
	{
		RS_HIGH;
     7de:	c0 9a       	sbi	0x18, 0	; 24
     7e0:	8f e3       	ldi	r24, 0x3F	; 63
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	01 97       	sbiw	r24, 0x01	; 1
     7e6:	f1 f7       	brne	.-4      	; 0x7e4 <GLCD_Write+0x16>
     7e8:	00 c0       	rjmp	.+0      	; 0x7ea <GLCD_Write+0x1c>
     7ea:	00 00       	nop
     7ec:	07 c0       	rjmp	.+14     	; 0x7fc <GLCD_Write+0x2e>
	}
	else
	{
		RS_LOW;
     7ee:	c0 98       	cbi	0x18, 0	; 24
     7f0:	8f e3       	ldi	r24, 0x3F	; 63
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	01 97       	sbiw	r24, 0x01	; 1
     7f6:	f1 f7       	brne	.-4      	; 0x7f4 <GLCD_Write+0x26>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <GLCD_Write+0x2c>
     7fa:	00 00       	nop
	}
	RW_LOW;
     7fc:	c1 98       	cbi	0x18, 1	; 24
     7fe:	8f e3       	ldi	r24, 0x3F	; 63
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <GLCD_Write+0x34>
     806:	00 c0       	rjmp	.+0      	; 0x808 <GLCD_Write+0x3a>
     808:	00 00       	nop
	
	#ifdef GLCD_4bit	
		Write_2Nibbles(data);
     80a:	8c 2f       	mov	r24, r28
     80c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Write_2Nibbles>
	#else
		DATA_PORT = data;
		toggle_E;
	#endif	
}
     810:	df 91       	pop	r29
     812:	cf 91       	pop	r28
     814:	08 95       	ret

00000816 <GLCD_enable>:
	GLCD_Write(DATA,*string++);
}

void GLCD_enable(unsigned char on_off)
{
	if(on_off)
     816:	88 23       	and	r24, r24
     818:	29 f0       	breq	.+10     	; 0x824 <GLCD_enable+0xe>
	{
		GLCD_Write(COMMAND,GRAPHIC_ON);
     81a:	66 e2       	ldi	r22, 0x26	; 38
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
     822:	08 95       	ret
	}
	else
	{
		GLCD_Write(COMMAND,GRAPHIC_OFF);
     824:	64 e2       	ldi	r22, 0x24	; 36
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
     82c:	08 95       	ret

0000082e <GLCD_Init>:
#include "font5x7.h"


void GLCD_Init(void)
{
	DATA_PORT_OUT();    // set data port for output
     82e:	81 b3       	in	r24, 0x11	; 17
     830:	80 6f       	ori	r24, 0xF0	; 240
     832:	81 bb       	out	0x11, r24	; 17
	COMMAND_OUT();
     834:	87 b3       	in	r24, 0x17	; 23
     836:	8f 60       	ori	r24, 0x0F	; 15
     838:	87 bb       	out	0x17, r24	; 23
	E_LOW;
     83a:	c2 98       	cbi	0x18, 2	; 24
     83c:	8f e3       	ldi	r24, 0x3F	; 63
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <GLCD_Init+0x12>
     844:	00 c0       	rjmp	.+0      	; 0x846 <GLCD_Init+0x18>
     846:	00 00       	nop
	RS_LOW;
     848:	c0 98       	cbi	0x18, 0	; 24
     84a:	8f e3       	ldi	r24, 0x3F	; 63
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	01 97       	sbiw	r24, 0x01	; 1
     850:	f1 f7       	brne	.-4      	; 0x84e <GLCD_Init+0x20>
     852:	00 c0       	rjmp	.+0      	; 0x854 <GLCD_Init+0x26>
     854:	00 00       	nop
	RW_LOW;
     856:	c1 98       	cbi	0x18, 1	; 24
     858:	8f e3       	ldi	r24, 0x3F	; 63
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	01 97       	sbiw	r24, 0x01	; 1
     85e:	f1 f7       	brne	.-4      	; 0x85c <GLCD_Init+0x2e>
     860:	00 c0       	rjmp	.+0      	; 0x862 <__stack+0x3>
     862:	00 00       	nop
	/* Switch display toParallel mode */
	//COMMAND_PORT |= PSB;
	/* Reset display */
	COMMAND_PORT &= ~RST;
     864:	c3 98       	cbi	0x18, 3	; 24
     866:	95 e0       	ldi	r25, 0x05	; 5
     868:	9a 95       	dec	r25
     86a:	f1 f7       	brne	.-4      	; 0x868 <__stack+0x9>
     86c:	00 00       	nop
	_delay_us(1);
	COMMAND_PORT |= RST;
     86e:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	83 ef       	ldi	r24, 0xF3	; 243
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	21 50       	subi	r18, 0x01	; 1
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <__stack+0x17>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
     880:	00 00       	nop
	
	_delay_ms(40);
	#ifdef GLCD_4bit
		GLCD_Write(COMMAND,FUNCTION|FUNCTION_4BIT);
     882:	60 e2       	ldi	r22, 0x20	; 32
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
	#else
		GLCD_Write(COMMAND,FUNCTION|FUNCTION_8BIT);
	#endif
	GLCD_Write(COMMAND,DISPLAY|DISPLAY_ON); 
     88a:	6c e0       	ldi	r22, 0x0C	; 12
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
	GLCD_Write(COMMAND,CLEAR);
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
	GLCD_Write(COMMAND,0x06);
     89a:	66 e0       	ldi	r22, 0x06	; 6
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
	GLCD_Write(COMMAND,HOME);
     8a2:	62 e0       	ldi	r22, 0x02	; 2
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
	
	GLCD_enable(ON);	
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	0e 94 0b 04 	call	0x816	; 0x816 <GLCD_enable>
     8b0:	08 95       	ret

000008b2 <GLCD_ScreenGraphics>:
		
	}
}

void GLCD_ScreenGraphics(const unsigned char* graphic)
{
     8b2:	0f 93       	push	r16
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
	unsigned char x, y;
	for (y = 0; y < 64; y++)
	{
		for (x = 0; x < 16; x++)
		{
			Buffer[x][y] = pgm_read_byte(&(graphic[x+y*16]));
     8ba:	40 e0       	ldi	r20, 0x00	; 0
     8bc:	50 e0       	ldi	r21, 0x00	; 0
     8be:	c0 e0       	ldi	r28, 0x00	; 0
     8c0:	d0 e0       	ldi	r29, 0x00	; 0
     8c2:	00 e0       	ldi	r16, 0x00	; 0
     8c4:	10 e0       	ldi	r17, 0x00	; 0
     8c6:	20 c0       	rjmp	.+64     	; 0x908 <GLCD_ScreenGraphics+0x56>
     8c8:	f9 01       	movw	r30, r18
     8ca:	e4 0f       	add	r30, r20
     8cc:	f5 1f       	adc	r31, r21
     8ce:	e8 0f       	add	r30, r24
     8d0:	f9 1f       	adc	r31, r25
     8d2:	e4 91       	lpm	r30, Z
     8d4:	d9 01       	movw	r26, r18
     8d6:	00 24       	eor	r0, r0
     8d8:	b6 95       	lsr	r27
     8da:	a7 95       	ror	r26
     8dc:	07 94       	ror	r0
     8de:	b6 95       	lsr	r27
     8e0:	a7 95       	ror	r26
     8e2:	07 94       	ror	r0
     8e4:	ba 2f       	mov	r27, r26
     8e6:	a0 2d       	mov	r26, r0
     8e8:	a6 0f       	add	r26, r22
     8ea:	b7 1f       	adc	r27, r23
     8ec:	a3 59       	subi	r26, 0x93	; 147
     8ee:	be 4f       	sbci	r27, 0xFE	; 254
     8f0:	ec 93       	st	X, r30
     8f2:	2f 5f       	subi	r18, 0xFF	; 255
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
void GLCD_ScreenGraphics(const unsigned char* graphic)
{
	unsigned char x, y;
	for (y = 0; y < 64; y++)
	{
		for (x = 0; x < 16; x++)
     8f6:	20 31       	cpi	r18, 0x10	; 16
     8f8:	31 05       	cpc	r19, r1
     8fa:	31 f7       	brne	.-52     	; 0x8c8 <GLCD_ScreenGraphics+0x16>
     8fc:	21 96       	adiw	r28, 0x01	; 1
     8fe:	40 5f       	subi	r20, 0xF0	; 240
     900:	5f 4f       	sbci	r21, 0xFF	; 255
}

void GLCD_ScreenGraphics(const unsigned char* graphic)
{
	unsigned char x, y;
	for (y = 0; y < 64; y++)
     902:	c0 34       	cpi	r28, 0x40	; 64
     904:	d1 05       	cpc	r29, r1
     906:	21 f0       	breq	.+8      	; 0x910 <GLCD_ScreenGraphics+0x5e>
	{
		for (x = 0; x < 16; x++)
		{
			Buffer[x][y] = pgm_read_byte(&(graphic[x+y*16]));
     908:	be 01       	movw	r22, r28
     90a:	20 2f       	mov	r18, r16
     90c:	31 2f       	mov	r19, r17
     90e:	dc cf       	rjmp	.-72     	; 0x8c8 <GLCD_ScreenGraphics+0x16>
		}
	}
}
     910:	df 91       	pop	r29
     912:	cf 91       	pop	r28
     914:	1f 91       	pop	r17
     916:	0f 91       	pop	r16
     918:	08 95       	ret

0000091a <GLCD_GOTO_XY>:

void GLCD_GOTO_XY(unsigned char x, unsigned char y)
{
     91a:	cf 93       	push	r28
     91c:	c8 2f       	mov	r28, r24
		if(y < 32)
     91e:	60 32       	cpi	r22, 0x20	; 32
     920:	50 f4       	brcc	.+20     	; 0x936 <GLCD_GOTO_XY+0x1c>
		{										
				GLCD_Write(COMMAND,0x80 | y);
     922:	60 68       	ori	r22, 0x80	; 128
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
				GLCD_Write(COMMAND,0x80 | x);
     92a:	6c 2f       	mov	r22, r28
     92c:	60 68       	ori	r22, 0x80	; 128
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
     934:	0a c0       	rjmp	.+20     	; 0x94a <GLCD_GOTO_XY+0x30>
		}
		else
		{
				GLCD_Write(COMMAND,0x80 | (y-32));
     936:	60 52       	subi	r22, 0x20	; 32
     938:	60 68       	ori	r22, 0x80	; 128
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
				GLCD_Write(COMMAND,0x88 | x);
     940:	6c 2f       	mov	r22, r28
     942:	68 68       	ori	r22, 0x88	; 136
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
		}		
}
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <GLCD_Draw_Char>:
		count++;
	}
}

void GLCD_Draw_Char(unsigned char x,unsigned char y, char character,unsigned char color)
{
     94e:	9f 92       	push	r9
     950:	af 92       	push	r10
     952:	bf 92       	push	r11
     954:	cf 92       	push	r12
     956:	df 92       	push	r13
     958:	ef 92       	push	r14
     95a:	ff 92       	push	r15
     95c:	0f 93       	push	r16
     95e:	1f 93       	push	r17
     960:	cf 93       	push	r28
     962:	df 93       	push	r29
     964:	00 d0       	rcall	.+0      	; 0x966 <GLCD_Draw_Char+0x18>
     966:	00 d0       	rcall	.+0      	; 0x968 <GLCD_Draw_Char+0x1a>
     968:	1f 92       	push	r1
     96a:	cd b7       	in	r28, 0x3d	; 61
     96c:	de b7       	in	r29, 0x3e	; 62
	unsigned char row;
	unsigned char colInd;	
	unsigned char colList[5];
	
	colList[4] = pgm_read_byte(&(font5x7[(character-START_CHAR)][0]));
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	40 52       	subi	r20, 0x20	; 32
     972:	51 09       	sbc	r21, r1
     974:	fa 01       	movw	r30, r20
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	4e 0f       	add	r20, r30
     980:	5f 1f       	adc	r21, r31
     982:	fa 01       	movw	r30, r20
     984:	ea 56       	subi	r30, 0x6A	; 106
     986:	ff 4f       	sbci	r31, 0xFF	; 255
     988:	e4 91       	lpm	r30, Z
     98a:	ed 83       	std	Y+5, r30	; 0x05
	colList[3] = pgm_read_byte(&(font5x7[(character-START_CHAR)][1]));
     98c:	fa 01       	movw	r30, r20
     98e:	e9 56       	subi	r30, 0x69	; 105
     990:	ff 4f       	sbci	r31, 0xFF	; 255
     992:	e4 91       	lpm	r30, Z
     994:	ec 83       	std	Y+4, r30	; 0x04
	colList[2] = pgm_read_byte(&(font5x7[(character-START_CHAR)][2]));
     996:	fa 01       	movw	r30, r20
     998:	e8 56       	subi	r30, 0x68	; 104
     99a:	ff 4f       	sbci	r31, 0xFF	; 255
     99c:	e4 91       	lpm	r30, Z
     99e:	eb 83       	std	Y+3, r30	; 0x03
	colList[1] = pgm_read_byte(&(font5x7[(character-START_CHAR)][3]));
     9a0:	fa 01       	movw	r30, r20
     9a2:	e7 56       	subi	r30, 0x67	; 103
     9a4:	ff 4f       	sbci	r31, 0xFF	; 255
     9a6:	e4 91       	lpm	r30, Z
     9a8:	ea 83       	std	Y+2, r30	; 0x02
	colList[0] = pgm_read_byte(&(font5x7[(character-START_CHAR)][4]));
     9aa:	fa 01       	movw	r30, r20
     9ac:	e6 56       	subi	r30, 0x66	; 102
     9ae:	ff 4f       	sbci	r31, 0xFF	; 255
     9b0:	44 91       	lpm	r20, Z
     9b2:	49 83       	std	Y+1, r20	; 0x01
     9b4:	00 e0       	ldi	r16, 0x00	; 0
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	ee 24       	eor	r14, r14
     9ba:	e3 94       	inc	r14
     9bc:	f1 2c       	mov	r15, r1
	for (row=0;row<8;row++)
	{			
		unsigned char dataA = 0x00;
		for (colInd=0;colInd<5;colInd++)
		{
			if (colList[colInd] & (1 << row))
     9be:	0f 2e       	mov	r0, r31
     9c0:	f3 e0       	ldi	r31, 0x03	; 3
     9c2:	9f 2e       	mov	r9, r31
     9c4:	f0 2d       	mov	r31, r0
     9c6:	a1 2c       	mov	r10, r1
     9c8:	b1 2c       	mov	r11, r1
     9ca:	c6 2e       	mov	r12, r22
     9cc:	d1 2c       	mov	r13, r1
				dataA = dataA | (1 << (colInd+3));
			}
		}
		if(color == BLACK){}
		else{dataA ^= 0xFF;}
		Buffer[x][row+y] = dataA;					
     9ce:	90 e4       	ldi	r25, 0x40	; 64
     9d0:	89 9f       	mul	r24, r25
     9d2:	b0 01       	movw	r22, r0
     9d4:	11 24       	eor	r1, r1
     9d6:	22 c0       	rjmp	.+68     	; 0xa1c <GLCD_Draw_Char+0xce>
	for (row=0;row<8;row++)
	{			
		unsigned char dataA = 0x00;
		for (colInd=0;colInd<5;colInd++)
		{
			if (colList[colInd] & (1 << row))
     9d8:	4d 91       	ld	r20, X+
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	48 23       	and	r20, r24
     9de:	59 23       	and	r21, r25
     9e0:	45 2b       	or	r20, r21
     9e2:	41 f0       	breq	.+16     	; 0x9f4 <GLCD_Draw_Char+0xa6>
			{
				dataA = dataA | (1 << (colInd+3));
     9e4:	a7 01       	movw	r20, r14
     9e6:	0e 2e       	mov	r0, r30
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <GLCD_Draw_Char+0xa0>
     9ea:	44 0f       	add	r20, r20
     9ec:	55 1f       	adc	r21, r21
     9ee:	0a 94       	dec	r0
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <GLCD_Draw_Char+0x9c>
     9f2:	34 2b       	or	r19, r20
     9f4:	31 96       	adiw	r30, 0x01	; 1
		colList[0] = pgm_read_byte(&(font_6x8[(character-START_CHAR)][7]));
		*/
	for (row=0;row<8;row++)
	{			
		unsigned char dataA = 0x00;
		for (colInd=0;colInd<5;colInd++)
     9f6:	e8 30       	cpi	r30, 0x08	; 8
     9f8:	f1 05       	cpc	r31, r1
     9fa:	71 f7       	brne	.-36     	; 0x9d8 <GLCD_Draw_Char+0x8a>
			if (colList[colInd] & (1 << row))
			{
				dataA = dataA | (1 << (colInd+3));
			}
		}
		if(color == BLACK){}
     9fc:	2f 3f       	cpi	r18, 0xFF	; 255
     9fe:	09 f0       	breq	.+2      	; 0xa02 <GLCD_Draw_Char+0xb4>
		else{dataA ^= 0xFF;}
     a00:	30 95       	com	r19
     a02:	f8 01       	movw	r30, r16
     a04:	ec 0d       	add	r30, r12
     a06:	fd 1d       	adc	r31, r13
		Buffer[x][row+y] = dataA;					
     a08:	e6 0f       	add	r30, r22
     a0a:	f7 1f       	adc	r31, r23
     a0c:	e3 59       	subi	r30, 0x93	; 147
     a0e:	fe 4f       	sbci	r31, 0xFE	; 254
     a10:	30 83       	st	Z, r19
     a12:	0f 5f       	subi	r16, 0xFF	; 255
     a14:	1f 4f       	sbci	r17, 0xFF	; 255
		colList[3] = pgm_read_byte(&(font_6x8[(character-START_CHAR)][4]));
		colList[2] = pgm_read_byte(&(font_6x8[(character-START_CHAR)][5]));
		colList[1] = pgm_read_byte(&(font_6x8[(character-START_CHAR)][6]));
		colList[0] = pgm_read_byte(&(font_6x8[(character-START_CHAR)][7]));
		*/
	for (row=0;row<8;row++)
     a16:	08 30       	cpi	r16, 0x08	; 8
     a18:	11 05       	cpc	r17, r1
     a1a:	69 f0       	breq	.+26     	; 0xa36 <GLCD_Draw_Char+0xe8>
     a1c:	c7 01       	movw	r24, r14
     a1e:	00 2e       	mov	r0, r16
     a20:	02 c0       	rjmp	.+4      	; 0xa26 <GLCD_Draw_Char+0xd8>
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	0a 94       	dec	r0
     a28:	e2 f7       	brpl	.-8      	; 0xa22 <GLCD_Draw_Char+0xd4>
     a2a:	de 01       	movw	r26, r28
     a2c:	11 96       	adiw	r26, 0x01	; 1
	{			
		unsigned char dataA = 0x00;
		for (colInd=0;colInd<5;colInd++)
		{
			if (colList[colInd] & (1 << row))
     a2e:	e9 2d       	mov	r30, r9
     a30:	fa 2d       	mov	r31, r10
     a32:	3b 2d       	mov	r19, r11
     a34:	d1 cf       	rjmp	.-94     	; 0x9d8 <GLCD_Draw_Char+0x8a>
		}
		if(color == BLACK){}
		else{dataA ^= 0xFF;}
		Buffer[x][row+y] = dataA;					
	}
}
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	0f 90       	pop	r0
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	9f 90       	pop	r9
     a56:	08 95       	ret

00000a58 <GLCD_Draw_String>:

void GLCD_Draw_String(unsigned char x,unsigned char y, const char *str,unsigned char color)
{
     a58:	ef 92       	push	r14
     a5a:	ff 92       	push	r15
     a5c:	0f 93       	push	r16
     a5e:	1f 93       	push	r17
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	d8 2f       	mov	r29, r24
     a66:	f6 2e       	mov	r15, r22
     a68:	e2 2e       	mov	r14, r18
	unsigned char length = strlen(str);
     a6a:	fa 01       	movw	r30, r20
     a6c:	01 90       	ld	r0, Z+
     a6e:	00 20       	and	r0, r0
     a70:	e9 f7       	brne	.-6      	; 0xa6c <GLCD_Draw_String+0x14>
     a72:	31 97       	sbiw	r30, 0x01	; 1
     a74:	ce 2f       	mov	r28, r30
     a76:	c4 1b       	sub	r28, r20
	
	for( ;  length ; length -- )
     a78:	61 f0       	breq	.+24     	; 0xa92 <GLCD_Draw_String+0x3a>
     a7a:	8a 01       	movw	r16, r20
	{GLCD_Draw_Char(x,y,*(str++),color);x++;}
     a7c:	f8 01       	movw	r30, r16
     a7e:	41 91       	ld	r20, Z+
     a80:	8f 01       	movw	r16, r30
     a82:	2e 2d       	mov	r18, r14
     a84:	6f 2d       	mov	r22, r15
     a86:	8d 2f       	mov	r24, r29
     a88:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
     a8c:	df 5f       	subi	r29, 0xFF	; 255

void GLCD_Draw_String(unsigned char x,unsigned char y, const char *str,unsigned char color)
{
	unsigned char length = strlen(str);
	
	for( ;  length ; length -- )
     a8e:	c1 50       	subi	r28, 0x01	; 1
     a90:	a9 f7       	brne	.-22     	; 0xa7c <GLCD_Draw_String+0x24>
	{GLCD_Draw_Char(x,y,*(str++),color);x++;}
		
	return;
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	08 95       	ret

00000aa0 <GLCD_ClearBuffer>:

void GLCD_ClearBuffer(unsigned char color)
{
     aa0:	40 e0       	ldi	r20, 0x00	; 0
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	70 e0       	ldi	r23, 0x00	; 0
     aa6:	60 e0       	ldi	r22, 0x00	; 0
	{		
		for(x = 0; x < 16; x++)
		{
			if (color)
			{
				Buffer[x][y]= BLACK;
     aa8:	9f ef       	ldi	r25, 0xFF	; 255
     aaa:	2b c0       	rjmp	.+86     	; 0xb02 <GLCD_ClearBuffer+0x62>
	unsigned char x, y;
	for(y = 0; y < 64; y++)
	{		
		for(x = 0; x < 16; x++)
		{
			if (color)
     aac:	88 23       	and	r24, r24
     aae:	81 f0       	breq	.+32     	; 0xad0 <GLCD_ClearBuffer+0x30>
			{
				Buffer[x][y]= BLACK;
     ab0:	f9 01       	movw	r30, r18
     ab2:	00 24       	eor	r0, r0
     ab4:	f6 95       	lsr	r31
     ab6:	e7 95       	ror	r30
     ab8:	07 94       	ror	r0
     aba:	f6 95       	lsr	r31
     abc:	e7 95       	ror	r30
     abe:	07 94       	ror	r0
     ac0:	fe 2f       	mov	r31, r30
     ac2:	e0 2d       	mov	r30, r0
     ac4:	e4 0f       	add	r30, r20
     ac6:	f5 1f       	adc	r31, r21
     ac8:	e3 59       	subi	r30, 0x93	; 147
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	90 83       	st	Z, r25
     ace:	0f c0       	rjmp	.+30     	; 0xaee <GLCD_ClearBuffer+0x4e>
			} 
			else
			{
				Buffer[x][y]= WHITE;
     ad0:	f9 01       	movw	r30, r18
     ad2:	00 24       	eor	r0, r0
     ad4:	f6 95       	lsr	r31
     ad6:	e7 95       	ror	r30
     ad8:	07 94       	ror	r0
     ada:	f6 95       	lsr	r31
     adc:	e7 95       	ror	r30
     ade:	07 94       	ror	r0
     ae0:	fe 2f       	mov	r31, r30
     ae2:	e0 2d       	mov	r30, r0
     ae4:	e4 0f       	add	r30, r20
     ae6:	f5 1f       	adc	r31, r21
     ae8:	e3 59       	subi	r30, 0x93	; 147
     aea:	fe 4f       	sbci	r31, 0xFE	; 254
     aec:	10 82       	st	Z, r1
     aee:	2f 5f       	subi	r18, 0xFF	; 255
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
void GLCD_ClearBuffer(unsigned char color)
{
	unsigned char x, y;
	for(y = 0; y < 64; y++)
	{		
		for(x = 0; x < 16; x++)
     af2:	20 31       	cpi	r18, 0x10	; 16
     af4:	31 05       	cpc	r19, r1
     af6:	d1 f6       	brne	.-76     	; 0xaac <GLCD_ClearBuffer+0xc>
     af8:	4f 5f       	subi	r20, 0xFF	; 255
     afa:	5f 4f       	sbci	r21, 0xFF	; 255
}

void GLCD_ClearBuffer(unsigned char color)
{
	unsigned char x, y;
	for(y = 0; y < 64; y++)
     afc:	40 34       	cpi	r20, 0x40	; 64
     afe:	51 05       	cpc	r21, r1
     b00:	19 f0       	breq	.+6      	; 0xb08 <GLCD_ClearBuffer+0x68>
		
	return;
}

void GLCD_ClearBuffer(unsigned char color)
{
     b02:	27 2f       	mov	r18, r23
     b04:	36 2f       	mov	r19, r22
     b06:	d2 cf       	rjmp	.-92     	; 0xaac <GLCD_ClearBuffer+0xc>
     b08:	08 95       	ret

00000b0a <GLCD_Clear_Row>:
	}
}

void GLCD_Clear_Row(unsigned char y, unsigned char color)
{
	for (unsigned char i=y; i<(y+8); i++)
     b0a:	48 2f       	mov	r20, r24
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	da 01       	movw	r26, r20
     b10:	18 96       	adiw	r26, 0x08	; 8
     b12:	4a 17       	cp	r20, r26
     b14:	5b 07       	cpc	r21, r27
     b16:	e4 f0       	brlt	.+56     	; 0xb50 <GLCD_Clear_Row+0x46>
     b18:	08 95       	ret
	{
		for(unsigned char x = 0; x<16; x++)
		{Buffer[x][i] = color;}		
     b1a:	f9 01       	movw	r30, r18
     b1c:	00 24       	eor	r0, r0
     b1e:	f6 95       	lsr	r31
     b20:	e7 95       	ror	r30
     b22:	07 94       	ror	r0
     b24:	f6 95       	lsr	r31
     b26:	e7 95       	ror	r30
     b28:	07 94       	ror	r0
     b2a:	fe 2f       	mov	r31, r30
     b2c:	e0 2d       	mov	r30, r0
     b2e:	e4 0f       	add	r30, r20
     b30:	f5 1f       	adc	r31, r21
     b32:	e3 59       	subi	r30, 0x93	; 147
     b34:	fe 4f       	sbci	r31, 0xFE	; 254
     b36:	60 83       	st	Z, r22
     b38:	2f 5f       	subi	r18, 0xFF	; 255
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255

void GLCD_Clear_Row(unsigned char y, unsigned char color)
{
	for (unsigned char i=y; i<(y+8); i++)
	{
		for(unsigned char x = 0; x<16; x++)
     b3c:	20 31       	cpi	r18, 0x10	; 16
     b3e:	31 05       	cpc	r19, r1
     b40:	61 f7       	brne	.-40     	; 0xb1a <GLCD_Clear_Row+0x10>
	}
}

void GLCD_Clear_Row(unsigned char y, unsigned char color)
{
	for (unsigned char i=y; i<(y+8); i++)
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	48 2f       	mov	r20, r24
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	4a 17       	cp	r20, r26
     b4a:	5b 07       	cpc	r21, r27
     b4c:	1c f0       	brlt	.+6      	; 0xb54 <GLCD_Clear_Row+0x4a>
     b4e:	08 95       	ret
		}
	}
}

void GLCD_Clear_Row(unsigned char y, unsigned char color)
{
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	27 2f       	mov	r18, r23
     b56:	39 2f       	mov	r19, r25
     b58:	e0 cf       	rjmp	.-64     	; 0xb1a <GLCD_Clear_Row+0x10>

00000b5a <GLCD_Draw_Pixel>:
	return;
}

void GLCD_Draw_Pixel(unsigned char x, unsigned char y, unsigned char colour)
{
	unsigned char dot = 1<<(7-x%8);
     b5a:	28 2f       	mov	r18, r24
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	20 95       	com	r18
     b60:	30 95       	com	r19
     b62:	27 70       	andi	r18, 0x07	; 7
     b64:	33 27       	eor	r19, r19
     b66:	e1 e0       	ldi	r30, 0x01	; 1
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	df 01       	movw	r26, r30
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <GLCD_Draw_Pixel+0x18>
     b6e:	aa 0f       	add	r26, r26
     b70:	bb 1f       	adc	r27, r27
     b72:	2a 95       	dec	r18
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <GLCD_Draw_Pixel+0x14>
     b76:	9d 01       	movw	r18, r26
	x = x/8;
     b78:	86 95       	lsr	r24
     b7a:	86 95       	lsr	r24
     b7c:	86 95       	lsr	r24
	if (colour == BLACK){Buffer[x][y]|=dot;	} 
     b7e:	4f 3f       	cpi	r20, 0xFF	; 255
     b80:	61 f4       	brne	.+24     	; 0xb9a <GLCD_Draw_Pixel+0x40>
     b82:	b0 e4       	ldi	r27, 0x40	; 64
     b84:	8b 9f       	mul	r24, r27
     b86:	f0 01       	movw	r30, r0
     b88:	11 24       	eor	r1, r1
     b8a:	e6 0f       	add	r30, r22
     b8c:	f1 1d       	adc	r31, r1
     b8e:	e3 59       	subi	r30, 0x93	; 147
     b90:	fe 4f       	sbci	r31, 0xFE	; 254
     b92:	80 81       	ld	r24, Z
     b94:	28 2b       	or	r18, r24
     b96:	20 83       	st	Z, r18
     b98:	08 95       	ret
	else { Buffer[x][y]&=~dot;}
     b9a:	90 e4       	ldi	r25, 0x40	; 64
     b9c:	89 9f       	mul	r24, r25
     b9e:	f0 01       	movw	r30, r0
     ba0:	11 24       	eor	r1, r1
     ba2:	e6 0f       	add	r30, r22
     ba4:	f1 1d       	adc	r31, r1
     ba6:	e3 59       	subi	r30, 0x93	; 147
     ba8:	fe 4f       	sbci	r31, 0xFE	; 254
     baa:	80 81       	ld	r24, Z
     bac:	20 95       	com	r18
     bae:	28 23       	and	r18, r24
     bb0:	20 83       	st	Z, r18
     bb2:	08 95       	ret

00000bb4 <GLCD_Draw_HorizLine>:
	
	return;
}

void GLCD_Draw_HorizLine(unsigned char x1, unsigned char x2, unsigned char y, unsigned char color)
{
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	c8 2f       	mov	r28, r24
     bbe:	d6 2f       	mov	r29, r22
     bc0:	14 2f       	mov	r17, r20
     bc2:	02 2f       	mov	r16, r18
	unsigned char i;
	/* Swap X */
	if (x1 > x2) {
     bc4:	68 17       	cp	r22, r24
     bc6:	10 f4       	brcc	.+4      	; 0xbcc <GLCD_Draw_HorizLine+0x18>
		i = x1;
		x1 = x2;
     bc8:	c6 2f       	mov	r28, r22
		x2 = i;
     bca:	d8 2f       	mov	r29, r24
	}
	for (i = x1; i <= x2; i++)
	GLCD_Draw_Pixel(i, y, color);
     bcc:	40 2f       	mov	r20, r16
     bce:	61 2f       	mov	r22, r17
     bd0:	8c 2f       	mov	r24, r28
     bd2:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
	if (x1 > x2) {
		i = x1;
		x1 = x2;
		x2 = i;
	}
	for (i = x1; i <= x2; i++)
     bd6:	cf 5f       	subi	r28, 0xFF	; 255
     bd8:	dc 17       	cp	r29, r28
     bda:	c0 f7       	brcc	.-16     	; 0xbcc <GLCD_Draw_HorizLine+0x18>
	GLCD_Draw_Pixel(i, y, color);

	return;
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	08 95       	ret

00000be6 <GLCD_Draw_VertcLine>:

void GLCD_Draw_VertcLine(unsigned char x, unsigned char y1, unsigned char y2, unsigned char color)
{
     be6:	0f 93       	push	r16
     be8:	1f 93       	push	r17
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	18 2f       	mov	r17, r24
     bf0:	c6 2f       	mov	r28, r22
     bf2:	d4 2f       	mov	r29, r20
     bf4:	02 2f       	mov	r16, r18
	unsigned char i;
	/* Swap Y */
	if (y1 > y2)
     bf6:	46 17       	cp	r20, r22
     bf8:	10 f4       	brcc	.+4      	; 0xbfe <GLCD_Draw_VertcLine+0x18>
	{
		i = y1;
		y1 = y2;
     bfa:	c4 2f       	mov	r28, r20
		y2 = i;
     bfc:	d6 2f       	mov	r29, r22
	}
	for (i = y1; i <= y2; i++)
	GLCD_Draw_Pixel(x, i, color);
     bfe:	40 2f       	mov	r20, r16
     c00:	6c 2f       	mov	r22, r28
     c02:	81 2f       	mov	r24, r17
     c04:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
	{
		i = y1;
		y1 = y2;
		y2 = i;
	}
	for (i = y1; i <= y2; i++)
     c08:	cf 5f       	subi	r28, 0xFF	; 255
     c0a:	dc 17       	cp	r29, r28
     c0c:	c0 f7       	brcc	.-16     	; 0xbfe <GLCD_Draw_VertcLine+0x18>
	GLCD_Draw_Pixel(x, i, color);
	return;
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	08 95       	ret

00000c18 <GLCD_Render>:
	}
	return;
}

void GLCD_Render()
{
     c18:	bf 92       	push	r11
     c1a:	cf 92       	push	r12
     c1c:	df 92       	push	r13
     c1e:	ef 92       	push	r14
     c20:	ff 92       	push	r15
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 e0       	ldi	r16, 0x00	; 0
     c2c:	10 e0       	ldi	r17, 0x00	; 0
	unsigned char x = 0, y = 0, side = 0;
	
	for(;y<64; y++)
	{
		GLCD_GOTO_XY(x,y);		
     c2e:	b1 2c       	mov	r11, r1
     c30:	c1 2c       	mov	r12, r1
		for(;x<16; x++)
		{
			if(y>63 && side == 0){GLCD_GOTO_XY(x,y); side=1;}
     c32:	ee 24       	eor	r14, r14
     c34:	e3 94       	inc	r14
     c36:	f0 2e       	mov	r15, r16
{
	unsigned char x = 0, y = 0, side = 0;
	
	for(;y<64; y++)
	{
		GLCD_GOTO_XY(x,y);		
     c38:	60 2f       	mov	r22, r16
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	0e 94 8d 04 	call	0x91a	; 0x91a <GLCD_GOTO_XY>
     c40:	cb 2d       	mov	r28, r11
     c42:	dc 2d       	mov	r29, r12
     c44:	d1 2c       	mov	r13, r1
     c46:	8c 2f       	mov	r24, r28
		for(;x<16; x++)
		{
			if(y>63 && side == 0){GLCD_GOTO_XY(x,y); side=1;}
     c48:	9f e3       	ldi	r25, 0x3F	; 63
     c4a:	9f 15       	cp	r25, r15
     c4c:	30 f4       	brcc	.+12     	; 0xc5a <GLCD_Render+0x42>
     c4e:	d1 10       	cpse	r13, r1
     c50:	04 c0       	rjmp	.+8      	; 0xc5a <GLCD_Render+0x42>
     c52:	6f 2d       	mov	r22, r15
     c54:	0e 94 8d 04 	call	0x91a	; 0x91a <GLCD_GOTO_XY>
     c58:	de 2c       	mov	r13, r14

			GLCD_Write(DATA,Buffer[x][y]);
     c5a:	fe 01       	movw	r30, r28
     c5c:	00 24       	eor	r0, r0
     c5e:	f6 95       	lsr	r31
     c60:	e7 95       	ror	r30
     c62:	07 94       	ror	r0
     c64:	f6 95       	lsr	r31
     c66:	e7 95       	ror	r30
     c68:	07 94       	ror	r0
     c6a:	fe 2f       	mov	r31, r30
     c6c:	e0 2d       	mov	r30, r0
     c6e:	e0 0f       	add	r30, r16
     c70:	f1 1f       	adc	r31, r17
     c72:	e3 59       	subi	r30, 0x93	; 147
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	60 81       	ld	r22, Z
     c78:	8e 2d       	mov	r24, r14
     c7a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <GLCD_Write>
     c7e:	21 96       	adiw	r28, 0x01	; 1
	unsigned char x = 0, y = 0, side = 0;
	
	for(;y<64; y++)
	{
		GLCD_GOTO_XY(x,y);		
		for(;x<16; x++)
     c80:	c0 31       	cpi	r28, 0x10	; 16
     c82:	d1 05       	cpc	r29, r1
     c84:	01 f7       	brne	.-64     	; 0xc46 <GLCD_Render+0x2e>
     c86:	0f 5f       	subi	r16, 0xFF	; 255
     c88:	1f 4f       	sbci	r17, 0xFF	; 255

void GLCD_Render()
{
	unsigned char x = 0, y = 0, side = 0;
	
	for(;y<64; y++)
     c8a:	00 34       	cpi	r16, 0x40	; 64
     c8c:	11 05       	cpc	r17, r1
     c8e:	99 f6       	brne	.-90     	; 0xc36 <GLCD_Render+0x1e>
			//GLCD_Write(DATA,Buffer[x+1][y]);
		}
		x=side = 0;
	}
	return;
}
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	08 95       	ret

00000ca4 <EEPROM_WriteByte>:

 * description: This function is used to write the data at specified EEPROM_address..
 **************************************************************************************************/
void EEPROM_WriteByte(uint16_t v_eepromAddress_u16, uint8_t v_eepromData_u8)
{
	while(util_IsBitSet(EECR,EEWE)); // Wait for completion of previous write.
     ca4:	e1 99       	sbic	0x1c, 1	; 28
     ca6:	fe cf       	rjmp	.-4      	; 0xca4 <EEPROM_WriteByte>
	                                 // EEWE will be cleared by hardware once Eeprom write is completed.

	EEAR = v_eepromAddress_u16;  //Load the eeprom address and data
     ca8:	9f bb       	out	0x1f, r25	; 31
     caa:	8e bb       	out	0x1e, r24	; 30
	EEDR = v_eepromData_u8;
     cac:	6d bb       	out	0x1d, r22	; 29

	util_BitSet(EECR,EEMWE);    // Eeprom Master Write Enable
     cae:	e2 9a       	sbi	0x1c, 2	; 28
	util_BitSet(EECR,EEWE);     // Start eeprom write by setting EEWE
     cb0:	e1 9a       	sbi	0x1c, 1	; 28
     cb2:	08 95       	ret

00000cb4 <EEPROM_WriteNBytes>:
 * description:
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	8c 01       	movw	r16, r24
     cc2:	7b 01       	movw	r14, r22
     cc4:	ea 01       	movw	r28, r20
	while(v_numOfBytes_u16 !=  0)
     cc6:	20 97       	sbiw	r28, 0x00	; 0
     cc8:	51 f0       	breq	.+20     	; 0xcde <EEPROM_WriteNBytes+0x2a>
	{
		EEPROM_WriteByte(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
     cca:	f7 01       	movw	r30, r14
     ccc:	61 91       	ld	r22, Z+
     cce:	7f 01       	movw	r14, r30
     cd0:	c8 01       	movw	r24, r16
     cd2:	0e 94 52 06 	call	0xca4	; 0xca4 <EEPROM_WriteByte>
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
     cd6:	0f 5f       	subi	r16, 0xFF	; 255
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
     cda:	21 97       	sbiw	r28, 0x01	; 1
            This function is used to write N-bytes of data at specified EEPROM_address.
 ***************************************************************************************************/
#if ( ENABLE_EEPROM_WriteNBytes == 1)
void EEPROM_WriteNBytes(uint16_t v_eepromAddress_u16, uint8_t *ptr_ramAddress_u8, uint16_t v_numOfBytes_u16)
{
	while(v_numOfBytes_u16 !=  0)
     cdc:	b1 f7       	brne	.-20     	; 0xcca <EEPROM_WriteNBytes+0x16>
		EEPROM_WriteByte(v_eepromAddress_u16,*ptr_ramAddress_u8); //Write a byte from RAM to EEPROM
		v_eepromAddress_u16++;					   //Increment the Eeprom Address
		ptr_ramAddress_u8++;						   //Increment the RAM Address
		v_numOfBytes_u16--;					   //Decrement NoOfBytes after writing each Byte
	}
}
     cde:	df 91       	pop	r29
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <I2CInit>:
void I2CReadAddress(unsigned char);

void I2CInit()
{
	//Set up TWI Module
	TWBR = 0x01;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	80 b9       	out	0x00, r24	; 0
	TWSR |=((1<<TWPS1)|(1<<TWPS0));
     cf0:	81 b1       	in	r24, 0x01	; 1
     cf2:	83 60       	ori	r24, 0x03	; 3
     cf4:	81 b9       	out	0x01, r24	; 1

	//Enable the TWI Module
	TWCR|=(1<<TWEN);
     cf6:	86 b7       	in	r24, 0x36	; 54
     cf8:	84 60       	ori	r24, 0x04	; 4
     cfa:	86 bf       	out	0x36, r24	; 54
     cfc:	08 95       	ret

00000cfe <I2CStart>:


void I2CStart()
{
	//Put Start Condition on Bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTA);
     cfe:	84 ea       	ldi	r24, 0xA4	; 164
     d00:	86 bf       	out	0x36, r24	; 54
	//Poll Till Done
	while(!(TWCR & (1<<TWINT))); // Wait till start condition is transmitted
     d02:	06 b6       	in	r0, 0x36	; 54
     d04:	07 fe       	sbrs	r0, 7
     d06:	fd cf       	rjmp	.-6      	; 0xd02 <I2CStart+0x4>
	//while((TWSR & 0xF8)!= 0x08); // Check for the acknowledgement
}
     d08:	08 95       	ret

00000d0a <I2CStop>:

void I2CStop()
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	
     d0a:	84 e9       	ldi	r24, 0x94	; 148
     d0c:	86 bf       	out	0x36, r24	; 54
	
	while(TWCR & (1<<TWSTO)); // Wait till stop condition is transmitted
     d0e:	06 b6       	in	r0, 0x36	; 54
     d10:	04 fc       	sbrc	r0, 4
     d12:	fd cf       	rjmp	.-6      	; 0xd0e <I2CStop+0x4>
}
     d14:	08 95       	ret

00000d16 <I2CWriteByte>:
}

uint8_t I2CWriteByte(uint8_t data)
{
	
	TWDR=data;
     d16:	83 b9       	out	0x03, r24	; 3

	//Initiate Transfer
	TWCR=(1<<TWEN)|(1<<TWINT);
     d18:	84 e8       	ldi	r24, 0x84	; 132
     d1a:	86 bf       	out	0x36, r24	; 54

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     d1c:	06 b6       	in	r0, 0x36	; 54
     d1e:	07 fe       	sbrs	r0, 7
     d20:	fd cf       	rjmp	.-6      	; 0xd1c <I2CWriteByte+0x6>

	//Check Status
	if((TWSR & 0xF8) == 0x18 || (TWSR & 0xF8) == 0x28 || (TWSR & 0xF8) == 0x40)
     d22:	81 b1       	in	r24, 0x01	; 1
     d24:	88 7f       	andi	r24, 0xF8	; 248
     d26:	88 31       	cpi	r24, 0x18	; 24
     d28:	59 f0       	breq	.+22     	; 0xd40 <I2CWriteByte+0x2a>
     d2a:	81 b1       	in	r24, 0x01	; 1
     d2c:	88 7f       	andi	r24, 0xF8	; 248
     d2e:	88 32       	cpi	r24, 0x28	; 40
     d30:	49 f0       	breq	.+18     	; 0xd44 <I2CWriteByte+0x2e>
     d32:	91 b1       	in	r25, 0x01	; 1
     d34:	98 7f       	andi	r25, 0xF8	; 248
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 34       	cpi	r25, 0x40	; 64
     d3a:	29 f0       	breq	.+10     	; 0xd46 <I2CWriteByte+0x30>
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	08 95       	ret
		//or
		//SLA+R Transmitted and ACK received
		//or
		//DATA Transmitted and ACK recived

		return 1;
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	08 95       	ret
     d44:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	return 0;	//Error
}
     d46:	08 95       	ret

00000d48 <I2CReadByte>:

uint8_t I2CReadByte(uint8_t *data,uint8_t ack)
{
     d48:	fc 01       	movw	r30, r24
	//Set up ACK
	if(ack)
     d4a:	66 23       	and	r22, r22
     d4c:	21 f0       	breq	.+8      	; 0xd56 <I2CReadByte+0xe>
	{
		//return ACK after reception
		TWCR|=(1<<TWEA);
     d4e:	96 b7       	in	r25, 0x36	; 54
     d50:	90 64       	ori	r25, 0x40	; 64
     d52:	96 bf       	out	0x36, r25	; 54
     d54:	03 c0       	rjmp	.+6      	; 0xd5c <I2CReadByte+0x14>
	else
	{
		//return NACK after reception
		//Signals slave to stop giving more data
		//usually used for last byte read.
		TWCR&=(~(1<<TWEA));
     d56:	96 b7       	in	r25, 0x36	; 54
     d58:	9f 7b       	andi	r25, 0xBF	; 191
     d5a:	96 bf       	out	0x36, r25	; 54
	}

	//Now enable Reception of data by clearing TWINT
	TWCR|=(1<<TWINT);
     d5c:	96 b7       	in	r25, 0x36	; 54
     d5e:	90 68       	ori	r25, 0x80	; 128
     d60:	96 bf       	out	0x36, r25	; 54

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     d62:	06 b6       	in	r0, 0x36	; 54
     d64:	07 fe       	sbrs	r0, 7
     d66:	fd cf       	rjmp	.-6      	; 0xd62 <I2CReadByte+0x1a>

	//Check status
	if((TWSR & 0xF8) == 0x58 || (TWSR & 0xF8) == 0x50)
     d68:	91 b1       	in	r25, 0x01	; 1
     d6a:	98 7f       	andi	r25, 0xF8	; 248
     d6c:	98 35       	cpi	r25, 0x58	; 88
     d6e:	21 f0       	breq	.+8      	; 0xd78 <I2CReadByte+0x30>
     d70:	91 b1       	in	r25, 0x01	; 1
     d72:	98 7f       	andi	r25, 0xF8	; 248
     d74:	90 35       	cpi	r25, 0x50	; 80
     d76:	21 f4       	brne	.+8      	; 0xd80 <I2CReadByte+0x38>
		//	or
		//Data received and NACK returned

		//Read the data

		*data=TWDR;
     d78:	83 b1       	in	r24, 0x03	; 3
     d7a:	80 83       	st	Z, r24
		return 1;
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	08 95       	ret
	}
	else
	return 0;	//Error
     d80:	80 e0       	ldi	r24, 0x00	; 0
	
}
     d82:	08 95       	ret

00000d84 <SPI_Init>:
#define SS_Enable PORTB &= ~(1<<SS)			/* Define Slave enable */
#define SS_Disable PORTB |= (1<<SS)			/* Define Slave disable */

void SPI_Init()									/* SPI Initialize function */
{
	DDRB |= ((1<<MOSI)|(1<<SCK)|(1<<SS));		/* Make MOSI, SCK, SS pin direction as output pins */
     d84:	87 b3       	in	r24, 0x17	; 23
     d86:	80 6b       	ori	r24, 0xB0	; 176
     d88:	87 bb       	out	0x17, r24	; 23
	DDRB &=~(1<<MISO);							/* Make MISO pin as INPUT pin */
     d8a:	be 98       	cbi	0x17, 6	; 23
	PORTB |=(1<<SS);						    /* Disable slave initially by making high on SS pin */
     d8c:	c4 9a       	sbi	0x18, 4	; 24
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);		/* Enable SPI in slave mode, Master mode, with Fosc/16 SCK frequency */
     d8e:	81 e5       	ldi	r24, 0x51	; 81
     d90:	8d b9       	out	0x0d, r24	; 13
     d92:	08 95       	ret

00000d94 <SPI_Transmit>:
	//SPSR |=(1<<SPI2X); // Enable speed doubler
}
void SPI_Transmit(char data)					/* SPI transmit data function */
{
	SPDR = data;								/* Write data to SPI data register */
     d94:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));					/* Wait till transmission complete */								/* return received data */
     d96:	77 9b       	sbis	0x0e, 7	; 14
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <SPI_Transmit+0x2>
}
     d9a:	08 95       	ret

00000d9c <SPI_Receive>:

char SPI_Receive()								/* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));					/* Wait till reception complete */
     d9c:	77 9b       	sbis	0x0e, 7	; 14
     d9e:	fe cf       	rjmp	.-4      	; 0xd9c <SPI_Receive>
	return(SPDR);								/* return received data */
     da0:	8f b1       	in	r24, 0x0f	; 15
}
     da2:	08 95       	ret

00000da4 <transmitAndWait>:

char transmitAndWait(char data)
{
	SS_Enable;
     da4:	c4 98       	cbi	0x18, 4	; 24
	char a;
	SPI_Transmit(data);
     da6:	0e 94 ca 06 	call	0xd94	; 0xd94 <SPI_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     daa:	8a e6       	ldi	r24, 0x6A	; 106
     dac:	8a 95       	dec	r24
     dae:	f1 f7       	brne	.-4      	; 0xdac <transmitAndWait+0x8>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <transmitAndWait+0xe>
	_delay_us(20);
	a=SPI_Receive();
     db2:	0e 94 ce 06 	call	0xd9c	; 0xd9c <SPI_Receive>
	SS_Disable;
     db6:	c4 9a       	sbi	0x18, 4	; 24
	return a;	
}
     db8:	08 95       	ret

00000dba <keypad_init>:
void keypad_init (void);


void keypad_init (void)
{
	KEYPAD_DIR = 0x0f;  //Initialize Keypad Port
     dba:	8f e0       	ldi	r24, 0x0F	; 15
     dbc:	8a bb       	out	0x1a, r24	; 26
	KEYPAD_PORT = 0xff;
     dbe:	8f ef       	ldi	r24, 0xFF	; 255
     dc0:	8b bb       	out	0x1b, r24	; 27
     dc2:	08 95       	ret

00000dc4 <read_keypad>:
}
char read_keypad(void)
{
	unsigned char keypad_input=0xff,keypad_output=' ';
	KEYPAD_PORT=0xfe;
     dc4:	8e ef       	ldi	r24, 0xFE	; 254
     dc6:	8b bb       	out	0x1b, r24	; 27
     dc8:	8a e0       	ldi	r24, 0x0A	; 10
     dca:	8a 95       	dec	r24
     dcc:	f1 f7       	brne	.-4      	; 0xdca <read_keypad+0x6>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <read_keypad+0xc>
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
     dd0:	89 b3       	in	r24, 0x19	; 25
     dd2:	80 7f       	andi	r24, 0xF0	; 240

	if(keypad_input==0xe0)
     dd4:	80 3e       	cpi	r24, 0xE0	; 224
     dd6:	41 f0       	breq	.+16     	; 0xde8 <read_keypad+0x24>
	keypad_output = '1';
	else if(keypad_input==0xd0)
     dd8:	80 3d       	cpi	r24, 0xD0	; 208
     dda:	41 f0       	breq	.+16     	; 0xdec <read_keypad+0x28>
	keypad_output= '2';
	else if(keypad_input==0xb0)
     ddc:	80 3b       	cpi	r24, 0xB0	; 176
     dde:	41 f0       	breq	.+16     	; 0xdf0 <read_keypad+0x2c>
	keypad_output= '3';
	else if(keypad_input==0x70)
     de0:	80 37       	cpi	r24, 0x70	; 112
     de2:	41 f4       	brne	.+16     	; 0xdf4 <read_keypad+0x30>
	keypad_output= 'A';
     de4:	81 e4       	ldi	r24, 0x41	; 65
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <read_keypad+0x32>
	KEYPAD_PORT=0xfe;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
	keypad_output = '1';
     de8:	81 e3       	ldi	r24, 0x31	; 49
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <read_keypad+0x32>
	else if(keypad_input==0xd0)
	keypad_output= '2';
     dec:	82 e3       	ldi	r24, 0x32	; 50
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <read_keypad+0x32>
	else if(keypad_input==0xb0)
	keypad_output= '3';
     df0:	83 e3       	ldi	r24, 0x33	; 51
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <read_keypad+0x32>
	KEYPAD_DIR = 0x0f;  //Initialize Keypad Port
	KEYPAD_PORT = 0xff;
}
char read_keypad(void)
{
	unsigned char keypad_input=0xff,keypad_output=' ';
     df4:	80 e2       	ldi	r24, 0x20	; 32
	else if(keypad_input==0x70)
	keypad_output= 'A';
	else
	;

	KEYPAD_PORT=0xfd;
     df6:	9d ef       	ldi	r25, 0xFD	; 253
     df8:	9b bb       	out	0x1b, r25	; 27
     dfa:	9a e0       	ldi	r25, 0x0A	; 10
     dfc:	9a 95       	dec	r25
     dfe:	f1 f7       	brne	.-4      	; 0xdfc <read_keypad+0x38>
     e00:	00 c0       	rjmp	.+0      	; 0xe02 <read_keypad+0x3e>
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
     e02:	99 b3       	in	r25, 0x19	; 25
     e04:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
     e06:	90 3e       	cpi	r25, 0xE0	; 224
     e08:	41 f0       	breq	.+16     	; 0xe1a <read_keypad+0x56>
	keypad_output= '4';
	else if(keypad_input==0xd0)
     e0a:	90 3d       	cpi	r25, 0xD0	; 208
     e0c:	41 f0       	breq	.+16     	; 0xe1e <read_keypad+0x5a>
	keypad_output= '5';
	else if(keypad_input==0xb0)
     e0e:	90 3b       	cpi	r25, 0xB0	; 176
     e10:	41 f0       	breq	.+16     	; 0xe22 <read_keypad+0x5e>
	keypad_output= '6';
	else if(keypad_input==0x70)
     e12:	90 37       	cpi	r25, 0x70	; 112
     e14:	39 f4       	brne	.+14     	; 0xe24 <read_keypad+0x60>
	keypad_output= 'B';
     e16:	82 e4       	ldi	r24, 0x42	; 66
     e18:	05 c0       	rjmp	.+10     	; 0xe24 <read_keypad+0x60>
	KEYPAD_PORT=0xfd;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
	keypad_output= '4';
     e1a:	84 e3       	ldi	r24, 0x34	; 52
     e1c:	03 c0       	rjmp	.+6      	; 0xe24 <read_keypad+0x60>
	else if(keypad_input==0xd0)
	keypad_output= '5';
     e1e:	85 e3       	ldi	r24, 0x35	; 53
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <read_keypad+0x60>
	else if(keypad_input==0xb0)
	keypad_output= '6';
     e22:	86 e3       	ldi	r24, 0x36	; 54
	else if(keypad_input==0x70)
	keypad_output= 'B';
	else
	;

	KEYPAD_PORT=0xfb;
     e24:	9b ef       	ldi	r25, 0xFB	; 251
     e26:	9b bb       	out	0x1b, r25	; 27
     e28:	9a e0       	ldi	r25, 0x0A	; 10
     e2a:	9a 95       	dec	r25
     e2c:	f1 f7       	brne	.-4      	; 0xe2a <read_keypad+0x66>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <read_keypad+0x6c>
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
     e30:	99 b3       	in	r25, 0x19	; 25
     e32:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
     e34:	90 3e       	cpi	r25, 0xE0	; 224
     e36:	41 f0       	breq	.+16     	; 0xe48 <read_keypad+0x84>
	keypad_output= '7';
	else if(keypad_input==0xd0)
     e38:	90 3d       	cpi	r25, 0xD0	; 208
     e3a:	41 f0       	breq	.+16     	; 0xe4c <read_keypad+0x88>
	keypad_output= '8';
	else if(keypad_input==0xb0)
     e3c:	90 3b       	cpi	r25, 0xB0	; 176
     e3e:	41 f0       	breq	.+16     	; 0xe50 <read_keypad+0x8c>
	keypad_output= '9';
	else if(keypad_input==0x70)
     e40:	90 37       	cpi	r25, 0x70	; 112
     e42:	39 f4       	brne	.+14     	; 0xe52 <read_keypad+0x8e>
	keypad_output= 'C';
     e44:	83 e4       	ldi	r24, 0x43	; 67
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <read_keypad+0x8e>
	KEYPAD_PORT=0xfb;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
	keypad_output= '7';
     e48:	87 e3       	ldi	r24, 0x37	; 55
     e4a:	03 c0       	rjmp	.+6      	; 0xe52 <read_keypad+0x8e>
	else if(keypad_input==0xd0)
	keypad_output= '8';
     e4c:	88 e3       	ldi	r24, 0x38	; 56
     e4e:	01 c0       	rjmp	.+2      	; 0xe52 <read_keypad+0x8e>
	else if(keypad_input==0xb0)
	keypad_output= '9';
     e50:	89 e3       	ldi	r24, 0x39	; 57
	else if(keypad_input==0x70)
	keypad_output= 'C';
	else
	;
	
	KEYPAD_PORT=0xf7;
     e52:	97 ef       	ldi	r25, 0xF7	; 247
     e54:	9b bb       	out	0x1b, r25	; 27
     e56:	9a e0       	ldi	r25, 0x0A	; 10
     e58:	9a 95       	dec	r25
     e5a:	f1 f7       	brne	.-4      	; 0xe58 <read_keypad+0x94>
     e5c:	00 c0       	rjmp	.+0      	; 0xe5e <read_keypad+0x9a>
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;
     e5e:	99 b3       	in	r25, 0x19	; 25
     e60:	90 7f       	andi	r25, 0xF0	; 240

	if(keypad_input==0xe0)
     e62:	90 3e       	cpi	r25, 0xE0	; 224
     e64:	41 f0       	breq	.+16     	; 0xe76 <read_keypad+0xb2>
	keypad_output= '*';
	else if(keypad_input==0xd0)
     e66:	90 3d       	cpi	r25, 0xD0	; 208
     e68:	41 f0       	breq	.+16     	; 0xe7a <read_keypad+0xb6>
	keypad_output= '0';
	else if(keypad_input==0xb0)
     e6a:	90 3b       	cpi	r25, 0xB0	; 176
     e6c:	41 f0       	breq	.+16     	; 0xe7e <read_keypad+0xba>
	keypad_output= '#';
	else if(keypad_input==0x70)
     e6e:	90 37       	cpi	r25, 0x70	; 112
     e70:	39 f4       	brne	.+14     	; 0xe80 <read_keypad+0xbc>
	keypad_output='D';
     e72:	84 e4       	ldi	r24, 0x44	; 68
     e74:	08 95       	ret
	KEYPAD_PORT=0xf7;
	_delay_us(2);
	keypad_input=KEYPAD_PIN & 0xf0;

	if(keypad_input==0xe0)
	keypad_output= '*';
     e76:	8a e2       	ldi	r24, 0x2A	; 42
     e78:	08 95       	ret
	else if(keypad_input==0xd0)
	keypad_output= '0';
     e7a:	80 e3       	ldi	r24, 0x30	; 48
     e7c:	08 95       	ret
	else if(keypad_input==0xb0)
	keypad_output= '#';
     e7e:	83 e2       	ldi	r24, 0x23	; 35
	else if(keypad_input==0x70)
	keypad_output='D';
	else
	;
	return keypad_output;
}
     e80:	08 95       	ret

00000e82 <switcher>:
#define SWITCHER_H_

void switcher(unsigned char ON_OFF, uint8_t switcher);

void switcher(unsigned char ON_OFF, uint8_t switcher)
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	1f 92       	push	r1
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	89 83       	std	Y+1, r24	; 0x01
	switch (switcher)
     e8e:	6e 30       	cpi	r22, 0x0E	; 14
     e90:	09 f1       	breq	.+66     	; 0xed4 <switcher+0x52>
     e92:	18 f4       	brcc	.+6      	; 0xe9a <switcher+0x18>
     e94:	6d 30       	cpi	r22, 0x0D	; 13
     e96:	39 f0       	breq	.+14     	; 0xea6 <switcher+0x24>
     e98:	61 c0       	rjmp	.+194    	; 0xf5c <switcher+0xda>
     e9a:	6f 30       	cpi	r22, 0x0F	; 15
     e9c:	91 f1       	breq	.+100    	; 0xf02 <switcher+0x80>
     e9e:	60 31       	cpi	r22, 0x10	; 16
     ea0:	09 f4       	brne	.+2      	; 0xea4 <switcher+0x22>
     ea2:	46 c0       	rjmp	.+140    	; 0xf30 <switcher+0xae>
     ea4:	5b c0       	rjmp	.+182    	; 0xf5c <switcher+0xda>
	{
		case SWITCHER_1: switch1 = ON_OFF; EEPROM_WriteNBytes(switch1_addr,(uint8_t *)&ON_OFF,1);
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
     ea8:	80 93 59 01 	sts	0x0159, r24
     eac:	41 e0       	ldi	r20, 0x01	; 1
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	be 01       	movw	r22, r28
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
			if (ON_OFF==ON){ transmitAndWait(switch1_ON);}else{transmitAndWait(switch1_OFF);} break;
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	21 f4       	brne	.+8      	; 0xecc <switcher+0x4a>
     ec4:	81 e6       	ldi	r24, 0x61	; 97
     ec6:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     eca:	48 c0       	rjmp	.+144    	; 0xf5c <switcher+0xda>
     ecc:	82 e6       	ldi	r24, 0x62	; 98
     ece:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     ed2:	44 c0       	rjmp	.+136    	; 0xf5c <switcher+0xda>
		case SWITCHER_2: switch2 = ON_OFF; EEPROM_WriteNBytes(switch2_addr,(uint8_t *)&ON_OFF,1);
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	80 93 58 01 	sts	0x0158, r24
     eda:	41 e0       	ldi	r20, 0x01	; 1
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	be 01       	movw	r22, r28
     ee0:	6f 5f       	subi	r22, 0xFF	; 255
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
			if (ON_OFF==ON){ transmitAndWait(switch2_ON);}else{transmitAndWait(switch2_OFF);} break;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	21 f4       	brne	.+8      	; 0xefa <switcher+0x78>
     ef2:	83 e6       	ldi	r24, 0x63	; 99
     ef4:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     ef8:	31 c0       	rjmp	.+98     	; 0xf5c <switcher+0xda>
     efa:	84 e6       	ldi	r24, 0x64	; 100
     efc:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     f00:	2d c0       	rjmp	.+90     	; 0xf5c <switcher+0xda>
		case SWITCHER_3: switch3 = ON_OFF; EEPROM_WriteNBytes(switch3_addr,(uint8_t *)&ON_OFF,1); 
     f02:	89 81       	ldd	r24, Y+1	; 0x01
     f04:	80 93 57 01 	sts	0x0157, r24
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	50 e0       	ldi	r21, 0x00	; 0
     f0c:	be 01       	movw	r22, r28
     f0e:	6f 5f       	subi	r22, 0xFF	; 255
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
			if (ON_OFF==ON){ transmitAndWait(switch3_ON);}else{transmitAndWait(switch3_OFF);} break;
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	81 30       	cpi	r24, 0x01	; 1
     f1e:	21 f4       	brne	.+8      	; 0xf28 <switcher+0xa6>
     f20:	85 e6       	ldi	r24, 0x65	; 101
     f22:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     f26:	1a c0       	rjmp	.+52     	; 0xf5c <switcher+0xda>
     f28:	86 e6       	ldi	r24, 0x66	; 102
     f2a:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <switcher+0xda>
		case SWITCHER_4: switch4 = ON_OFF; EEPROM_WriteNBytes(switch4_addr,(uint8_t *)&ON_OFF,1); 
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	80 93 56 01 	sts	0x0156, r24
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5f       	subi	r22, 0xFF	; 255
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	83 e0       	ldi	r24, 0x03	; 3
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
			if (ON_OFF==ON){ transmitAndWait(switch4_ON);}else{transmitAndWait(switch4_OFF);} break;
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	21 f4       	brne	.+8      	; 0xf56 <switcher+0xd4>
     f4e:	87 e6       	ldi	r24, 0x67	; 103
     f50:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <switcher+0xda>
     f56:	88 e6       	ldi	r24, 0x68	; 104
     f58:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>
		default: break;
	}
}
     f5c:	0f 90       	pop	r0
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	08 95       	ret

00000f64 <timer_init>:
char *ftoa(char *buffer, double d, int precision);

	
void timer_init()
{
	cli();
     f64:	f8 94       	cli
	
	TCCR1B |= (1<<CS11)|(1<<WGM12);
     f66:	8e b5       	in	r24, 0x2e	; 46
     f68:	8a 60       	ori	r24, 0x0A	; 10
     f6a:	8e bd       	out	0x2e, r24	; 46
	TIMSK |=(1<<OCIE1A);
     f6c:	89 b7       	in	r24, 0x39	; 57
     f6e:	80 61       	ori	r24, 0x10	; 16
     f70:	89 bf       	out	0x39, r24	; 57
	OCR1A = CTC_MATCH_OVERFLOW;//1200;
     f72:	80 ed       	ldi	r24, 0xD0	; 208
     f74:	97 e0       	ldi	r25, 0x07	; 7
     f76:	9b bd       	out	0x2b, r25	; 43
     f78:	8a bd       	out	0x2a, r24	; 42
	TCNT1 = 0;	
     f7a:	1d bc       	out	0x2d, r1	; 45
     f7c:	1c bc       	out	0x2c, r1	; 44
	
	//External Interrupt
	GICR |=1<<INT0; //Enable External Interrupt INT0
     f7e:	8b b7       	in	r24, 0x3b	; 59
     f80:	80 64       	ori	r24, 0x40	; 64
     f82:	8b bf       	out	0x3b, r24	; 59
	MCUCR |=1<<ISC01; //Falling edge on INT0 triggers interrupt.
     f84:	85 b7       	in	r24, 0x35	; 53
     f86:	82 60       	ori	r24, 0x02	; 2
     f88:	85 bf       	out	0x35, r24	; 53
	
	sei();
     f8a:	78 94       	sei
     f8c:	08 95       	ret

00000f8e <draw_splash>:
	return;
}

void draw_splash()
{
	GLCD_ScreenGraphics(splash);
     f8e:	81 e7       	ldi	r24, 0x71	; 113
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 59 04 	call	0x8b2	; 0x8b2 <GLCD_ScreenGraphics>
	GLCD_Draw_String(4,55,"Tech 2017",BLACK);
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	45 e6       	ldi	r20, 0x65	; 101
     f9a:	50 e0       	ldi	r21, 0x00	; 0
     f9c:	67 e3       	ldi	r22, 0x37	; 55
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
	state = MENU;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	80 93 5a 01 	sts	0x015A, r24
     faa:	08 95       	ret

00000fac <draw_pointer>:
		}		
	}
}
void draw_pointer(unsigned char draw)
{
	if (timer1_millis > 3100)
     fac:	40 91 69 01 	lds	r20, 0x0169
     fb0:	50 91 6a 01 	lds	r21, 0x016A
     fb4:	60 91 6b 01 	lds	r22, 0x016B
     fb8:	70 91 6c 01 	lds	r23, 0x016C
     fbc:	4d 31       	cpi	r20, 0x1D	; 29
     fbe:	5c 40       	sbci	r21, 0x0C	; 12
     fc0:	61 05       	cpc	r22, r1
     fc2:	71 05       	cpc	r23, r1
     fc4:	28 f1       	brcs	.+74     	; 0x1010 <draw_pointer+0x64>
	{
		if(draw == TRUE){GLCD_Draw_Char(1 ,(pointer*10)+10,'>',BLACK);}
     fc6:	8f 3f       	cpi	r24, 0xFF	; 255
     fc8:	89 f4       	brne	.+34     	; 0xfec <draw_pointer+0x40>
     fca:	60 91 5b 01 	lds	r22, 0x015B
     fce:	70 91 5c 01 	lds	r23, 0x015C
     fd2:	6f 5f       	subi	r22, 0xFF	; 255
     fd4:	7f 4f       	sbci	r23, 0xFF	; 255
     fd6:	66 0f       	add	r22, r22
     fd8:	86 2f       	mov	r24, r22
     fda:	88 0f       	add	r24, r24
     fdc:	88 0f       	add	r24, r24
     fde:	68 0f       	add	r22, r24
     fe0:	2f ef       	ldi	r18, 0xFF	; 255
     fe2:	4e e3       	ldi	r20, 0x3E	; 62
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
     fea:	08 95       	ret
		else if(draw == FALSE){GLCD_Draw_Char(1,(pointer*10)+10,' ',BLACK);}
     fec:	81 11       	cpse	r24, r1
     fee:	10 c0       	rjmp	.+32     	; 0x1010 <draw_pointer+0x64>
     ff0:	60 91 5b 01 	lds	r22, 0x015B
     ff4:	70 91 5c 01 	lds	r23, 0x015C
     ff8:	6f 5f       	subi	r22, 0xFF	; 255
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	66 0f       	add	r22, r22
     ffe:	86 2f       	mov	r24, r22
    1000:	88 0f       	add	r24, r24
    1002:	88 0f       	add	r24, r24
    1004:	68 0f       	add	r22, r24
    1006:	2f ef       	ldi	r18, 0xFF	; 255
    1008:	40 e2       	ldi	r20, 0x20	; 32
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
    1010:	08 95       	ret

00001012 <draw_switch>:
	}
	return;
}

void draw_switch(uint8_t switchNo)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	08 2f       	mov	r16, r24
	GLCD_Draw_String(4,25,"ON",WHITE);
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	4f e6       	ldi	r20, 0x6F	; 111
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	69 e1       	ldi	r22, 0x19	; 25
    1024:	84 e0       	ldi	r24, 0x04	; 4
    1026:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
	GLCD_Draw_String(9,25,"OFF",WHITE);
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	42 e7       	ldi	r20, 0x72	; 114
    102e:	50 e0       	ldi	r21, 0x00	; 0
    1030:	69 e1       	ldi	r22, 0x19	; 25
    1032:	89 e0       	ldi	r24, 0x09	; 9
    1034:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
    1038:	d2 e3       	ldi	r29, 0x32	; 50
	}
	return;
}

void draw_switch(uint8_t switchNo)
{
    103a:	19 e1       	ldi	r17, 0x19	; 25
    103c:	0b c0       	rjmp	.+22     	; 0x1054 <draw_switch+0x42>
	GLCD_Draw_String(4,25,"ON",WHITE);
	GLCD_Draw_String(9,25,"OFF",WHITE);
	for (int w=50;w<70;w++)
	{
		for (int h=25; h<35;h++)
		{GLCD_Draw_Pixel(w,h,WHITE);}
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	6c 2f       	mov	r22, r28
    1042:	8d 2f       	mov	r24, r29
    1044:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
    1048:	cf 5f       	subi	r28, 0xFF	; 255
{
	GLCD_Draw_String(4,25,"ON",WHITE);
	GLCD_Draw_String(9,25,"OFF",WHITE);
	for (int w=50;w<70;w++)
	{
		for (int h=25; h<35;h++)
    104a:	c3 32       	cpi	r28, 0x23	; 35
    104c:	c1 f7       	brne	.-16     	; 0x103e <draw_switch+0x2c>
    104e:	df 5f       	subi	r29, 0xFF	; 255

void draw_switch(uint8_t switchNo)
{
	GLCD_Draw_String(4,25,"ON",WHITE);
	GLCD_Draw_String(9,25,"OFF",WHITE);
	for (int w=50;w<70;w++)
    1050:	d6 34       	cpi	r29, 0x46	; 70
    1052:	11 f0       	breq	.+4      	; 0x1058 <draw_switch+0x46>
	}
	return;
}

void draw_switch(uint8_t switchNo)
{
    1054:	c1 2f       	mov	r28, r17
    1056:	f3 cf       	rjmp	.-26     	; 0x103e <draw_switch+0x2c>
	for (int w=50;w<70;w++)
	{
		for (int h=25; h<35;h++)
		{GLCD_Draw_Pixel(w,h,WHITE);}
	}
	if (switchNo == ON)
    1058:	01 30       	cpi	r16, 0x01	; 1
    105a:	79 f0       	breq	.+30     	; 0x107a <draw_switch+0x68>
    105c:	dc e3       	ldi	r29, 0x3C	; 60
    105e:	1a e1       	ldi	r17, 0x1A	; 26
    1060:	22 c0       	rjmp	.+68     	; 0x10a6 <draw_switch+0x94>
	{
		for (int w=51;w<60;w++)
		{
			for (int h=26; h<34;h++)
			{GLCD_Draw_Pixel(w,h,BLACK);}
    1062:	4f ef       	ldi	r20, 0xFF	; 255
    1064:	6c 2f       	mov	r22, r28
    1066:	8d 2f       	mov	r24, r29
    1068:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
    106c:	cf 5f       	subi	r28, 0xFF	; 255
	}
	if (switchNo == ON)
	{
		for (int w=51;w<60;w++)
		{
			for (int h=26; h<34;h++)
    106e:	c2 32       	cpi	r28, 0x22	; 34
    1070:	c1 f7       	brne	.-16     	; 0x1062 <draw_switch+0x50>
    1072:	df 5f       	subi	r29, 0xFF	; 255
		for (int h=25; h<35;h++)
		{GLCD_Draw_Pixel(w,h,WHITE);}
	}
	if (switchNo == ON)
	{
		for (int w=51;w<60;w++)
    1074:	dc 33       	cpi	r29, 0x3C	; 60
    1076:	19 f4       	brne	.+6      	; 0x107e <draw_switch+0x6c>
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <draw_switch+0x70>
    107a:	d3 e3       	ldi	r29, 0x33	; 51
}

void draw_switch(uint8_t switchNo)
{
	GLCD_Draw_String(4,25,"ON",WHITE);
	GLCD_Draw_String(9,25,"OFF",WHITE);
    107c:	1a e1       	ldi	r17, 0x1A	; 26
    107e:	c1 2f       	mov	r28, r17
    1080:	f0 cf       	rjmp	.-32     	; 0x1062 <draw_switch+0x50>
		for (int w=51;w<60;w++)
		{
			for (int h=26; h<34;h++)
			{GLCD_Draw_Pixel(w,h,BLACK);}
		}
		GLCD_Draw_Char(8,38,'>',WHITE);
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	4e e3       	ldi	r20, 0x3E	; 62
    1086:	66 e2       	ldi	r22, 0x26	; 38
    1088:	88 e0       	ldi	r24, 0x08	; 8
    108a:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
    108e:	13 c0       	rjmp	.+38     	; 0x10b6 <draw_switch+0xa4>
	else
	{
		for (int w=60;w<69;w++)
		{
			for (int h=26; h<34;h++)
			{GLCD_Draw_Pixel(w,h,BLACK);}
    1090:	4f ef       	ldi	r20, 0xFF	; 255
    1092:	6c 2f       	mov	r22, r28
    1094:	8d 2f       	mov	r24, r29
    1096:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
    109a:	cf 5f       	subi	r28, 0xFF	; 255
	} 
	else
	{
		for (int w=60;w<69;w++)
		{
			for (int h=26; h<34;h++)
    109c:	c2 32       	cpi	r28, 0x22	; 34
    109e:	c1 f7       	brne	.-16     	; 0x1090 <draw_switch+0x7e>
    10a0:	df 5f       	subi	r29, 0xFF	; 255
		}
		GLCD_Draw_Char(8,38,'>',WHITE);
	} 
	else
	{
		for (int w=60;w<69;w++)
    10a2:	d5 34       	cpi	r29, 0x45	; 69
    10a4:	11 f0       	breq	.+4      	; 0x10aa <draw_switch+0x98>
    10a6:	c1 2f       	mov	r28, r17
    10a8:	f3 cf       	rjmp	.-26     	; 0x1090 <draw_switch+0x7e>
		{
			for (int h=26; h<34;h++)
			{GLCD_Draw_Pixel(w,h,BLACK);}
		}
		GLCD_Draw_Char(7,38,'<',WHITE);
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	4c e3       	ldi	r20, 0x3C	; 60
    10ae:	66 e2       	ldi	r22, 0x26	; 38
    10b0:	87 e0       	ldi	r24, 0x07	; 7
    10b2:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
	}
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	08 95       	ret

000010c0 <draw_cursor>:

void draw_cursor(unsigned char x,unsigned char y, unsigned char color)
{
    10c0:	24 2f       	mov	r18, r20
	GLCD_Draw_HorizLine(x,x+5,y,color);
    10c2:	95 e0       	ldi	r25, 0x05	; 5
    10c4:	98 0f       	add	r25, r24
    10c6:	46 2f       	mov	r20, r22
    10c8:	69 2f       	mov	r22, r25
    10ca:	0e 94 da 05 	call	0xbb4	; 0xbb4 <GLCD_Draw_HorizLine>
    10ce:	08 95       	ret

000010d0 <draw_frame>:
}

void draw_frame()
{
		GLCD_ClearBuffer(WHITE);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	0e 94 50 05 	call	0xaa0	; 0xaa0 <GLCD_ClearBuffer>
		GLCD_Draw_HorizLine(0,128,0,BLACK);
    10d6:	2f ef       	ldi	r18, 0xFF	; 255
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	60 e8       	ldi	r22, 0x80	; 128
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	0e 94 da 05 	call	0xbb4	; 0xbb4 <GLCD_Draw_HorizLine>
		GLCD_Draw_HorizLine(0,128,63,BLACK);
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	4f e3       	ldi	r20, 0x3F	; 63
    10e6:	60 e8       	ldi	r22, 0x80	; 128
    10e8:	80 e0       	ldi	r24, 0x00	; 0
    10ea:	0e 94 da 05 	call	0xbb4	; 0xbb4 <GLCD_Draw_HorizLine>
		GLCD_Draw_VertcLine(0,0,64,BLACK);
    10ee:	2f ef       	ldi	r18, 0xFF	; 255
    10f0:	40 e4       	ldi	r20, 0x40	; 64
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GLCD_Draw_VertcLine>
		GLCD_Draw_VertcLine(127,0,64,BLACK);
    10fa:	2f ef       	ldi	r18, 0xFF	; 255
    10fc:	40 e4       	ldi	r20, 0x40	; 64
    10fe:	60 e0       	ldi	r22, 0x00	; 0
    1100:	8f e7       	ldi	r24, 0x7F	; 127
    1102:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <GLCD_Draw_VertcLine>
		GLCD_Clear_Row(1,BLACK);
    1106:	6f ef       	ldi	r22, 0xFF	; 255
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	0e 94 85 05 	call	0xb0a	; 0xb0a <GLCD_Clear_Row>
    110e:	08 95       	ret

00001110 <keypress>:
}

void keypress()
{
	switch(state)
    1110:	80 91 5a 01 	lds	r24, 0x015A
    1114:	82 30       	cpi	r24, 0x02	; 2
    1116:	09 f4       	brne	.+2      	; 0x111a <keypress+0xa>
    1118:	81 c0       	rjmp	.+258    	; 0x121c <keypress+0x10c>
    111a:	18 f4       	brcc	.+6      	; 0x1122 <keypress+0x12>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	41 f0       	breq	.+16     	; 0x1130 <keypress+0x20>
    1120:	5f c1       	rjmp	.+702    	; 0x13e0 <keypress+0x2d0>
    1122:	83 30       	cpi	r24, 0x03	; 3
    1124:	09 f4       	brne	.+2      	; 0x1128 <keypress+0x18>
    1126:	eb c0       	rjmp	.+470    	; 0x12fe <keypress+0x1ee>
    1128:	84 30       	cpi	r24, 0x04	; 4
    112a:	09 f4       	brne	.+2      	; 0x112e <keypress+0x1e>
    112c:	52 c1       	rjmp	.+676    	; 0x13d2 <keypress+0x2c2>
    112e:	58 c1       	rjmp	.+688    	; 0x13e0 <keypress+0x2d0>
	{
		case MENU:
			draw_pointer(TRUE);
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
			if (keys[0] == KEY_DOWN)
    1136:	80 91 61 00 	lds	r24, 0x0061
    113a:	82 34       	cpi	r24, 0x42	; 66
    113c:	e1 f4       	brne	.+56     	; 0x1176 <keypress+0x66>
			{
				if(pointer >= menuend){ pointer = menuend;}
    113e:	80 91 60 00 	lds	r24, 0x0060
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	20 91 5b 01 	lds	r18, 0x015B
    1148:	30 91 5c 01 	lds	r19, 0x015C
    114c:	28 17       	cp	r18, r24
    114e:	39 07       	cpc	r19, r25
    1150:	28 f0       	brcs	.+10     	; 0x115c <keypress+0x4c>
    1152:	90 93 5c 01 	sts	0x015C, r25
    1156:	80 93 5b 01 	sts	0x015B, r24
    115a:	09 c0       	rjmp	.+18     	; 0x116e <keypress+0x5e>
				else{pointer++;}
    115c:	80 91 5b 01 	lds	r24, 0x015B
    1160:	90 91 5c 01 	lds	r25, 0x015C
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	90 93 5c 01 	sts	0x015C, r25
    116a:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    1174:	35 c1       	rjmp	.+618    	; 0x13e0 <keypress+0x2d0>
				
			} 
			else if(keys[0] == KEY_UP)
    1176:	80 91 61 00 	lds	r24, 0x0061
    117a:	81 34       	cpi	r24, 0x41	; 65
    117c:	c1 f4       	brne	.+48     	; 0x11ae <keypress+0x9e>
			{
				if(pointer <= 0){ pointer = 0;}
    117e:	80 91 5b 01 	lds	r24, 0x015B
    1182:	90 91 5c 01 	lds	r25, 0x015C
    1186:	89 2b       	or	r24, r25
    1188:	29 f4       	brne	.+10     	; 0x1194 <keypress+0x84>
    118a:	10 92 5c 01 	sts	0x015C, r1
    118e:	10 92 5b 01 	sts	0x015B, r1
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <keypress+0x96>
				else{pointer--;}
    1194:	80 91 5b 01 	lds	r24, 0x015B
    1198:	90 91 5c 01 	lds	r25, 0x015C
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	90 93 5c 01 	sts	0x015C, r25
    11a2:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    11a6:	8f ef       	ldi	r24, 0xFF	; 255
    11a8:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    11ac:	19 c1       	rjmp	.+562    	; 0x13e0 <keypress+0x2d0>
			}else if(keys[0] == KEY_SELECT)
    11ae:	80 91 61 00 	lds	r24, 0x0061
    11b2:	83 32       	cpi	r24, 0x23	; 35
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <keypress+0xa8>
    11b6:	14 c1       	rjmp	.+552    	; 0x13e0 <keypress+0x2d0>
			{
				switch(pointer)
    11b8:	80 91 5b 01 	lds	r24, 0x015B
    11bc:	90 91 5c 01 	lds	r25, 0x015C
    11c0:	81 30       	cpi	r24, 0x01	; 1
    11c2:	91 05       	cpc	r25, r1
    11c4:	79 f0       	breq	.+30     	; 0x11e4 <keypress+0xd4>
    11c6:	30 f0       	brcs	.+12     	; 0x11d4 <keypress+0xc4>
    11c8:	82 30       	cpi	r24, 0x02	; 2
    11ca:	91 05       	cpc	r25, r1
    11cc:	a9 f0       	breq	.+42     	; 0x11f8 <keypress+0xe8>
    11ce:	03 97       	sbiw	r24, 0x03	; 3
    11d0:	e9 f0       	breq	.+58     	; 0x120c <keypress+0xfc>
    11d2:	06 c1       	rjmp	.+524    	; 0x13e0 <keypress+0x2d0>
				{
					case 0:	state=SWITCH;pointer = 0; break;
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	80 93 5a 01 	sts	0x015A, r24
    11da:	10 92 5c 01 	sts	0x015C, r1
    11de:	10 92 5b 01 	sts	0x015B, r1
    11e2:	fe c0       	rjmp	.+508    	; 0x13e0 <keypress+0x2d0>
					case 1: state=TIMER;pointer = 1; break;
    11e4:	83 e0       	ldi	r24, 0x03	; 3
    11e6:	80 93 5a 01 	sts	0x015A, r24
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	90 93 5c 01 	sts	0x015C, r25
    11f2:	80 93 5b 01 	sts	0x015B, r24
    11f6:	f4 c0       	rjmp	.+488    	; 0x13e0 <keypress+0x2d0>
					case 2: state=POPUP;draw_pointer(TRUE);event= METER; break;
    11f8:	86 e0       	ldi	r24, 0x06	; 6
    11fa:	80 93 5a 01 	sts	0x015A, r24
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	80 93 7f 05 	sts	0x057F, r24
    120a:	ea c0       	rjmp	.+468    	; 0x13e0 <keypress+0x2d0>
					case 3: state=CONNECTION;pointer = 0; break;
    120c:	85 e0       	ldi	r24, 0x05	; 5
    120e:	80 93 5a 01 	sts	0x015A, r24
    1212:	10 92 5c 01 	sts	0x015C, r1
    1216:	10 92 5b 01 	sts	0x015B, r1
    121a:	e2 c0       	rjmp	.+452    	; 0x13e0 <keypress+0x2d0>
				}
				
			}
		break;
		case SWITCH:
			draw_pointer(TRUE);
    121c:	8f ef       	ldi	r24, 0xFF	; 255
    121e:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
			if (keys[0] == KEY_DOWN)
    1222:	80 91 61 00 	lds	r24, 0x0061
    1226:	82 34       	cpi	r24, 0x42	; 66
    1228:	e1 f4       	brne	.+56     	; 0x1262 <keypress+0x152>
			{
				if(pointer >= menuend){ pointer = menuend;}
    122a:	80 91 60 00 	lds	r24, 0x0060
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	20 91 5b 01 	lds	r18, 0x015B
    1234:	30 91 5c 01 	lds	r19, 0x015C
    1238:	28 17       	cp	r18, r24
    123a:	39 07       	cpc	r19, r25
    123c:	28 f0       	brcs	.+10     	; 0x1248 <keypress+0x138>
    123e:	90 93 5c 01 	sts	0x015C, r25
    1242:	80 93 5b 01 	sts	0x015B, r24
    1246:	09 c0       	rjmp	.+18     	; 0x125a <keypress+0x14a>
				else{pointer++;}
    1248:	80 91 5b 01 	lds	r24, 0x015B
    124c:	90 91 5c 01 	lds	r25, 0x015C
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	90 93 5c 01 	sts	0x015C, r25
    1256:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    125a:	8f ef       	ldi	r24, 0xFF	; 255
    125c:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    1260:	bf c0       	rjmp	.+382    	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_UP)
    1262:	80 91 61 00 	lds	r24, 0x0061
    1266:	81 34       	cpi	r24, 0x41	; 65
    1268:	c1 f4       	brne	.+48     	; 0x129a <keypress+0x18a>
			{
				if(pointer <= 0){ pointer = 0;}
    126a:	80 91 5b 01 	lds	r24, 0x015B
    126e:	90 91 5c 01 	lds	r25, 0x015C
    1272:	89 2b       	or	r24, r25
    1274:	29 f4       	brne	.+10     	; 0x1280 <keypress+0x170>
    1276:	10 92 5c 01 	sts	0x015C, r1
    127a:	10 92 5b 01 	sts	0x015B, r1
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <keypress+0x182>
				else{pointer--;}
    1280:	80 91 5b 01 	lds	r24, 0x015B
    1284:	90 91 5c 01 	lds	r25, 0x015C
    1288:	01 97       	sbiw	r24, 0x01	; 1
    128a:	90 93 5c 01 	sts	0x015C, r25
    128e:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    1292:	8f ef       	ldi	r24, 0xFF	; 255
    1294:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    1298:	a3 c0       	rjmp	.+326    	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_BACK)
    129a:	80 91 61 00 	lds	r24, 0x0061
    129e:	8a 32       	cpi	r24, 0x2A	; 42
    12a0:	21 f4       	brne	.+8      	; 0x12aa <keypress+0x19a>
			{
				state = MENU;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	80 93 5a 01 	sts	0x015A, r24
    12a8:	9b c0       	rjmp	.+310    	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_SELECT)
    12aa:	80 91 61 00 	lds	r24, 0x0061
    12ae:	83 32       	cpi	r24, 0x23	; 35
    12b0:	09 f0       	breq	.+2      	; 0x12b4 <keypress+0x1a4>
    12b2:	96 c0       	rjmp	.+300    	; 0x13e0 <keypress+0x2d0>
			{
				state = POPUP;
    12b4:	86 e0       	ldi	r24, 0x06	; 6
    12b6:	80 93 5a 01 	sts	0x015A, r24
				switch(pointer)
    12ba:	80 91 5b 01 	lds	r24, 0x015B
    12be:	90 91 5c 01 	lds	r25, 0x015C
    12c2:	81 30       	cpi	r24, 0x01	; 1
    12c4:	91 05       	cpc	r25, r1
    12c6:	59 f0       	breq	.+22     	; 0x12de <keypress+0x1ce>
    12c8:	30 f0       	brcs	.+12     	; 0x12d6 <keypress+0x1c6>
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	91 05       	cpc	r25, r1
    12ce:	59 f0       	breq	.+22     	; 0x12e6 <keypress+0x1d6>
    12d0:	03 97       	sbiw	r24, 0x03	; 3
    12d2:	69 f0       	breq	.+26     	; 0x12ee <keypress+0x1de>
    12d4:	0f c0       	rjmp	.+30     	; 0x12f4 <keypress+0x1e4>
				{
	 				case 0:	event = SWITCHER_1; break;
    12d6:	8d e0       	ldi	r24, 0x0D	; 13
    12d8:	80 93 7f 05 	sts	0x057F, r24
    12dc:	0b c0       	rjmp	.+22     	; 0x12f4 <keypress+0x1e4>
					case 1: event = SWITCHER_2; break;
    12de:	8e e0       	ldi	r24, 0x0E	; 14
    12e0:	80 93 7f 05 	sts	0x057F, r24
    12e4:	07 c0       	rjmp	.+14     	; 0x12f4 <keypress+0x1e4>
					case 2: event = SWITCHER_3; break;
    12e6:	8f e0       	ldi	r24, 0x0F	; 15
    12e8:	80 93 7f 05 	sts	0x057F, r24
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <keypress+0x1e4>
					case 3: event = SWITCHER_4; break;
    12ee:	80 e1       	ldi	r24, 0x10	; 16
    12f0:	80 93 7f 05 	sts	0x057F, r24
					default:break;
				}
				pointer = 0;
    12f4:	10 92 5c 01 	sts	0x015C, r1
    12f8:	10 92 5b 01 	sts	0x015B, r1
    12fc:	71 c0       	rjmp	.+226    	; 0x13e0 <keypress+0x2d0>
			}
		break;
		case TIMER:
			draw_pointer(TRUE);
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
			if (keys[0] == KEY_DOWN)
    1304:	80 91 61 00 	lds	r24, 0x0061
    1308:	82 34       	cpi	r24, 0x42	; 66
    130a:	e1 f4       	brne	.+56     	; 0x1344 <keypress+0x234>
			{
				if(pointer >= menuend){ pointer = menuend;}
    130c:	80 91 60 00 	lds	r24, 0x0060
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	20 91 5b 01 	lds	r18, 0x015B
    1316:	30 91 5c 01 	lds	r19, 0x015C
    131a:	28 17       	cp	r18, r24
    131c:	39 07       	cpc	r19, r25
    131e:	28 f0       	brcs	.+10     	; 0x132a <keypress+0x21a>
    1320:	90 93 5c 01 	sts	0x015C, r25
    1324:	80 93 5b 01 	sts	0x015B, r24
    1328:	09 c0       	rjmp	.+18     	; 0x133c <keypress+0x22c>
				else{pointer++;}
    132a:	80 91 5b 01 	lds	r24, 0x015B
    132e:	90 91 5c 01 	lds	r25, 0x015C
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	90 93 5c 01 	sts	0x015C, r25
    1338:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    133c:	8f ef       	ldi	r24, 0xFF	; 255
    133e:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    1342:	4e c0       	rjmp	.+156    	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_UP)
    1344:	80 91 61 00 	lds	r24, 0x0061
    1348:	81 34       	cpi	r24, 0x41	; 65
    134a:	c1 f4       	brne	.+48     	; 0x137c <keypress+0x26c>
			{
				if(pointer <= 0){ pointer = 0;}
    134c:	80 91 5b 01 	lds	r24, 0x015B
    1350:	90 91 5c 01 	lds	r25, 0x015C
    1354:	89 2b       	or	r24, r25
    1356:	29 f4       	brne	.+10     	; 0x1362 <keypress+0x252>
    1358:	10 92 5c 01 	sts	0x015C, r1
    135c:	10 92 5b 01 	sts	0x015B, r1
    1360:	09 c0       	rjmp	.+18     	; 0x1374 <keypress+0x264>
				else{pointer--;}
    1362:	80 91 5b 01 	lds	r24, 0x015B
    1366:	90 91 5c 01 	lds	r25, 0x015C
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	90 93 5c 01 	sts	0x015C, r25
    1370:	80 93 5b 01 	sts	0x015B, r24
				draw_pointer(TRUE);
    1374:	8f ef       	ldi	r24, 0xFF	; 255
    1376:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    137a:	32 c0       	rjmp	.+100    	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_BACK)
    137c:	80 91 61 00 	lds	r24, 0x0061
    1380:	8a 32       	cpi	r24, 0x2A	; 42
    1382:	21 f4       	brne	.+8      	; 0x138c <keypress+0x27c>
			{
				state = MENU;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	80 93 5a 01 	sts	0x015A, r24
    138a:	2a c0       	rjmp	.+84     	; 0x13e0 <keypress+0x2d0>
			}
			else if(keys[0] == KEY_SELECT)
    138c:	80 91 61 00 	lds	r24, 0x0061
    1390:	83 32       	cpi	r24, 0x23	; 35
    1392:	31 f5       	brne	.+76     	; 0x13e0 <keypress+0x2d0>
			{
				state = POPUP;
    1394:	86 e0       	ldi	r24, 0x06	; 6
    1396:	80 93 5a 01 	sts	0x015A, r24
				switch(pointer)
    139a:	80 91 5b 01 	lds	r24, 0x015B
    139e:	90 91 5c 01 	lds	r25, 0x015C
    13a2:	82 30       	cpi	r24, 0x02	; 2
    13a4:	91 05       	cpc	r25, r1
    13a6:	49 f0       	breq	.+18     	; 0x13ba <keypress+0x2aa>
    13a8:	83 30       	cpi	r24, 0x03	; 3
    13aa:	91 05       	cpc	r25, r1
    13ac:	51 f0       	breq	.+20     	; 0x13c2 <keypress+0x2b2>
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	59 f4       	brne	.+22     	; 0x13c8 <keypress+0x2b8>
				{
					case 1:	event = SET_TIME ; break;
    13b2:	8a e0       	ldi	r24, 0x0A	; 10
    13b4:	80 93 7f 05 	sts	0x057F, r24
    13b8:	07 c0       	rjmp	.+14     	; 0x13c8 <keypress+0x2b8>
					case 2: event = ALARM_1; break; 
    13ba:	8b e0       	ldi	r24, 0x0B	; 11
    13bc:	80 93 7f 05 	sts	0x057F, r24
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <keypress+0x2b8>
					case 3: event = ALARM_2; break;
    13c2:	8c e0       	ldi	r24, 0x0C	; 12
    13c4:	80 93 7f 05 	sts	0x057F, r24
					default:break;
				}
				pointer = 0;
    13c8:	10 92 5c 01 	sts	0x015C, r1
    13cc:	10 92 5b 01 	sts	0x015B, r1
    13d0:	07 c0       	rjmp	.+14     	; 0x13e0 <keypress+0x2d0>
			}
		break;
		case METER:
			if (keys[0] == KEY_BACK)
    13d2:	80 91 61 00 	lds	r24, 0x0061
    13d6:	8a 32       	cpi	r24, 0x2A	; 42
    13d8:	19 f4       	brne	.+6      	; 0x13e0 <keypress+0x2d0>
			{
				state = MENU;
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	80 93 5a 01 	sts	0x015A, r24
		case BOOT: break;
		default:
		break;
	}
	
	 if (state == POPUP)
    13e0:	80 91 5a 01 	lds	r24, 0x015A
    13e4:	86 30       	cpi	r24, 0x06	; 6
    13e6:	b9 f5       	brne	.+110    	; 0x1456 <keypress+0x346>
	 {
		 switch (event)
    13e8:	80 91 7f 05 	lds	r24, 0x057F
    13ec:	8a 30       	cpi	r24, 0x0A	; 10
    13ee:	41 f0       	breq	.+16     	; 0x1400 <keypress+0x2f0>
    13f0:	18 f4       	brcc	.+6      	; 0x13f8 <keypress+0x2e8>
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	49 f1       	breq	.+82     	; 0x1448 <keypress+0x338>
    13f6:	08 95       	ret
    13f8:	8d 50       	subi	r24, 0x0D	; 13
    13fa:	84 30       	cpi	r24, 0x04	; 4
    13fc:	48 f0       	brcs	.+18     	; 0x1410 <keypress+0x300>
    13fe:	08 95       	ret
		 {
			 case SET_TIME:
				if (keys[0] == KEY_BACK)
    1400:	80 91 61 00 	lds	r24, 0x0061
    1404:	8a 32       	cpi	r24, 0x2A	; 42
    1406:	39 f5       	brne	.+78     	; 0x1456 <keypress+0x346>
				{state = TIMER;}
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	80 93 5a 01 	sts	0x015A, r24
    140e:	08 95       	ret
			 break;
			 case SWITCHER_1: case SWITCHER_2: case SWITCHER_3: case SWITCHER_4:
				 if (keys[0] == KEY_LEFT)
    1410:	80 91 61 00 	lds	r24, 0x0061
    1414:	83 34       	cpi	r24, 0x43	; 67
    1416:	31 f4       	brne	.+12     	; 0x1424 <keypress+0x314>
				 { switcher(ON,event);}
    1418:	60 91 7f 05 	lds	r22, 0x057F
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	0e 94 41 07 	call	0xe82	; 0xe82 <switcher>
    1422:	08 95       	ret
				 else if (keys[0] == KEY_RIGHT)
    1424:	80 91 61 00 	lds	r24, 0x0061
    1428:	84 34       	cpi	r24, 0x44	; 68
    142a:	31 f4       	brne	.+12     	; 0x1438 <keypress+0x328>
				 { switcher(OFF,event);/*switch1 = OFF;*/}
    142c:	60 91 7f 05 	lds	r22, 0x057F
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	0e 94 41 07 	call	0xe82	; 0xe82 <switcher>
    1436:	08 95       	ret
				 else if (keys[0] == KEY_BACK)
    1438:	80 91 61 00 	lds	r24, 0x0061
    143c:	8a 32       	cpi	r24, 0x2A	; 42
    143e:	59 f4       	brne	.+22     	; 0x1456 <keypress+0x346>
				 {state = SWITCH;}
    1440:	82 e0       	ldi	r24, 0x02	; 2
    1442:	80 93 5a 01 	sts	0x015A, r24
    1446:	08 95       	ret
			 break;
			 case METER:
				if (keys[0] == KEY_BACK)
    1448:	80 91 61 00 	lds	r24, 0x0061
    144c:	8a 32       	cpi	r24, 0x2A	; 42
    144e:	19 f4       	brne	.+6      	; 0x1456 <keypress+0x346>
				{ state = MENU;}
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	80 93 5a 01 	sts	0x015A, r24
    1456:	08 95       	ret

00001458 <keyInput>:
		GLCD_Draw_String(4,41,"TIME SET!",WHITE);
		state = MENU;		
	}
}
int keyInput(int digits,unsigned char use)
{
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	7c 01       	movw	r14, r24
    146c:	b6 2e       	mov	r11, r22
	int i=0, num=0;
    146e:	00 e0       	ldi	r16, 0x00	; 0
    1470:	10 e0       	ldi	r17, 0x00	; 0
    1472:	c0 e0       	ldi	r28, 0x00	; 0
    1474:	d0 e0       	ldi	r29, 0x00	; 0
					GLCD_Draw_String(9,33,s4,WHITE);
					GLCD_Render();
				}
				break;
			}
			key=-1;
    1476:	cc 24       	eor	r12, r12
    1478:	ca 94       	dec	r12
    147a:	dc 2c       	mov	r13, r12
	}
}
int keyInput(int digits,unsigned char use)
{
	int i=0, num=0;
	while ( i < digits )
    147c:	c2 c0       	rjmp	.+388    	; 0x1602 <keyInput+0x1aa>
	{
				
		if (key >=0)
    147e:	20 91 80 05 	lds	r18, 0x0580
    1482:	30 91 81 05 	lds	r19, 0x0581
    1486:	33 23       	and	r19, r19
    1488:	d4 f3       	brlt	.-12     	; 0x147e <keyInput+0x26>
		{
			switch (i)
    148a:	c1 30       	cpi	r28, 0x01	; 1
    148c:	d1 05       	cpc	r29, r1
    148e:	c1 f0       	breq	.+48     	; 0x14c0 <keyInput+0x68>
    1490:	1c f4       	brge	.+6      	; 0x1498 <keyInput+0x40>
    1492:	20 97       	sbiw	r28, 0x00	; 0
    1494:	41 f0       	breq	.+16     	; 0x14a6 <keyInput+0x4e>
    1496:	52 c0       	rjmp	.+164    	; 0x153c <keyInput+0xe4>
    1498:	c2 30       	cpi	r28, 0x02	; 2
    149a:	d1 05       	cpc	r29, r1
    149c:	59 f1       	breq	.+86     	; 0x14f4 <keyInput+0x9c>
    149e:	c3 30       	cpi	r28, 0x03	; 3
    14a0:	d1 05       	cpc	r29, r1
    14a2:	d1 f1       	breq	.+116    	; 0x1518 <keyInput+0xc0>
    14a4:	4b c0       	rjmp	.+150    	; 0x153c <keyInput+0xe4>
			{
				case 0:	num=key; //one digit
    14a6:	00 91 80 05 	lds	r16, 0x0580
    14aa:	10 91 81 05 	lds	r17, 0x0581
				break;
				case 3: num = (num*10)+(key);
				break;
				default:  break;
			}
			switch (use)
    14ae:	8f e0       	ldi	r24, 0x0F	; 15
    14b0:	b8 16       	cp	r11, r24
    14b2:	09 f4       	brne	.+2      	; 0x14b6 <keyInput+0x5e>
    14b4:	4c c0       	rjmp	.+152    	; 0x154e <keyInput+0xf6>
    14b6:	80 e1       	ldi	r24, 0x10	; 16
    14b8:	b8 16       	cp	r11, r24
    14ba:	09 f4       	brne	.+2      	; 0x14be <keyInput+0x66>
    14bc:	73 c0       	rjmp	.+230    	; 0x15a4 <keyInput+0x14c>
    14be:	9c c0       	rjmp	.+312    	; 0x15f8 <keyInput+0x1a0>
		{
			switch (i)
			{
				case 0:	num=key; //one digit
				break;
				case 1: num = (num*10)+(key); //2 digit
    14c0:	c8 01       	movw	r24, r16
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25
    14c6:	00 0f       	add	r16, r16
    14c8:	11 1f       	adc	r17, r17
    14ca:	00 0f       	add	r16, r16
    14cc:	11 1f       	adc	r17, r17
    14ce:	00 0f       	add	r16, r16
    14d0:	11 1f       	adc	r17, r17
    14d2:	08 0f       	add	r16, r24
    14d4:	19 1f       	adc	r17, r25
    14d6:	80 91 80 05 	lds	r24, 0x0580
    14da:	90 91 81 05 	lds	r25, 0x0581
    14de:	08 0f       	add	r16, r24
    14e0:	19 1f       	adc	r17, r25
				break;
				case 3: num = (num*10)+(key);
				break;
				default:  break;
			}
			switch (use)
    14e2:	8f e0       	ldi	r24, 0x0F	; 15
    14e4:	b8 16       	cp	r11, r24
    14e6:	09 f4       	brne	.+2      	; 0x14ea <keyInput+0x92>
    14e8:	4a c0       	rjmp	.+148    	; 0x157e <keyInput+0x126>
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	b8 16       	cp	r11, r24
    14ee:	09 f4       	brne	.+2      	; 0x14f2 <keyInput+0x9a>
    14f0:	59 c0       	rjmp	.+178    	; 0x15a4 <keyInput+0x14c>
    14f2:	82 c0       	rjmp	.+260    	; 0x15f8 <keyInput+0x1a0>
			{
				case 0:	num=key; //one digit
				break;
				case 1: num = (num*10)+(key); //2 digit
				break;
				case 2:	num = (num*10)+(key);// 3 digit
    14f4:	c8 01       	movw	r24, r16
    14f6:	88 0f       	add	r24, r24
    14f8:	99 1f       	adc	r25, r25
    14fa:	00 0f       	add	r16, r16
    14fc:	11 1f       	adc	r17, r17
    14fe:	00 0f       	add	r16, r16
    1500:	11 1f       	adc	r17, r17
    1502:	00 0f       	add	r16, r16
    1504:	11 1f       	adc	r17, r17
    1506:	08 0f       	add	r16, r24
    1508:	19 1f       	adc	r17, r25
    150a:	80 91 80 05 	lds	r24, 0x0580
    150e:	90 91 81 05 	lds	r25, 0x0581
    1512:	08 0f       	add	r16, r24
    1514:	19 1f       	adc	r17, r25
				break;
    1516:	80 c0       	rjmp	.+256    	; 0x1618 <keyInput+0x1c0>
				case 3: num = (num*10)+(key);
    1518:	c8 01       	movw	r24, r16
    151a:	88 0f       	add	r24, r24
    151c:	99 1f       	adc	r25, r25
    151e:	00 0f       	add	r16, r16
    1520:	11 1f       	adc	r17, r17
    1522:	00 0f       	add	r16, r16
    1524:	11 1f       	adc	r17, r17
    1526:	00 0f       	add	r16, r16
    1528:	11 1f       	adc	r17, r17
    152a:	08 0f       	add	r16, r24
    152c:	19 1f       	adc	r17, r25
    152e:	80 91 80 05 	lds	r24, 0x0580
    1532:	90 91 81 05 	lds	r25, 0x0581
    1536:	08 0f       	add	r16, r24
    1538:	19 1f       	adc	r17, r25
				break;
    153a:	6e c0       	rjmp	.+220    	; 0x1618 <keyInput+0x1c0>
				default:  break;
			}
			switch (use)
    153c:	8f e0       	ldi	r24, 0x0F	; 15
    153e:	b8 16       	cp	r11, r24
    1540:	21 f0       	breq	.+8      	; 0x154a <keyInput+0xf2>
    1542:	80 e1       	ldi	r24, 0x10	; 16
    1544:	b8 16       	cp	r11, r24
    1546:	71 f1       	breq	.+92     	; 0x15a4 <keyInput+0x14c>
    1548:	57 c0       	rjmp	.+174    	; 0x15f8 <keyInput+0x1a0>
			{
				case HOUR:
				if (i ==0)
    154a:	20 97       	sbiw	r28, 0x00	; 0
    154c:	a9 f4       	brne	.+42     	; 0x1578 <keyInput+0x120>
				{	itoa(key,s1,10);
    154e:	80 91 80 05 	lds	r24, 0x0580
    1552:	90 91 81 05 	lds	r25, 0x0581
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1556:	4a e0       	ldi	r20, 0x0A	; 10
    1558:	6c e7       	ldi	r22, 0x7C	; 124
    155a:	75 e0       	ldi	r23, 0x05	; 5
    155c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__itoa_ncheck>
					GLCD_Render();
    1560:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
					GLCD_Draw_String(5,33,s1,WHITE);
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	4c e7       	ldi	r20, 0x7C	; 124
    1568:	55 e0       	ldi	r21, 0x05	; 5
    156a:	61 e2       	ldi	r22, 0x21	; 33
    156c:	85 e0       	ldi	r24, 0x05	; 5
    156e:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					GLCD_Render();
    1572:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    1576:	40 c0       	rjmp	.+128    	; 0x15f8 <keyInput+0x1a0>
				}
				else if (i==1) { itoa(key,s2,10);
    1578:	c1 30       	cpi	r28, 0x01	; 1
    157a:	d1 05       	cpc	r29, r1
    157c:	e9 f5       	brne	.+122    	; 0x15f8 <keyInput+0x1a0>
    157e:	80 91 80 05 	lds	r24, 0x0580
    1582:	90 91 81 05 	lds	r25, 0x0581
    1586:	4a e0       	ldi	r20, 0x0A	; 10
    1588:	62 e8       	ldi	r22, 0x82	; 130
    158a:	75 e0       	ldi	r23, 0x05	; 5
    158c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__itoa_ncheck>
					GLCD_Draw_String(6,33,s2,WHITE);
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	42 e8       	ldi	r20, 0x82	; 130
    1594:	55 e0       	ldi	r21, 0x05	; 5
    1596:	61 e2       	ldi	r22, 0x21	; 33
    1598:	86 e0       	ldi	r24, 0x06	; 6
    159a:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					GLCD_Render();
    159e:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    15a2:	2a c0       	rjmp	.+84     	; 0x15f8 <keyInput+0x1a0>
				}
				break;
				case MINUTE:
				if (i ==0){itoa(key,s3,10);
    15a4:	20 97       	sbiw	r28, 0x00	; 0
    15a6:	99 f4       	brne	.+38     	; 0x15ce <keyInput+0x176>
    15a8:	80 91 80 05 	lds	r24, 0x0580
    15ac:	90 91 81 05 	lds	r25, 0x0581
    15b0:	4a e0       	ldi	r20, 0x0A	; 10
    15b2:	63 e8       	ldi	r22, 0x83	; 131
    15b4:	75 e0       	ldi	r23, 0x05	; 5
    15b6:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__itoa_ncheck>
					GLCD_Draw_String(8,33,s3,WHITE);
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	43 e8       	ldi	r20, 0x83	; 131
    15be:	55 e0       	ldi	r21, 0x05	; 5
    15c0:	61 e2       	ldi	r22, 0x21	; 33
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					GLCD_Render();
    15c8:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    15cc:	15 c0       	rjmp	.+42     	; 0x15f8 <keyInput+0x1a0>
				}
				else if (i==1) { itoa(key,s4,10);
    15ce:	c1 30       	cpi	r28, 0x01	; 1
    15d0:	d1 05       	cpc	r29, r1
    15d2:	91 f4       	brne	.+36     	; 0x15f8 <keyInput+0x1a0>
    15d4:	80 91 80 05 	lds	r24, 0x0580
    15d8:	90 91 81 05 	lds	r25, 0x0581
    15dc:	4a e0       	ldi	r20, 0x0A	; 10
    15de:	6e e7       	ldi	r22, 0x7E	; 126
    15e0:	75 e0       	ldi	r23, 0x05	; 5
    15e2:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__itoa_ncheck>
					GLCD_Draw_String(9,33,s4,WHITE);
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	4e e7       	ldi	r20, 0x7E	; 126
    15ea:	55 e0       	ldi	r21, 0x05	; 5
    15ec:	61 e2       	ldi	r22, 0x21	; 33
    15ee:	89 e0       	ldi	r24, 0x09	; 9
    15f0:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					GLCD_Render();
    15f4:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
				}
				break;
			}
			key=-1;
    15f8:	d0 92 81 05 	sts	0x0581, r13
    15fc:	c0 92 80 05 	sts	0x0580, r12
			i++;
    1600:	21 96       	adiw	r28, 0x01	; 1
	}
}
int keyInput(int digits,unsigned char use)
{
	int i=0, num=0;
	while ( i < digits )
    1602:	ce 15       	cp	r28, r14
    1604:	df 05       	cpc	r29, r15
    1606:	64 f4       	brge	.+24     	; 0x1620 <keyInput+0x1c8>
	{
				
		if (key >=0)
    1608:	20 91 80 05 	lds	r18, 0x0580
    160c:	30 91 81 05 	lds	r19, 0x0581
    1610:	33 23       	and	r19, r19
    1612:	0c f4       	brge	.+2      	; 0x1616 <keyInput+0x1be>
    1614:	34 cf       	rjmp	.-408    	; 0x147e <keyInput+0x26>
    1616:	39 cf       	rjmp	.-398    	; 0x148a <keyInput+0x32>
				break;
				case 3: num = (num*10)+(key);
				break;
				default:  break;
			}
			switch (use)
    1618:	80 e1       	ldi	r24, 0x10	; 16
    161a:	b8 12       	cpse	r11, r24
    161c:	ed cf       	rjmp	.-38     	; 0x15f8 <keyInput+0x1a0>
    161e:	c2 cf       	rjmp	.-124    	; 0x15a4 <keyInput+0x14c>
			key=-1;
			i++;
		}
	}
	return num;
}
    1620:	c8 01       	movw	r24, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	ff 90       	pop	r15
    162c:	ef 90       	pop	r14
    162e:	df 90       	pop	r13
    1630:	cf 90       	pop	r12
    1632:	bf 90       	pop	r11
    1634:	08 95       	ret

00001636 <set_rtc>:
		break;
	}		
}

void set_rtc()
{
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	cf 93       	push	r28
    163c:	df 93       	push	r29
	while (state == POPUP)
    163e:	80 91 5a 01 	lds	r24, 0x015A
    1642:	86 30       	cpi	r24, 0x06	; 6
    1644:	09 f0       	breq	.+2      	; 0x1648 <set_rtc+0x12>
    1646:	66 c0       	rjmp	.+204    	; 0x1714 <set_rtc+0xde>
		draw_cursor(40,41,WHITE);
		draw_cursor(48,41,WHITE);
		draw_cursor(64,41,WHITE);
		draw_cursor(72,41,WHITE);
		
		GLCD_Render();
    1648:	01 e0       	ldi	r16, 0x01	; 1
    164a:	10 e0       	ldi	r17, 0x00	; 0
{
	while (state == POPUP)
	{
		int hour=0,minute=0;
		int loop=0;
		GLCD_Draw_String(3,15,clock_buffer,WHITE);
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	40 e7       	ldi	r20, 0x70	; 112
    1650:	55 e0       	ldi	r21, 0x05	; 5
    1652:	6f e0       	ldi	r22, 0x0F	; 15
    1654:	83 e0       	ldi	r24, 0x03	; 3
    1656:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
		draw_cursor(40,41,WHITE);
    165a:	40 e0       	ldi	r20, 0x00	; 0
    165c:	69 e2       	ldi	r22, 0x29	; 41
    165e:	88 e2       	ldi	r24, 0x28	; 40
    1660:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(48,41,WHITE);
    1664:	40 e0       	ldi	r20, 0x00	; 0
    1666:	69 e2       	ldi	r22, 0x29	; 41
    1668:	80 e3       	ldi	r24, 0x30	; 48
    166a:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(64,41,WHITE);
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	69 e2       	ldi	r22, 0x29	; 41
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(72,41,WHITE);
    1678:	40 e0       	ldi	r20, 0x00	; 0
    167a:	69 e2       	ldi	r22, 0x29	; 41
    167c:	88 e4       	ldi	r24, 0x48	; 72
    167e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		
		GLCD_Render();
    1682:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    1686:	c0 2f       	mov	r28, r16
    1688:	d1 2f       	mov	r29, r17
    168a:	01 c0       	rjmp	.+2      	; 0x168e <set_rtc+0x58>
    168c:	21 96       	adiw	r28, 0x01	; 1
    168e:	ce 01       	movw	r24, r28
    1690:	01 97       	sbiw	r24, 0x01	; 1
		while (loop<2)
		{
			switch (loop)
    1692:	19 f0       	breq	.+6      	; 0x169a <set_rtc+0x64>
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	e9 f0       	breq	.+58     	; 0x16d2 <set_rtc+0x9c>
    1698:	2b c0       	rjmp	.+86     	; 0x16f0 <set_rtc+0xba>
			{
				case 0:
					GLCD_Draw_String(3,15,clock_buffer,WHITE);
    169a:	20 e0       	ldi	r18, 0x00	; 0
    169c:	40 e7       	ldi	r20, 0x70	; 112
    169e:	55 e0       	ldi	r21, 0x05	; 5
    16a0:	6f e0       	ldi	r22, 0x0F	; 15
    16a2:	83 e0       	ldi	r24, 0x03	; 3
    16a4:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					hour = keyInput(2,HOUR);
    16a8:	6f e0       	ldi	r22, 0x0F	; 15
    16aa:	82 e0       	ldi	r24, 0x02	; 2
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
					if (hour>12) {SetHour(hour-12);
    16b2:	8d 30       	cpi	r24, 0x0D	; 13
    16b4:	91 05       	cpc	r25, r1
    16b6:	3c f0       	brlt	.+14     	; 0x16c6 <set_rtc+0x90>
    16b8:	8c 50       	subi	r24, 0x0C	; 12
    16ba:	0e 94 69 10 	call	0x20d2	; 0x20d2 <SetHour>
						SetAmPm(1)/*PM*/; }
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	0e 94 8b 10 	call	0x2116	; 0x2116 <SetAmPm>
    16c4:	e3 cf       	rjmp	.-58     	; 0x168c <set_rtc+0x56>
					else {SetHour(hour);
    16c6:	0e 94 69 10 	call	0x20d2	; 0x20d2 <SetHour>
						SetAmPm(0);/*AM*/ }
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	0e 94 8b 10 	call	0x2116	; 0x2116 <SetAmPm>
    16d0:	dd cf       	rjmp	.-70     	; 0x168c <set_rtc+0x56>
				break;
				case 1:
					GLCD_Draw_String(3,15,clock_buffer,WHITE);
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	40 e7       	ldi	r20, 0x70	; 112
    16d6:	55 e0       	ldi	r21, 0x05	; 5
    16d8:	6f e0       	ldi	r22, 0x0F	; 15
    16da:	83 e0       	ldi	r24, 0x03	; 3
    16dc:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
					minute = keyInput(2,MINUTE);
    16e0:	60 e1       	ldi	r22, 0x10	; 16
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
					SetMinute(minute);
    16ea:	0e 94 53 10 	call	0x20a6	; 0x20a6 <SetMinute>
    16ee:	03 c0       	rjmp	.+6      	; 0x16f6 <set_rtc+0xc0>
		draw_cursor(48,41,WHITE);
		draw_cursor(64,41,WHITE);
		draw_cursor(72,41,WHITE);
		
		GLCD_Render();
		while (loop<2)
    16f0:	c2 30       	cpi	r28, 0x02	; 2
    16f2:	d1 05       	cpc	r29, r1
    16f4:	5c f2       	brlt	.-106    	; 0x168c <set_rtc+0x56>
				break;
				default: ;break;
			}
			loop++;
		}
		GLCD_Draw_String(4,41,"TIME SET!",WHITE);
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	46 e7       	ldi	r20, 0x76	; 118
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	69 e2       	ldi	r22, 0x29	; 41
    16fe:	84 e0       	ldi	r24, 0x04	; 4
    1700:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
		state = MENU;		
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	80 93 5a 01 	sts	0x015A, r24
	}		
}

void set_rtc()
{
	while (state == POPUP)
    170a:	80 91 5a 01 	lds	r24, 0x015A
    170e:	86 30       	cpi	r24, 0x06	; 6
    1710:	09 f4       	brne	.+2      	; 0x1714 <set_rtc+0xde>
    1712:	9c cf       	rjmp	.-200    	; 0x164c <set_rtc+0x16>
			loop++;
		}
		GLCD_Draw_String(4,41,"TIME SET!",WHITE);
		state = MENU;		
	}
}
    1714:	df 91       	pop	r29
    1716:	cf 91       	pop	r28
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	08 95       	ret

0000171e <set_alarm>:
		}
	}
	return num;
}
void set_alarm(uint8_t alarm)
{
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
	while (state == POPUP)
    1728:	90 91 5a 01 	lds	r25, 0x015A
    172c:	96 30       	cpi	r25, 0x06	; 6
    172e:	09 f0       	breq	.+2      	; 0x1732 <set_alarm+0x14>
    1730:	88 c0       	rjmp	.+272    	; 0x1842 <set_alarm+0x124>
    1732:	18 2f       	mov	r17, r24
		draw_cursor(40,41,WHITE);
		draw_cursor(48,41,WHITE);
		draw_cursor(64,41,WHITE);
		draw_cursor(72,41,WHITE);
		
		GLCD_Render();
    1734:	ff 24       	eor	r15, r15
    1736:	f3 94       	inc	r15
    1738:	00 e0       	ldi	r16, 0x00	; 0
	{
		int loop=0;
// 		char h[2];
// 		itoa(hour1,h,10);
//		GLCD_Draw_String(3,15,h,WHITE);
		GLCD_Draw_String(3,15,clock_buffer,WHITE);
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	40 e7       	ldi	r20, 0x70	; 112
    173e:	55 e0       	ldi	r21, 0x05	; 5
    1740:	6f e0       	ldi	r22, 0x0F	; 15
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
		draw_cursor(40,41,WHITE);
    1748:	40 e0       	ldi	r20, 0x00	; 0
    174a:	69 e2       	ldi	r22, 0x29	; 41
    174c:	88 e2       	ldi	r24, 0x28	; 40
    174e:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(48,41,WHITE);
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	69 e2       	ldi	r22, 0x29	; 41
    1756:	80 e3       	ldi	r24, 0x30	; 48
    1758:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(64,41,WHITE);
    175c:	40 e0       	ldi	r20, 0x00	; 0
    175e:	69 e2       	ldi	r22, 0x29	; 41
    1760:	80 e4       	ldi	r24, 0x40	; 64
    1762:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		draw_cursor(72,41,WHITE);
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	69 e2       	ldi	r22, 0x29	; 41
    176a:	88 e4       	ldi	r24, 0x48	; 72
    176c:	0e 94 60 08 	call	0x10c0	; 0x10c0 <draw_cursor>
		
		GLCD_Render();
    1770:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    1774:	cf 2d       	mov	r28, r15
    1776:	d0 2f       	mov	r29, r16
    1778:	01 c0       	rjmp	.+2      	; 0x177c <set_alarm+0x5e>
    177a:	21 96       	adiw	r28, 0x01	; 1
    177c:	9e 01       	movw	r18, r28
    177e:	21 50       	subi	r18, 0x01	; 1
    1780:	31 09       	sbc	r19, r1
		
		while (loop<2)
		{
			switch (loop)
    1782:	21 f0       	breq	.+8      	; 0x178c <set_alarm+0x6e>
    1784:	21 30       	cpi	r18, 0x01	; 1
    1786:	31 05       	cpc	r19, r1
    1788:	29 f1       	breq	.+74     	; 0x17d4 <set_alarm+0xb6>
    178a:	48 c0       	rjmp	.+144    	; 0x181c <set_alarm+0xfe>
			{
				case 0:					
					if (alarm == ALARM_1)
    178c:	1b 30       	cpi	r17, 0x0B	; 11
    178e:	81 f4       	brne	.+32     	; 0x17b0 <set_alarm+0x92>
					{ hour1 = keyInput(2,HOUR);	EEPROM_WriteNBytes(hour1_addr,(uint8_t *)&hour1,1);} 
    1790:	6f e0       	ldi	r22, 0x0F	; 15
    1792:	82 e0       	ldi	r24, 0x02	; 2
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
    179a:	80 93 6d 05 	sts	0x056D, r24
    179e:	4f 2d       	mov	r20, r15
    17a0:	50 2f       	mov	r21, r16
    17a2:	6d e6       	ldi	r22, 0x6D	; 109
    17a4:	75 e0       	ldi	r23, 0x05	; 5
    17a6:	85 e0       	ldi	r24, 0x05	; 5
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
    17ae:	e5 cf       	rjmp	.-54     	; 0x177a <set_alarm+0x5c>
					else if (alarm == ALARM_2)
    17b0:	1c 30       	cpi	r17, 0x0C	; 12
    17b2:	19 f7       	brne	.-58     	; 0x177a <set_alarm+0x5c>
					{ hour2 = keyInput(2,HOUR); EEPROM_WriteNBytes(hour2_addr,(uint8_t *)&hour2,1);	}
    17b4:	6f e0       	ldi	r22, 0x0F	; 15
    17b6:	82 e0       	ldi	r24, 0x02	; 2
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
    17be:	80 93 6e 05 	sts	0x056E, r24
    17c2:	4f 2d       	mov	r20, r15
    17c4:	50 2f       	mov	r21, r16
    17c6:	6e e6       	ldi	r22, 0x6E	; 110
    17c8:	75 e0       	ldi	r23, 0x05	; 5
    17ca:	86 e0       	ldi	r24, 0x06	; 6
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
    17d2:	d3 cf       	rjmp	.-90     	; 0x177a <set_alarm+0x5c>
									
				break;
				case 1:
					if (alarm == ALARM_1)
    17d4:	1b 30       	cpi	r17, 0x0B	; 11
    17d6:	81 f4       	brne	.+32     	; 0x17f8 <set_alarm+0xda>
					{ min1 = keyInput(2,MINUTE);EEPROM_WriteNBytes(min1_addr,(uint8_t *)&min1,1);}
    17d8:	60 e1       	ldi	r22, 0x10	; 16
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
    17e2:	80 93 6f 05 	sts	0x056F, r24
    17e6:	4f 2d       	mov	r20, r15
    17e8:	50 2f       	mov	r21, r16
    17ea:	6f e6       	ldi	r22, 0x6F	; 111
    17ec:	75 e0       	ldi	r23, 0x05	; 5
    17ee:	87 e0       	ldi	r24, 0x07	; 7
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
    17f6:	16 c0       	rjmp	.+44     	; 0x1824 <set_alarm+0x106>
					else if (alarm == ALARM_2)
    17f8:	1c 30       	cpi	r17, 0x0C	; 12
    17fa:	a1 f4       	brne	.+40     	; 0x1824 <set_alarm+0x106>
					{ min2 = keyInput(2,MINUTE);EEPROM_WriteNBytes(min2_addr,(uint8_t *)&min2,1);}					
    17fc:	60 e1       	ldi	r22, 0x10	; 16
    17fe:	82 e0       	ldi	r24, 0x02	; 2
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	0e 94 2c 0a 	call	0x1458	; 0x1458 <keyInput>
    1806:	80 93 7d 05 	sts	0x057D, r24
    180a:	4f 2d       	mov	r20, r15
    180c:	50 2f       	mov	r21, r16
    180e:	6d e7       	ldi	r22, 0x7D	; 125
    1810:	75 e0       	ldi	r23, 0x05	; 5
    1812:	88 e0       	ldi	r24, 0x08	; 8
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <set_alarm+0x106>
		draw_cursor(64,41,WHITE);
		draw_cursor(72,41,WHITE);
		
		GLCD_Render();
		
		while (loop<2)
    181c:	c2 30       	cpi	r28, 0x02	; 2
    181e:	d1 05       	cpc	r29, r1
    1820:	0c f4       	brge	.+2      	; 0x1824 <set_alarm+0x106>
    1822:	ab cf       	rjmp	.-170    	; 0x177a <set_alarm+0x5c>
				break;
				default: ;break;
			}
			loop++;
		}
		GLCD_Draw_String(3,41,"ALARM1 SET",WHITE);
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	40 e8       	ldi	r20, 0x80	; 128
    1828:	50 e0       	ldi	r21, 0x00	; 0
    182a:	69 e2       	ldi	r22, 0x29	; 41
    182c:	83 e0       	ldi	r24, 0x03	; 3
    182e:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
		state = TIMER;
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	80 93 5a 01 	sts	0x015A, r24
	}
	return num;
}
void set_alarm(uint8_t alarm)
{
	while (state == POPUP)
    1838:	80 91 5a 01 	lds	r24, 0x015A
    183c:	86 30       	cpi	r24, 0x06	; 6
    183e:	09 f4       	brne	.+2      	; 0x1842 <set_alarm+0x124>
    1840:	7c cf       	rjmp	.-264    	; 0x173a <set_alarm+0x1c>
			loop++;
		}
		GLCD_Draw_String(3,41,"ALARM1 SET",WHITE);
		state = TIMER;
	}
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	08 95       	ret

0000184e <ftoa>:
char *ftoa(char *buffer, double d, int precision)
{
    184e:	4f 92       	push	r4
    1850:	5f 92       	push	r5
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	7c 01       	movw	r14, r24
    1870:	4a 01       	movw	r8, r20
    1872:	5b 01       	movw	r10, r22
    1874:	89 01       	movw	r16, r18

	long wholePart = (long) d; 	// Deposit the whole part of the number.
    1876:	cb 01       	movw	r24, r22
    1878:	ba 01       	movw	r22, r20
    187a:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fixsfsi>
    187e:	2b 01       	movw	r4, r22
    1880:	3c 01       	movw	r6, r24
    1882:	4a e0       	ldi	r20, 0x0A	; 10
    1884:	b7 01       	movw	r22, r14
    1886:	c2 01       	movw	r24, r4
    1888:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <__itoa_ncheck>

	itoa(wholePart,buffer,10);

	// Now work on the faction if we need one.
	if (precision > 0) {
    188c:	10 16       	cp	r1, r16
    188e:	11 06       	cpc	r1, r17
    1890:	0c f0       	brlt	.+2      	; 0x1894 <ftoa+0x46>
    1892:	59 c0       	rjmp	.+178    	; 0x1946 <ftoa+0xf8>

		// We do, so locate the end of the string and insert a decimal point.

		char *endOfString = buffer;
		while (*endOfString != '\0') endOfString++;
    1894:	f7 01       	movw	r30, r14
    1896:	80 81       	ld	r24, Z
    1898:	88 23       	and	r24, r24
    189a:	41 f0       	breq	.+16     	; 0x18ac <ftoa+0x5e>
    189c:	c7 01       	movw	r24, r14
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	ec 01       	movw	r28, r24
    18a2:	01 96       	adiw	r24, 0x01	; 1
    18a4:	28 81       	ld	r18, Y
    18a6:	21 11       	cpse	r18, r1
    18a8:	fb cf       	rjmp	.-10     	; 0x18a0 <ftoa+0x52>
    18aa:	01 c0       	rjmp	.+2      	; 0x18ae <ftoa+0x60>
    18ac:	e7 01       	movw	r28, r14
		*endOfString++ = '.';
    18ae:	6e 01       	movw	r12, r28
    18b0:	ff ef       	ldi	r31, 0xFF	; 255
    18b2:	cf 1a       	sub	r12, r31
    18b4:	df 0a       	sbc	r13, r31
    18b6:	8e e2       	ldi	r24, 0x2E	; 46
    18b8:	88 83       	st	Y, r24
		// Now work on the fraction, be sure to turn any negative
		// values positive.

		if (d < 0) {
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	a9 01       	movw	r20, r18
    18c0:	c5 01       	movw	r24, r10
    18c2:	b4 01       	movw	r22, r8
    18c4:	0e 94 70 11 	call	0x22e0	; 0x22e0 <__cmpsf2>
    18c8:	88 23       	and	r24, r24
    18ca:	64 f5       	brge	.+88     	; 0x1924 <ftoa+0xd6>
			d *= -1;
    18cc:	b7 fa       	bst	r11, 7
    18ce:	b0 94       	com	r11
    18d0:	b7 f8       	bld	r11, 7
    18d2:	b0 94       	com	r11
			wholePart *= -1;
    18d4:	70 94       	com	r7
    18d6:	60 94       	com	r6
    18d8:	50 94       	com	r5
    18da:	40 94       	com	r4
    18dc:	41 1c       	adc	r4, r1
    18de:	51 1c       	adc	r5, r1
    18e0:	61 1c       	adc	r6, r1
    18e2:	71 1c       	adc	r7, r1
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <ftoa+0xd6>
		
		double fraction = d - wholePart;
		while (precision > 0) {

			// Multiply ten and pull out the digit.
			fraction *= 10;
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	40 e2       	ldi	r20, 0x20	; 32
    18ec:	51 e4       	ldi	r21, 0x41	; 65
    18ee:	0e 94 5d 12 	call	0x24ba	; 0x24ba <__mulsf3>
    18f2:	2b 01       	movw	r4, r22
    18f4:	3c 01       	movw	r6, r24
			wholePart = (long) fraction;
    18f6:	0e 94 75 11 	call	0x22ea	; 0x22ea <__fixsfsi>
			*endOfString++ = '0' + wholePart;
    18fa:	20 e3       	ldi	r18, 0x30	; 48
    18fc:	26 0f       	add	r18, r22
    18fe:	f5 01       	movw	r30, r10
    1900:	21 93       	st	Z+, r18
    1902:	5f 01       	movw	r10, r30

			// Update the fraction and move on to the next digit.
			fraction -= wholePart;
    1904:	0e 94 ad 11 	call	0x235a	; 0x235a <__floatsisf>
    1908:	9b 01       	movw	r18, r22
    190a:	ac 01       	movw	r20, r24
    190c:	c3 01       	movw	r24, r6
    190e:	b2 01       	movw	r22, r4
    1910:	0e 94 03 11 	call	0x2206	; 0x2206 <__subsf3>
			d *= -1;
			wholePart *= -1;
		}
		
		double fraction = d - wholePart;
		while (precision > 0) {
    1914:	ac 16       	cp	r10, r28
    1916:	bd 06       	cpc	r11, r29
    1918:	31 f7       	brne	.-52     	; 0x18e6 <ftoa+0x98>
			// Update the fraction and move on to the next digit.
			fraction -= wholePart;
			precision--;
		}
		// Terminate the string.
		*endOfString = '\0';
    191a:	f6 01       	movw	r30, r12
    191c:	e0 0f       	add	r30, r16
    191e:	f1 1f       	adc	r31, r17
    1920:	10 82       	st	Z, r1
    1922:	11 c0       	rjmp	.+34     	; 0x1946 <ftoa+0xf8>
		if (d < 0) {
			d *= -1;
			wholePart *= -1;
		}
		
		double fraction = d - wholePart;
    1924:	c3 01       	movw	r24, r6
    1926:	b2 01       	movw	r22, r4
    1928:	0e 94 ad 11 	call	0x235a	; 0x235a <__floatsisf>
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	c5 01       	movw	r24, r10
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 03 11 	call	0x2206	; 0x2206 <__subsf3>
    1938:	56 01       	movw	r10, r12
    193a:	98 01       	movw	r18, r16
    193c:	2f 5f       	subi	r18, 0xFF	; 255
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	c2 0f       	add	r28, r18
    1942:	d3 1f       	adc	r29, r19
    1944:	d0 cf       	rjmp	.-96     	; 0x18e6 <ftoa+0x98>
		}
		// Terminate the string.
		*endOfString = '\0';
	}
	return buffer;
}
    1946:	c7 01       	movw	r24, r14
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	1f 91       	pop	r17
    194e:	0f 91       	pop	r16
    1950:	ff 90       	pop	r15
    1952:	ef 90       	pop	r14
    1954:	df 90       	pop	r13
    1956:	cf 90       	pop	r12
    1958:	bf 90       	pop	r11
    195a:	af 90       	pop	r10
    195c:	9f 90       	pop	r9
    195e:	8f 90       	pop	r8
    1960:	7f 90       	pop	r7
    1962:	6f 90       	pop	r6
    1964:	5f 90       	pop	r5
    1966:	4f 90       	pop	r4
    1968:	08 95       	ret

0000196a <pop_up_window>:
			 default: break;
		 }
	 }
}
void pop_up_window()
{
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	2a 97       	sbiw	r28, 0x0a	; 10
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
	draw_pointer(FALSE);
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
    198a:	07 e1       	ldi	r16, 0x17	; 23
			 default: break;
		 }
	 }
}
void pop_up_window()
{
    198c:	0f 2e       	mov	r0, r31
    198e:	fa e0       	ldi	r31, 0x0A	; 10
    1990:	ff 2e       	mov	r15, r31
    1992:	f0 2d       	mov	r31, r0
    1994:	0b c0       	rjmp	.+22     	; 0x19ac <pop_up_window+0x42>
	draw_pointer(FALSE);
	for (int w=23;w<112;w++)
	{
		for (int h=10; h<56;h++)
		{
			GLCD_Draw_Pixel(w,h,BLACK);
    1996:	4f ef       	ldi	r20, 0xFF	; 255
    1998:	61 2f       	mov	r22, r17
    199a:	80 2f       	mov	r24, r16
    199c:	0e 94 ad 05 	call	0xb5a	; 0xb5a <GLCD_Draw_Pixel>
    19a0:	1f 5f       	subi	r17, 0xFF	; 255
void pop_up_window()
{
	draw_pointer(FALSE);
	for (int w=23;w<112;w++)
	{
		for (int h=10; h<56;h++)
    19a2:	18 33       	cpi	r17, 0x38	; 56
    19a4:	c1 f7       	brne	.-16     	; 0x1996 <pop_up_window+0x2c>
    19a6:	0f 5f       	subi	r16, 0xFF	; 255
	 }
}
void pop_up_window()
{
	draw_pointer(FALSE);
	for (int w=23;w<112;w++)
    19a8:	00 37       	cpi	r16, 0x70	; 112
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <pop_up_window+0x46>
			 default: break;
		 }
	 }
}
void pop_up_window()
{
    19ac:	1f 2d       	mov	r17, r15
    19ae:	f3 cf       	rjmp	.-26     	; 0x1996 <pop_up_window+0x2c>
			GLCD_Draw_Pixel(w,h,BLACK);
		}
	}	
	char watts_buffer[5];
	char Kwatts_buffer[5];
	switch (event)
    19b0:	80 91 7f 05 	lds	r24, 0x057F
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	fc 01       	movw	r30, r24
    19b8:	34 97       	sbiw	r30, 0x04	; 4
    19ba:	ed 30       	cpi	r30, 0x0D	; 13
    19bc:	f1 05       	cpc	r31, r1
    19be:	08 f0       	brcs	.+2      	; 0x19c2 <pop_up_window+0x58>
    19c0:	95 c0       	rjmp	.+298    	; 0x1aec <pop_up_window+0x182>
    19c2:	e6 5d       	subi	r30, 0xD6	; 214
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__tablejump2__>
	{
		case SET_TIME:
			GLCD_Draw_String(5,25,"HH:MM",WHITE); 
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	4b e8       	ldi	r20, 0x8B	; 139
    19ce:	50 e0       	ldi	r21, 0x00	; 0
    19d0:	69 e1       	ldi	r22, 0x19	; 25
    19d2:	85 e0       	ldi	r24, 0x05	; 5
    19d4:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			set_rtc();
    19d8:	0e 94 1b 0b 	call	0x1636	; 0x1636 <set_rtc>
		break;
    19dc:	87 c0       	rjmp	.+270    	; 0x1aec <pop_up_window+0x182>
		case ALARM_1:
			GLCD_Draw_String(5,25,"HH:MM",WHITE);
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	4b e8       	ldi	r20, 0x8B	; 139
    19e2:	50 e0       	ldi	r21, 0x00	; 0
    19e4:	69 e1       	ldi	r22, 0x19	; 25
    19e6:	85 e0       	ldi	r24, 0x05	; 5
    19e8:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			set_alarm(ALARM_1);
    19ec:	8b e0       	ldi	r24, 0x0B	; 11
    19ee:	0e 94 8f 0b 	call	0x171e	; 0x171e <set_alarm>
		break;			
    19f2:	7c c0       	rjmp	.+248    	; 0x1aec <pop_up_window+0x182>
		case ALARM_2:
			GLCD_Draw_String(5,25,"HH:MM",WHITE);
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	4b e8       	ldi	r20, 0x8B	; 139
    19f8:	50 e0       	ldi	r21, 0x00	; 0
    19fa:	69 e1       	ldi	r22, 0x19	; 25
    19fc:	85 e0       	ldi	r24, 0x05	; 5
    19fe:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			set_alarm(ALARM_2);
    1a02:	8c e0       	ldi	r24, 0x0C	; 12
    1a04:	0e 94 8f 0b 	call	0x171e	; 0x171e <set_alarm>
		break;
    1a08:	71 c0       	rjmp	.+226    	; 0x1aec <pop_up_window+0x182>
		case SWITCHER_1:
			GLCD_Draw_String(5,15,"Lights1",WHITE); 
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	41 e9       	ldi	r20, 0x91	; 145
    1a0e:	50 e0       	ldi	r21, 0x00	; 0
    1a10:	6f e0       	ldi	r22, 0x0F	; 15
    1a12:	85 e0       	ldi	r24, 0x05	; 5
    1a14:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			draw_switch(switch1);
    1a18:	80 91 59 01 	lds	r24, 0x0159
    1a1c:	0e 94 09 08 	call	0x1012	; 0x1012 <draw_switch>
		break;
    1a20:	65 c0       	rjmp	.+202    	; 0x1aec <pop_up_window+0x182>
		case SWITCHER_2:
			GLCD_Draw_String(5,15,"Lights2",WHITE);
    1a22:	20 e0       	ldi	r18, 0x00	; 0
    1a24:	49 e9       	ldi	r20, 0x99	; 153
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	6f e0       	ldi	r22, 0x0F	; 15
    1a2a:	85 e0       	ldi	r24, 0x05	; 5
    1a2c:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			draw_switch(switch2);
    1a30:	80 91 58 01 	lds	r24, 0x0158
    1a34:	0e 94 09 08 	call	0x1012	; 0x1012 <draw_switch>
		break;
    1a38:	59 c0       	rjmp	.+178    	; 0x1aec <pop_up_window+0x182>
		case SWITCHER_3:
			GLCD_Draw_String(4,15,"Sockets1",WHITE);
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	41 ea       	ldi	r20, 0xA1	; 161
    1a3e:	50 e0       	ldi	r21, 0x00	; 0
    1a40:	6f e0       	ldi	r22, 0x0F	; 15
    1a42:	84 e0       	ldi	r24, 0x04	; 4
    1a44:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			draw_switch(switch3);
    1a48:	80 91 57 01 	lds	r24, 0x0157
    1a4c:	0e 94 09 08 	call	0x1012	; 0x1012 <draw_switch>
		break;
    1a50:	4d c0       	rjmp	.+154    	; 0x1aec <pop_up_window+0x182>
		case SWITCHER_4:
			GLCD_Draw_String(4,15,"Sockets2",WHITE);
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	4a ea       	ldi	r20, 0xAA	; 170
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	6f e0       	ldi	r22, 0x0F	; 15
    1a5a:	84 e0       	ldi	r24, 0x04	; 4
    1a5c:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			draw_switch(switch4);
    1a60:	80 91 56 01 	lds	r24, 0x0156
    1a64:	0e 94 09 08 	call	0x1012	; 0x1012 <draw_switch>
		break;
    1a68:	41 c0       	rjmp	.+130    	; 0x1aec <pop_up_window+0x182>
		case METER:
			ftoa(watts_buffer,watts,2);
    1a6a:	40 91 61 01 	lds	r20, 0x0161
    1a6e:	50 91 62 01 	lds	r21, 0x0162
    1a72:	60 91 63 01 	lds	r22, 0x0163
    1a76:	70 91 64 01 	lds	r23, 0x0164
    1a7a:	22 e0       	ldi	r18, 0x02	; 2
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	0e 94 27 0c 	call	0x184e	; 0x184e <ftoa>
			ftoa(Kwatts_buffer,kilo_watts,2);
    1a86:	40 91 5d 01 	lds	r20, 0x015D
    1a8a:	50 91 5e 01 	lds	r21, 0x015E
    1a8e:	60 91 5f 01 	lds	r22, 0x015F
    1a92:	70 91 60 01 	lds	r23, 0x0160
    1a96:	22 e0       	ldi	r18, 0x02	; 2
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	06 96       	adiw	r24, 0x06	; 6
    1a9e:	0e 94 27 0c 	call	0x184e	; 0x184e <ftoa>
			GLCD_Draw_String(3,15,"Energy Used",WHITE);
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	43 eb       	ldi	r20, 0xB3	; 179
    1aa6:	50 e0       	ldi	r21, 0x00	; 0
    1aa8:	6f e0       	ldi	r22, 0x0F	; 15
    1aaa:	83 e0       	ldi	r24, 0x03	; 3
    1aac:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			
			GLCD_Draw_String(10,25,"KW",WHITE);
    1ab0:	20 e0       	ldi	r18, 0x00	; 0
    1ab2:	4f eb       	ldi	r20, 0xBF	; 191
    1ab4:	50 e0       	ldi	r21, 0x00	; 0
    1ab6:	69 e1       	ldi	r22, 0x19	; 25
    1ab8:	8a e0       	ldi	r24, 0x0A	; 10
    1aba:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			GLCD_Draw_String(4,25,Kwatts_buffer,WHITE);
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	ae 01       	movw	r20, r28
    1ac2:	4a 5f       	subi	r20, 0xFA	; 250
    1ac4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ac6:	69 e1       	ldi	r22, 0x19	; 25
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			
			GLCD_Draw_String(4,35,watts_buffer,WHITE);
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	ae 01       	movw	r20, r28
    1ad2:	4f 5f       	subi	r20, 0xFF	; 255
    1ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad6:	63 e2       	ldi	r22, 0x23	; 35
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
			GLCD_Draw_String(10,35,"W",WHITE);
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	40 ec       	ldi	r20, 0xC0	; 192
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	63 e2       	ldi	r22, 0x23	; 35
    1ae6:	8a e0       	ldi	r24, 0x0A	; 10
    1ae8:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
		break;
		default:
		break;
	}		
}
    1aec:	2a 96       	adiw	r28, 0x0a	; 10
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	de bf       	out	0x3e, r29	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	cd bf       	out	0x3d, r28	; 61
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	08 95       	ret

00001b04 <draw_menu>:
	state = MENU;
}

void draw_menu()
{
	keypress();
    1b04:	0e 94 88 08 	call	0x1110	; 0x1110 <keypress>
	if (timer1_millis > 3000)
    1b08:	80 91 69 01 	lds	r24, 0x0169
    1b0c:	90 91 6a 01 	lds	r25, 0x016A
    1b10:	a0 91 6b 01 	lds	r26, 0x016B
    1b14:	b0 91 6c 01 	lds	r27, 0x016C
    1b18:	89 3b       	cpi	r24, 0xB9	; 185
    1b1a:	9b 40       	sbci	r25, 0x0B	; 11
    1b1c:	a1 05       	cpc	r26, r1
    1b1e:	b1 05       	cpc	r27, r1
    1b20:	08 f4       	brcc	.+2      	; 0x1b24 <draw_menu+0x20>
    1b22:	ac c0       	rjmp	.+344    	; 0x1c7c <draw_menu+0x178>
	{
		draw_pointer(TRUE);
    1b24:	8f ef       	ldi	r24, 0xFF	; 255
    1b26:	0e 94 d6 07 	call	0xfac	; 0xfac <draw_pointer>
		switch (state)
    1b2a:	80 91 5a 01 	lds	r24, 0x015A
    1b2e:	82 30       	cpi	r24, 0x02	; 2
    1b30:	f1 f1       	breq	.+124    	; 0x1bae <draw_menu+0xaa>
    1b32:	18 f4       	brcc	.+6      	; 0x1b3a <draw_menu+0x36>
    1b34:	81 30       	cpi	r24, 0x01	; 1
    1b36:	41 f0       	breq	.+16     	; 0x1b48 <draw_menu+0x44>
    1b38:	08 95       	ret
    1b3a:	83 30       	cpi	r24, 0x03	; 3
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <draw_menu+0x3c>
    1b3e:	6a c0       	rjmp	.+212    	; 0x1c14 <draw_menu+0x110>
    1b40:	86 30       	cpi	r24, 0x06	; 6
    1b42:	09 f4       	brne	.+2      	; 0x1b46 <draw_menu+0x42>
    1b44:	99 c0       	rjmp	.+306    	; 0x1c78 <draw_menu+0x174>
    1b46:	08 95       	ret
		{
			case MENU:
			if(pointer < 5)
    1b48:	80 91 5b 01 	lds	r24, 0x015B
    1b4c:	90 91 5c 01 	lds	r25, 0x015C
    1b50:	05 97       	sbiw	r24, 0x05	; 5
    1b52:	08 f0       	brcs	.+2      	; 0x1b56 <draw_menu+0x52>
    1b54:	93 c0       	rjmp	.+294    	; 0x1c7c <draw_menu+0x178>
			{
				draw_frame();
    1b56:	0e 94 68 08 	call	0x10d0	; 0x10d0 <draw_frame>
				GLCD_Draw_String(2,1,"MAIN-MENU",WHITE);
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	42 ec       	ldi	r20, 0xC2	; 194
    1b5e:	50 e0       	ldi	r21, 0x00	; 0
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_Char(15,1,'0',WHITE);
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	40 e3       	ldi	r20, 0x30	; 48
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	8f e0       	ldi	r24, 0x0F	; 15
    1b70:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
				GLCD_Draw_String(2,10,on_off,BLACK);
    1b74:	2f ef       	ldi	r18, 0xFF	; 255
    1b76:	48 e4       	ldi	r20, 0x48	; 72
    1b78:	51 e0       	ldi	r21, 0x01	; 1
    1b7a:	6a e0       	ldi	r22, 0x0A	; 10
    1b7c:	82 e0       	ldi	r24, 0x02	; 2
    1b7e:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,19,timer,BLACK);
    1b82:	2f ef       	ldi	r18, 0xFF	; 255
    1b84:	42 e4       	ldi	r20, 0x42	; 66
    1b86:	51 e0       	ldi	r21, 0x01	; 1
    1b88:	63 e1       	ldi	r22, 0x13	; 19
    1b8a:	82 e0       	ldi	r24, 0x02	; 2
    1b8c:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,29,meter,BLACK);
    1b90:	2f ef       	ldi	r18, 0xFF	; 255
    1b92:	45 e3       	ldi	r20, 0x35	; 53
    1b94:	51 e0       	ldi	r21, 0x01	; 1
    1b96:	6d e1       	ldi	r22, 0x1D	; 29
    1b98:	82 e0       	ldi	r24, 0x02	; 2
    1b9a:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,39,wifi,BLACK);			
    1b9e:	2f ef       	ldi	r18, 0xFF	; 255
    1ba0:	4a e2       	ldi	r20, 0x2A	; 42
    1ba2:	51 e0       	ldi	r21, 0x01	; 1
    1ba4:	67 e2       	ldi	r22, 0x27	; 39
    1ba6:	82 e0       	ldi	r24, 0x02	; 2
    1ba8:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
    1bac:	08 95       	ret
			}
			break;
			case SWITCH:
			if(pointer < 5)
    1bae:	80 91 5b 01 	lds	r24, 0x015B
    1bb2:	90 91 5c 01 	lds	r25, 0x015C
    1bb6:	05 97       	sbiw	r24, 0x05	; 5
    1bb8:	08 f0       	brcs	.+2      	; 0x1bbc <draw_menu+0xb8>
    1bba:	60 c0       	rjmp	.+192    	; 0x1c7c <draw_menu+0x178>
			{
				draw_frame();
    1bbc:	0e 94 68 08 	call	0x10d0	; 0x10d0 <draw_frame>
				GLCD_Draw_String(2,1,"SWITCH-MENU",WHITE);
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	4c ec       	ldi	r20, 0xCC	; 204
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	82 e0       	ldi	r24, 0x02	; 2
    1bca:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_Char(15,1,'1',WHITE);
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	41 e3       	ldi	r20, 0x31	; 49
    1bd2:	61 e0       	ldi	r22, 0x01	; 1
    1bd4:	8f e0       	ldi	r24, 0x0F	; 15
    1bd6:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
				GLCD_Draw_String(2,10,Lcir1,BLACK);
    1bda:	2f ef       	ldi	r18, 0xFF	; 255
    1bdc:	41 e2       	ldi	r20, 0x21	; 33
    1bde:	51 e0       	ldi	r21, 0x01	; 1
    1be0:	6a e0       	ldi	r22, 0x0A	; 10
    1be2:	82 e0       	ldi	r24, 0x02	; 2
    1be4:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,19,Lcir2,BLACK);
    1be8:	2f ef       	ldi	r18, 0xFF	; 255
    1bea:	48 e1       	ldi	r20, 0x18	; 24
    1bec:	51 e0       	ldi	r21, 0x01	; 1
    1bee:	63 e1       	ldi	r22, 0x13	; 19
    1bf0:	82 e0       	ldi	r24, 0x02	; 2
    1bf2:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,29,Scir1,BLACK);
    1bf6:	2f ef       	ldi	r18, 0xFF	; 255
    1bf8:	4e e0       	ldi	r20, 0x0E	; 14
    1bfa:	51 e0       	ldi	r21, 0x01	; 1
    1bfc:	6d e1       	ldi	r22, 0x1D	; 29
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,39,Scir2,BLACK);
    1c04:	2f ef       	ldi	r18, 0xFF	; 255
    1c06:	44 e0       	ldi	r20, 0x04	; 4
    1c08:	51 e0       	ldi	r21, 0x01	; 1
    1c0a:	67 e2       	ldi	r22, 0x27	; 39
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
    1c12:	08 95       	ret
			
			}
			break;
			case TIMER:
			if(pointer < 5)
    1c14:	80 91 5b 01 	lds	r24, 0x015B
    1c18:	90 91 5c 01 	lds	r25, 0x015C
    1c1c:	05 97       	sbiw	r24, 0x05	; 5
    1c1e:	70 f5       	brcc	.+92     	; 0x1c7c <draw_menu+0x178>
			{
				draw_frame();
    1c20:	0e 94 68 08 	call	0x10d0	; 0x10d0 <draw_frame>
				GLCD_Draw_String(2,1,"TIMER-MENU",WHITE);
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	48 ed       	ldi	r20, 0xD8	; 216
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_Char(15,1,'2',WHITE);
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	42 e3       	ldi	r20, 0x32	; 50
    1c36:	61 e0       	ldi	r22, 0x01	; 1
    1c38:	8f e0       	ldi	r24, 0x0F	; 15
    1c3a:	0e 94 a7 04 	call	0x94e	; 0x94e <GLCD_Draw_Char>
				GLCD_Draw_String(2,10,clock_buffer,BLACK);
    1c3e:	2f ef       	ldi	r18, 0xFF	; 255
    1c40:	40 e7       	ldi	r20, 0x70	; 112
    1c42:	55 e0       	ldi	r21, 0x05	; 5
    1c44:	6a e0       	ldi	r22, 0x0A	; 10
    1c46:	82 e0       	ldi	r24, 0x02	; 2
    1c48:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,19,set_clock,BLACK);
    1c4c:	2f ef       	ldi	r18, 0xFF	; 255
    1c4e:	4b ef       	ldi	r20, 0xFB	; 251
    1c50:	50 e0       	ldi	r21, 0x00	; 0
    1c52:	63 e1       	ldi	r22, 0x13	; 19
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,29,timer1,BLACK);
    1c5a:	2f ef       	ldi	r18, 0xFF	; 255
    1c5c:	4f ee       	ldi	r20, 0xEF	; 239
    1c5e:	50 e0       	ldi	r21, 0x00	; 0
    1c60:	6d e1       	ldi	r22, 0x1D	; 29
    1c62:	82 e0       	ldi	r24, 0x02	; 2
    1c64:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
				GLCD_Draw_String(2,39,timer2,BLACK);		  		
    1c68:	2f ef       	ldi	r18, 0xFF	; 255
    1c6a:	43 ee       	ldi	r20, 0xE3	; 227
    1c6c:	50 e0       	ldi	r21, 0x00	; 0
    1c6e:	67 e2       	ldi	r22, 0x27	; 39
    1c70:	82 e0       	ldi	r24, 0x02	; 2
    1c72:	0e 94 2c 05 	call	0xa58	; 0xa58 <GLCD_Draw_String>
    1c76:	08 95       	ret
			}
			break;	
			case POPUP:
				pop_up_window();
    1c78:	0e 94 b5 0c 	call	0x196a	; 0x196a <pop_up_window>
    1c7c:	08 95       	ret

00001c7e <__vector_7>:

#ifndef ISR_H_
#define ISR_H_

ISR(TIMER1_COMPA_vect)
{
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	cf 92       	push	r12
    1c8a:	df 92       	push	r13
    1c8c:	ef 92       	push	r14
    1c8e:	ff 92       	push	r15
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
	timer1_millis++;
    1ca8:	80 91 69 01 	lds	r24, 0x0169
    1cac:	90 91 6a 01 	lds	r25, 0x016A
    1cb0:	a0 91 6b 01 	lds	r26, 0x016B
    1cb4:	b0 91 6c 01 	lds	r27, 0x016C
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	a1 1d       	adc	r26, r1
    1cbc:	b1 1d       	adc	r27, r1
    1cbe:	80 93 69 01 	sts	0x0169, r24
    1cc2:	90 93 6a 01 	sts	0x016A, r25
    1cc6:	a0 93 6b 01 	sts	0x016B, r26
    1cca:	b0 93 6c 01 	sts	0x016C, r27
	keys[0] = read_keypad();
    1cce:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <read_keypad>
    1cd2:	80 93 61 00 	sts	0x0061, r24
	
	if (timer1_millis%165 == 0)
    1cd6:	60 91 69 01 	lds	r22, 0x0169
    1cda:	70 91 6a 01 	lds	r23, 0x016A
    1cde:	80 91 6b 01 	lds	r24, 0x016B
    1ce2:	90 91 6c 01 	lds	r25, 0x016C
    1ce6:	25 ea       	ldi	r18, 0xA5	; 165
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e0       	ldi	r20, 0x00	; 0
    1cec:	50 e0       	ldi	r21, 0x00	; 0
    1cee:	0e 94 ca 12 	call	0x2594	; 0x2594 <__udivmodsi4>
    1cf2:	67 2b       	or	r22, r23
    1cf4:	68 2b       	or	r22, r24
    1cf6:	69 2b       	or	r22, r25
    1cf8:	11 f4       	brne	.+4      	; 0x1cfe <__vector_7+0x80>
	{keypress();}
    1cfa:	0e 94 88 08 	call	0x1110	; 0x1110 <keypress>
	
	
	//Energy calculations
	if (timer1_millis%1000 == 0) //1second
    1cfe:	60 91 69 01 	lds	r22, 0x0169
    1d02:	70 91 6a 01 	lds	r23, 0x016A
    1d06:	80 91 6b 01 	lds	r24, 0x016B
    1d0a:	90 91 6c 01 	lds	r25, 0x016C
    1d0e:	28 ee       	ldi	r18, 0xE8	; 232
    1d10:	33 e0       	ldi	r19, 0x03	; 3
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	0e 94 ca 12 	call	0x2594	; 0x2594 <__udivmodsi4>
    1d1a:	67 2b       	or	r22, r23
    1d1c:	68 2b       	or	r22, r24
    1d1e:	69 2b       	or	r22, r25
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <__vector_7+0xa6>
    1d22:	4c c0       	rjmp	.+152    	; 0x1dbc <__vector_7+0x13e>
	{watts +=((pulse_count)/3600);
    1d24:	60 91 65 01 	lds	r22, 0x0165
    1d28:	70 91 66 01 	lds	r23, 0x0166
    1d2c:	80 91 67 01 	lds	r24, 0x0167
    1d30:	90 91 68 01 	lds	r25, 0x0168
    1d34:	c0 90 61 01 	lds	r12, 0x0161
    1d38:	d0 90 62 01 	lds	r13, 0x0162
    1d3c:	e0 90 63 01 	lds	r14, 0x0163
    1d40:	f0 90 64 01 	lds	r15, 0x0164
    1d44:	20 e1       	ldi	r18, 0x10	; 16
    1d46:	3e e0       	ldi	r19, 0x0E	; 14
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	0e 94 ca 12 	call	0x2594	; 0x2594 <__udivmodsi4>
    1d50:	ca 01       	movw	r24, r20
    1d52:	b9 01       	movw	r22, r18
    1d54:	0e 94 ab 11 	call	0x2356	; 0x2356 <__floatunsisf>
    1d58:	a7 01       	movw	r20, r14
    1d5a:	96 01       	movw	r18, r12
    1d5c:	0e 94 04 11 	call	0x2208	; 0x2208 <__addsf3>
    1d60:	60 93 61 01 	sts	0x0161, r22
    1d64:	70 93 62 01 	sts	0x0162, r23
    1d68:	80 93 63 01 	sts	0x0163, r24
    1d6c:	90 93 64 01 	sts	0x0164, r25
	kilo_watts += ((pulse_count/1000)/3600);
    1d70:	60 91 65 01 	lds	r22, 0x0165
    1d74:	70 91 66 01 	lds	r23, 0x0166
    1d78:	80 91 67 01 	lds	r24, 0x0167
    1d7c:	90 91 68 01 	lds	r25, 0x0168
    1d80:	c0 90 5d 01 	lds	r12, 0x015D
    1d84:	d0 90 5e 01 	lds	r13, 0x015E
    1d88:	e0 90 5f 01 	lds	r14, 0x015F
    1d8c:	f0 90 60 01 	lds	r15, 0x0160
    1d90:	20 e8       	ldi	r18, 0x80	; 128
    1d92:	3e ee       	ldi	r19, 0xEE	; 238
    1d94:	46 e3       	ldi	r20, 0x36	; 54
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	0e 94 ca 12 	call	0x2594	; 0x2594 <__udivmodsi4>
    1d9c:	ca 01       	movw	r24, r20
    1d9e:	b9 01       	movw	r22, r18
    1da0:	0e 94 ab 11 	call	0x2356	; 0x2356 <__floatunsisf>
    1da4:	a7 01       	movw	r20, r14
    1da6:	96 01       	movw	r18, r12
    1da8:	0e 94 04 11 	call	0x2208	; 0x2208 <__addsf3>
    1dac:	60 93 5d 01 	sts	0x015D, r22
    1db0:	70 93 5e 01 	sts	0x015E, r23
    1db4:	80 93 5f 01 	sts	0x015F, r24
    1db8:	90 93 60 01 	sts	0x0160, r25
	//transmitAndWait(Meter_flag);
	//transmitAndWait(watts);
	}
	
	switch(keys[0])
    1dbc:	e0 91 61 00 	lds	r30, 0x0061
    1dc0:	8e 2f       	mov	r24, r30
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	f0 97       	sbiw	r30, 0x30	; 48
    1dc8:	e4 31       	cpi	r30, 0x14	; 20
    1dca:	f1 05       	cpc	r31, r1
    1dcc:	08 f0       	brcs	.+2      	; 0x1dd0 <__vector_7+0x152>
    1dce:	4f c0       	rjmp	.+158    	; 0x1e6e <__vector_7+0x1f0>
    1dd0:	e9 5c       	subi	r30, 0xC9	; 201
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	0c 94 ec 12 	jmp	0x25d8	; 0x25d8 <__tablejump2__>
	{
		case '0': key =0; break;
    1dd8:	10 92 81 05 	sts	0x0581, r1
    1ddc:	10 92 80 05 	sts	0x0580, r1
    1de0:	4c c0       	rjmp	.+152    	; 0x1e7a <__vector_7+0x1fc>
		case '1': key =1; break;
    1de2:	81 e0       	ldi	r24, 0x01	; 1
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	90 93 81 05 	sts	0x0581, r25
    1dea:	80 93 80 05 	sts	0x0580, r24
    1dee:	45 c0       	rjmp	.+138    	; 0x1e7a <__vector_7+0x1fc>
		case '2': key =2; break;
    1df0:	82 e0       	ldi	r24, 0x02	; 2
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	90 93 81 05 	sts	0x0581, r25
    1df8:	80 93 80 05 	sts	0x0580, r24
    1dfc:	3e c0       	rjmp	.+124    	; 0x1e7a <__vector_7+0x1fc>
		case '3': key =3; break;
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 81 05 	sts	0x0581, r25
    1e06:	80 93 80 05 	sts	0x0580, r24
    1e0a:	37 c0       	rjmp	.+110    	; 0x1e7a <__vector_7+0x1fc>
		case '4': key =4; break;
    1e0c:	84 e0       	ldi	r24, 0x04	; 4
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	90 93 81 05 	sts	0x0581, r25
    1e14:	80 93 80 05 	sts	0x0580, r24
    1e18:	30 c0       	rjmp	.+96     	; 0x1e7a <__vector_7+0x1fc>
		case '5': key =5; break;
    1e1a:	85 e0       	ldi	r24, 0x05	; 5
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	90 93 81 05 	sts	0x0581, r25
    1e22:	80 93 80 05 	sts	0x0580, r24
    1e26:	29 c0       	rjmp	.+82     	; 0x1e7a <__vector_7+0x1fc>
		case '6': key =6; break;
    1e28:	86 e0       	ldi	r24, 0x06	; 6
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	90 93 81 05 	sts	0x0581, r25
    1e30:	80 93 80 05 	sts	0x0580, r24
    1e34:	22 c0       	rjmp	.+68     	; 0x1e7a <__vector_7+0x1fc>
		case '7': key =7; break;
    1e36:	87 e0       	ldi	r24, 0x07	; 7
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	90 93 81 05 	sts	0x0581, r25
    1e3e:	80 93 80 05 	sts	0x0580, r24
    1e42:	1b c0       	rjmp	.+54     	; 0x1e7a <__vector_7+0x1fc>
		case '8': key =8; break;
    1e44:	88 e0       	ldi	r24, 0x08	; 8
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	90 93 81 05 	sts	0x0581, r25
    1e4c:	80 93 80 05 	sts	0x0580, r24
    1e50:	14 c0       	rjmp	.+40     	; 0x1e7a <__vector_7+0x1fc>
		case '9': key =9; break;
    1e52:	89 e0       	ldi	r24, 0x09	; 9
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	90 93 81 05 	sts	0x0581, r25
    1e5a:	80 93 80 05 	sts	0x0580, r24
    1e5e:	0d c0       	rjmp	.+26     	; 0x1e7a <__vector_7+0x1fc>
		case 'C': key =10; break;
    1e60:	8a e0       	ldi	r24, 0x0A	; 10
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	90 93 81 05 	sts	0x0581, r25
    1e68:	80 93 80 05 	sts	0x0580, r24
    1e6c:	06 c0       	rjmp	.+12     	; 0x1e7a <__vector_7+0x1fc>
		default: key=-1; break; //No input
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f ef       	ldi	r25, 0xFF	; 255
    1e72:	90 93 81 05 	sts	0x0581, r25
    1e76:	80 93 80 05 	sts	0x0580, r24
	}	
}
    1e7a:	ff 91       	pop	r31
    1e7c:	ef 91       	pop	r30
    1e7e:	bf 91       	pop	r27
    1e80:	af 91       	pop	r26
    1e82:	9f 91       	pop	r25
    1e84:	8f 91       	pop	r24
    1e86:	7f 91       	pop	r23
    1e88:	6f 91       	pop	r22
    1e8a:	5f 91       	pop	r21
    1e8c:	4f 91       	pop	r20
    1e8e:	3f 91       	pop	r19
    1e90:	2f 91       	pop	r18
    1e92:	ff 90       	pop	r15
    1e94:	ef 90       	pop	r14
    1e96:	df 90       	pop	r13
    1e98:	cf 90       	pop	r12
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_1>:

ISR(INT0_vect)
{
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	2f 93       	push	r18
    1eb0:	3f 93       	push	r19
    1eb2:	4f 93       	push	r20
    1eb4:	5f 93       	push	r21
    1eb6:	6f 93       	push	r22
    1eb8:	7f 93       	push	r23
    1eba:	8f 93       	push	r24
    1ebc:	9f 93       	push	r25
    1ebe:	af 93       	push	r26
    1ec0:	bf 93       	push	r27
    1ec2:	ef 93       	push	r30
    1ec4:	ff 93       	push	r31
	pulse_count++;
    1ec6:	80 91 65 01 	lds	r24, 0x0165
    1eca:	90 91 66 01 	lds	r25, 0x0166
    1ece:	a0 91 67 01 	lds	r26, 0x0167
    1ed2:	b0 91 68 01 	lds	r27, 0x0168
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	a1 1d       	adc	r26, r1
    1eda:	b1 1d       	adc	r27, r1
    1edc:	80 93 65 01 	sts	0x0165, r24
    1ee0:	90 93 66 01 	sts	0x0166, r25
    1ee4:	a0 93 67 01 	sts	0x0167, r26
    1ee8:	b0 93 68 01 	sts	0x0168, r27
	EEPROM_WriteNBytes(pulse_count_addr,(uint8_t *)&pulse_count,2);
    1eec:	42 e0       	ldi	r20, 0x02	; 2
    1eee:	50 e0       	ldi	r21, 0x00	; 0
    1ef0:	65 e6       	ldi	r22, 0x65	; 101
    1ef2:	71 e0       	ldi	r23, 0x01	; 1
    1ef4:	89 e0       	ldi	r24, 0x09	; 9
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <EEPROM_WriteNBytes>
}
    1efc:	ff 91       	pop	r31
    1efe:	ef 91       	pop	r30
    1f00:	bf 91       	pop	r27
    1f02:	af 91       	pop	r26
    1f04:	9f 91       	pop	r25
    1f06:	8f 91       	pop	r24
    1f08:	7f 91       	pop	r23
    1f0a:	6f 91       	pop	r22
    1f0c:	5f 91       	pop	r21
    1f0e:	4f 91       	pop	r20
    1f10:	3f 91       	pop	r19
    1f12:	2f 91       	pop	r18
    1f14:	0f 90       	pop	r0
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	0f 90       	pop	r0
    1f1a:	1f 90       	pop	r1
    1f1c:	18 95       	reti

00001f1e <boot>:
    }
}

 void boot(void)
 {
	  I2CInit();
    1f1e:	0e 94 76 06 	call	0xcec	; 0xcec <I2CInit>
	  SPI_Init();
    1f22:	0e 94 c2 06 	call	0xd84	; 0xd84 <SPI_Init>
	  ClockInit();
    1f26:	0e 94 08 10 	call	0x2010	; 0x2010 <ClockInit>
	  GLCD_Init();
    1f2a:	0e 94 17 04 	call	0x82e	; 0x82e <GLCD_Init>
	  timer_init();
    1f2e:	0e 94 b2 07 	call	0xf64	; 0xf64 <timer_init>
	  draw_splash();
    1f32:	0e 94 c7 07 	call	0xf8e	; 0xf8e <draw_splash>
	  keypad_init();
    1f36:	0e 94 dd 06 	call	0xdba	; 0xdba <keypad_init>
	  
	  //initial_EEPROM_Write();
	  //initial_EEPROM_Read();
	  state = MENU;	
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	80 93 5a 01 	sts	0x015A, r24
    1f40:	08 95       	ret

00001f42 <main>:

void boot(void);

int main(void)
{
    boot();	
    1f42:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <boot>
	unsigned char data = 0;
	unsigned char send = 5;
	DDRC |=(1<<PC3);
    1f46:	a3 9a       	sbi	0x14, 3	; 20
    while (1) 
    {
// 		uint8_t a,b;
// 		char as[1],bs[1];
 		//check_alarm();
 		GetTimeString(clock_buffer);
    1f48:	80 e7       	ldi	r24, 0x70	; 112
    1f4a:	95 e0       	ldi	r25, 0x05	; 5
    1f4c:	0e 94 aa 10 	call	0x2154	; 0x2154 <GetTimeString>
 		draw_menu();
    1f50:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <draw_menu>
		//----------------
		data = transmitAndWait('a');
    1f54:	81 e6       	ldi	r24, 0x61	; 97
    1f56:	0e 94 d2 06 	call	0xda4	; 0xda4 <transmitAndWait>

		if (data == 200)
    1f5a:	88 3c       	cpi	r24, 0xC8	; 200
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <main+0x1e>
		{
			PORTC |=(1<<PC3);
    1f5e:	ab 9a       	sbi	0x15, 3	; 21
		}
		//-----------------
 		
		GLCD_Render();
    1f60:	0e 94 0c 06 	call	0xc18	; 0xc18 <GLCD_Render>
    }
    1f64:	f1 cf       	rjmp	.-30     	; 0x1f48 <main+0x6>

00001f66 <DS1307Read>:

Returns: 0= Failure 1= Success
***************************************************/

uint8_t DS1307Read(uint8_t address,uint8_t *data)
{
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	c8 2f       	mov	r28, r24
    1f6e:	8b 01       	movw	r16, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
    1f70:	0e 94 7f 06 	call	0xcfe	; 0xcfe <I2CStart>
	
	//SLA+W (for dummy write to set register pointer)
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
    1f74:	80 ed       	ldi	r24, 0xD0	; 208
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	
	//Error
	if(!res)	return 0;
    1f7c:	88 23       	and	r24, r24
    1f7e:	c9 f0       	breq	.+50     	; 0x1fb2 <DS1307Read+0x4c>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
    1f80:	8c 2f       	mov	r24, r28
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	
	//Error
	if(!res)	return 0;
    1f88:	88 23       	and	r24, r24
    1f8a:	a9 f0       	breq	.+42     	; 0x1fb6 <DS1307Read+0x50>
	
	//Repeat Start
	I2CStart();	
    1f8c:	0e 94 7f 06 	call	0xcfe	; 0xcfe <I2CStart>
	//SLA + R
	res=I2CWriteByte(0b11010001);	//DS1307 Address + R	
    1f90:	81 ed       	ldi	r24, 0xD1	; 209
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	//Error
	if(!res)	return 0;	
    1f98:	88 23       	and	r24, r24
    1f9a:	79 f0       	breq	.+30     	; 0x1fba <DS1307Read+0x54>
	//Now read the value with NACK
	res=I2CReadByte(data,0);	
    1f9c:	60 e0       	ldi	r22, 0x00	; 0
    1f9e:	70 e0       	ldi	r23, 0x00	; 0
    1fa0:	c8 01       	movw	r24, r16
    1fa2:	0e 94 a4 06 	call	0xd48	; 0xd48 <I2CReadByte>
	//Error
	if(!res)	return 0;	
    1fa6:	88 23       	and	r24, r24
    1fa8:	51 f0       	breq	.+20     	; 0x1fbe <DS1307Read+0x58>
	//STOP
	I2CStop();
    1faa:	0e 94 85 06 	call	0xd0a	; 0xd0a <I2CStop>
	
	return 1;
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	07 c0       	rjmp	.+14     	; 0x1fc0 <DS1307Read+0x5a>
	
	//SLA+W (for dummy write to set register pointer)
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return 0;
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	05 c0       	rjmp	.+10     	; 0x1fc0 <DS1307Read+0x5a>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return 0;
    1fb6:	80 e0       	ldi	r24, 0x00	; 0
    1fb8:	03 c0       	rjmp	.+6      	; 0x1fc0 <DS1307Read+0x5a>
	//Repeat Start
	I2CStart();	
	//SLA + R
	res=I2CWriteByte(0b11010001);	//DS1307 Address + R	
	//Error
	if(!res)	return 0;	
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <DS1307Read+0x5a>
	//Now read the value with NACK
	res=I2CReadByte(data,0);	
	//Error
	if(!res)	return 0;	
    1fbe:	80 e0       	ldi	r24, 0x00	; 0
	//STOP
	I2CStop();
	
	return 1;
}
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <DS1307Write>:
data: value to write.
Returns: 0= Failure 1= Success
***************************************************/

uint8_t DS1307Write(uint8_t address,uint8_t data)
{
    1fc8:	cf 93       	push	r28
    1fca:	df 93       	push	r29
    1fcc:	c8 2f       	mov	r28, r24
    1fce:	d6 2f       	mov	r29, r22
	uint8_t res;	//result
	
	//Start
	I2CStart();
    1fd0:	0e 94 7f 06 	call	0xcfe	; 0xcfe <I2CStart>
	
	//SLA+W
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
    1fd4:	80 ed       	ldi	r24, 0xD0	; 208
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	
	//Error
	if(!res)	return 0;
    1fdc:	88 23       	and	r24, r24
    1fde:	81 f0       	breq	.+32     	; 0x2000 <DS1307Write+0x38>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
    1fe0:	8c 2f       	mov	r24, r28
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	
	//Error
	if(!res)	return 0;
    1fe8:	88 23       	and	r24, r24
    1fea:	61 f0       	breq	.+24     	; 0x2004 <DS1307Write+0x3c>
	
	//Now write the value
	res=I2CWriteByte(data);
    1fec:	8d 2f       	mov	r24, r29
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	0e 94 8b 06 	call	0xd16	; 0xd16 <I2CWriteByte>
	
	//Error
	if(!res)	return 0;
    1ff4:	88 23       	and	r24, r24
    1ff6:	41 f0       	breq	.+16     	; 0x2008 <DS1307Write+0x40>
	
	//STOP
	I2CStop();
    1ff8:	0e 94 85 06 	call	0xd0a	; 0xd0a <I2CStop>
	
	return 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	05 c0       	rjmp	.+10     	; 0x200a <DS1307Write+0x42>
	
	//SLA+W
	res=I2CWriteByte(0b11010000);	//DS1307 address + W
	
	//Error
	if(!res)	return 0;
    2000:	80 e0       	ldi	r24, 0x00	; 0
    2002:	03 c0       	rjmp	.+6      	; 0x200a <DS1307Write+0x42>
	
	//Now send the address of required register
	res=I2CWriteByte(address);
	
	//Error
	if(!res)	return 0;
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	01 c0       	rjmp	.+2      	; 0x200a <DS1307Write+0x42>
	
	//Now write the value
	res=I2CWriteByte(data);
	
	//Error
	if(!res)	return 0;
    2008:	80 e0       	ldi	r24, 0x00	; 0
	
	//STOP
	I2CStop();
	
	return 1;
}
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	08 95       	ret

00002010 <ClockInit>:

uint8_t ClockInit()
{
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	1f 92       	push	r1
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
	//Initialize I2C Bus
	I2CInit();
    201a:	0e 94 76 06 	call	0xcec	; 0xcec <I2CInit>

	//Clear CH bit of RTC
	#define CH 7

	uint8_t temp;
	if(!DS1307Read(0x00,&temp)) return 0;
    201e:	be 01       	movw	r22, r28
    2020:	6f 5f       	subi	r22, 0xFF	; 255
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>
    202a:	98 2f       	mov	r25, r24
    202c:	88 23       	and	r24, r24
    202e:	e1 f0       	breq	.+56     	; 0x2068 <ClockInit+0x58>

	//Clear CH Bit
	temp&=(~(1<<CH));
    2030:	69 81       	ldd	r22, Y+1	; 0x01
    2032:	6f 77       	andi	r22, 0x7F	; 127
    2034:	69 83       	std	Y+1, r22	; 0x01

	if(!DS1307Write(0x00,temp)) return 0;
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <DS1307Write>
    203c:	98 2f       	mov	r25, r24
    203e:	88 23       	and	r24, r24
    2040:	99 f0       	breq	.+38     	; 0x2068 <ClockInit+0x58>

	//Set 12 Hour Mode
	if(!DS1307Read(0x02,&temp)) return 0;
    2042:	be 01       	movw	r22, r28
    2044:	6f 5f       	subi	r22, 0xFF	; 255
    2046:	7f 4f       	sbci	r23, 0xFF	; 255
    2048:	82 e0       	ldi	r24, 0x02	; 2
    204a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>
    204e:	98 2f       	mov	r25, r24
    2050:	88 23       	and	r24, r24
    2052:	51 f0       	breq	.+20     	; 0x2068 <ClockInit+0x58>

	//Set 12Hour BIT
	temp|=(0b01000000);
    2054:	69 81       	ldd	r22, Y+1	; 0x01
    2056:	60 64       	ori	r22, 0x40	; 64
    2058:	69 83       	std	Y+1, r22	; 0x01

	//Write Back to DS1307
	if(!DS1307Write(0x02,temp)) return 0;
    205a:	82 e0       	ldi	r24, 0x02	; 2
    205c:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <DS1307Write>
    2060:	91 e0       	ldi	r25, 0x01	; 1
    2062:	81 11       	cpse	r24, r1
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <ClockInit+0x58>
    2066:	90 e0       	ldi	r25, 0x00	; 0

	return 1;

}
    2068:	89 2f       	mov	r24, r25
    206a:	0f 90       	pop	r0
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	08 95       	ret

00002072 <GetAmPm>:
----------
Return Value:0=am 1=pm
****************************************/

uint8_t GetAmPm()
{
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	1f 92       	push	r1
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
	uint8_t am_pm,temp;

	//Read the Hour Register
	DS1307Read(0x02,&temp);
    207c:	be 01       	movw	r22, r28
    207e:	6f 5f       	subi	r22, 0xFF	; 255
    2080:	7f 4f       	sbci	r23, 0xFF	; 255
    2082:	82 e0       	ldi	r24, 0x02	; 2
    2084:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>

	am_pm=(temp & 0b00100000)>>4;
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	80 72       	andi	r24, 0x20	; 32
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	95 95       	asr	r25
    2090:	87 95       	ror	r24
    2092:	95 95       	asr	r25
    2094:	87 95       	ror	r24
    2096:	95 95       	asr	r25
    2098:	87 95       	ror	r24
    209a:	95 95       	asr	r25
    209c:	87 95       	ror	r24

	return am_pm;

}
    209e:	0f 90       	pop	r0
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <SetMinute>:

uint8_t SetMinute(uint8_t min)
{
	uint8_t temp,result;

	temp=((min/10)<<4)|(min%10);
    20a6:	9d ec       	ldi	r25, 0xCD	; 205
    20a8:	89 9f       	mul	r24, r25
    20aa:	91 2d       	mov	r25, r1
    20ac:	11 24       	eor	r1, r1
    20ae:	96 95       	lsr	r25
    20b0:	96 95       	lsr	r25
    20b2:	96 95       	lsr	r25
    20b4:	20 e1       	ldi	r18, 0x10	; 16
    20b6:	92 9f       	mul	r25, r18
    20b8:	b0 01       	movw	r22, r0
    20ba:	11 24       	eor	r1, r1
    20bc:	99 0f       	add	r25, r25
    20be:	29 2f       	mov	r18, r25
    20c0:	22 0f       	add	r18, r18
    20c2:	22 0f       	add	r18, r18
    20c4:	92 0f       	add	r25, r18
    20c6:	89 1b       	sub	r24, r25
    20c8:	68 2b       	or	r22, r24
	result=DS1307Write(0x01,temp);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <DS1307Write>

	return result;
	
}
    20d0:	08 95       	ret

000020d2 <SetHour>:
Set the hour Parameters:hour
Return Value: 0=failure 1=success
****************************************/

uint8_t SetHour(uint8_t hr)
{
    20d2:	cf 93       	push	r28
    20d4:	c8 2f       	mov	r28, r24
	uint8_t temp,result,am_pm;

	am_pm=GetAmPm();
    20d6:	0e 94 39 10 	call	0x2072	; 0x2072 <GetAmPm>

	temp=((hr/10)<<4)|(hr%10);
    20da:	9d ec       	ldi	r25, 0xCD	; 205
    20dc:	c9 9f       	mul	r28, r25
    20de:	91 2d       	mov	r25, r1
    20e0:	11 24       	eor	r1, r1
    20e2:	96 95       	lsr	r25
    20e4:	96 95       	lsr	r25
    20e6:	96 95       	lsr	r25
    20e8:	40 e1       	ldi	r20, 0x10	; 16
    20ea:	94 9f       	mul	r25, r20
    20ec:	90 01       	movw	r18, r0
    20ee:	11 24       	eor	r1, r1
    20f0:	99 0f       	add	r25, r25
    20f2:	39 2f       	mov	r19, r25
    20f4:	33 0f       	add	r19, r19
    20f6:	33 0f       	add	r19, r19
    20f8:	93 0f       	add	r25, r19
    20fa:	c9 1b       	sub	r28, r25
    20fc:	2c 2b       	or	r18, r28
	temp|=0b01000000; //12 Hr Mode
	
	if(am_pm)
    20fe:	81 11       	cpse	r24, r1
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <SetHour+0x36>
	uint8_t temp,result,am_pm;

	am_pm=GetAmPm();

	temp=((hr/10)<<4)|(hr%10);
	temp|=0b01000000; //12 Hr Mode
    2102:	62 2f       	mov	r22, r18
    2104:	60 64       	ori	r22, 0x40	; 64
    2106:	02 c0       	rjmp	.+4      	; 0x210c <SetHour+0x3a>
	
	if(am_pm)
	{
		temp|=0b00100000;
    2108:	62 2f       	mov	r22, r18
    210a:	60 66       	ori	r22, 0x60	; 96
	}
	result=DS1307Write(0x02,temp);
    210c:	82 e0       	ldi	r24, 0x02	; 2
    210e:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <DS1307Write>

	return result;
}
    2112:	cf 91       	pop	r28
    2114:	08 95       	ret

00002116 <SetAmPm>:
Set the second Parameters:0=am,1=pm
Return Value: 0=failure 1=success
****************************************/

uint8_t SetAmPm(uint8_t pm)
{
    2116:	1f 93       	push	r17
    2118:	cf 93       	push	r28
    211a:	df 93       	push	r29
    211c:	1f 92       	push	r1
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62
    2122:	18 2f       	mov	r17, r24
	uint8_t temp,result;

	DS1307Read(0x02,&temp);
    2124:	be 01       	movw	r22, r28
    2126:	6f 5f       	subi	r22, 0xFF	; 255
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>

	if(pm)
    2130:	11 23       	and	r17, r17
    2132:	21 f0       	breq	.+8      	; 0x213c <SetAmPm+0x26>
	temp|=0b00100000;//SET
    2134:	89 81       	ldd	r24, Y+1	; 0x01
    2136:	80 62       	ori	r24, 0x20	; 32
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	03 c0       	rjmp	.+6      	; 0x2142 <SetAmPm+0x2c>
	else
	temp&=0b11011111;//CLEAR
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	8f 7d       	andi	r24, 0xDF	; 223
    2140:	89 83       	std	Y+1, r24	; 0x01

	result=DS1307Write(0x02,temp);
    2142:	69 81       	ldd	r22, Y+1	; 0x01
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <DS1307Write>

	return result;
	
}
    214a:	0f 90       	pop	r0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	1f 91       	pop	r17
    2152:	08 95       	ret

00002154 <GetTimeString>:
char time[12];			//The string must be at least 12bytes long
GetTimeString(time);	//Now the string time contains the current time
****************************************/

uint8_t GetTimeString(char *Time)
{
    2154:	0f 93       	push	r16
    2156:	1f 93       	push	r17
    2158:	cf 93       	push	r28
    215a:	df 93       	push	r29
    215c:	1f 92       	push	r1
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	8c 01       	movw	r16, r24
	uint8_t data;

	if(!DS1307Read(0x00,&data))
    2164:	be 01       	movw	r22, r28
    2166:	6f 5f       	subi	r22, 0xFF	; 255
    2168:	7f 4f       	sbci	r23, 0xFF	; 255
    216a:	80 e0       	ldi	r24, 0x00	; 0
    216c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>
    2170:	88 23       	and	r24, r24
    2172:	09 f4       	brne	.+2      	; 0x2176 <GetTimeString+0x22>
    2174:	42 c0       	rjmp	.+132    	; 0x21fa <GetTimeString+0xa6>
	{
		//I/O Error
		return 0;
	}

	Time[10]='\0';
    2176:	f8 01       	movw	r30, r16
    2178:	12 86       	std	Z+10, r1	; 0x0a
	Time[9]='M';
    217a:	8d e4       	ldi	r24, 0x4D	; 77
    217c:	81 87       	std	Z+9, r24	; 0x09
	

	Time[7]=48+(data & 0b00001111);
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	98 2f       	mov	r25, r24
    2182:	9f 70       	andi	r25, 0x0F	; 15
    2184:	90 5d       	subi	r25, 0xD0	; 208
    2186:	97 83       	std	Z+7, r25	; 0x07
	Time[6]=48+((data & 0b01110000)>>4);
    2188:	80 77       	andi	r24, 0x70	; 112
    218a:	82 95       	swap	r24
    218c:	8f 70       	andi	r24, 0x0F	; 15
    218e:	80 5d       	subi	r24, 0xD0	; 208
    2190:	86 83       	std	Z+6, r24	; 0x06
	Time[5]=':';
    2192:	8a e3       	ldi	r24, 0x3A	; 58
    2194:	85 83       	std	Z+5, r24	; 0x05

	if(!DS1307Read(0x01,&data))
    2196:	be 01       	movw	r22, r28
    2198:	6f 5f       	subi	r22, 0xFF	; 255
    219a:	7f 4f       	sbci	r23, 0xFF	; 255
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>
    21a2:	88 23       	and	r24, r24
    21a4:	51 f1       	breq	.+84     	; 0x21fa <GetTimeString+0xa6>
	{
		//I/O Error
		return 0;
	}
	
	Time[4]=48+(data & 0b00001111);
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	98 2f       	mov	r25, r24
    21aa:	9f 70       	andi	r25, 0x0F	; 15
    21ac:	90 5d       	subi	r25, 0xD0	; 208
    21ae:	f8 01       	movw	r30, r16
    21b0:	94 83       	std	Z+4, r25	; 0x04
	Time[3]=48+((data & 0b01110000)>>4);
    21b2:	80 77       	andi	r24, 0x70	; 112
    21b4:	82 95       	swap	r24
    21b6:	8f 70       	andi	r24, 0x0F	; 15
    21b8:	80 5d       	subi	r24, 0xD0	; 208
    21ba:	83 83       	std	Z+3, r24	; 0x03
	Time[2]=':';
    21bc:	8a e3       	ldi	r24, 0x3A	; 58
    21be:	82 83       	std	Z+2, r24	; 0x02
	
	if(!DS1307Read(0x02,&data))
    21c0:	be 01       	movw	r22, r28
    21c2:	6f 5f       	subi	r22, 0xFF	; 255
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	82 e0       	ldi	r24, 0x02	; 2
    21c8:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <DS1307Read>
    21cc:	88 23       	and	r24, r24
    21ce:	a9 f0       	breq	.+42     	; 0x21fa <GetTimeString+0xa6>
	{
		//I/O Error
		return 0;
	}
	
	Time[1]=48+(data & 0b00001111);
    21d0:	89 81       	ldd	r24, Y+1	; 0x01
    21d2:	98 2f       	mov	r25, r24
    21d4:	9f 70       	andi	r25, 0x0F	; 15
    21d6:	90 5d       	subi	r25, 0xD0	; 208
    21d8:	f8 01       	movw	r30, r16
    21da:	91 83       	std	Z+1, r25	; 0x01
	Time[0]=48+((data & 0b00010000)>>4);
    21dc:	84 fb       	bst	r24, 4
    21de:	99 27       	eor	r25, r25
    21e0:	90 f9       	bld	r25, 0
    21e2:	90 5d       	subi	r25, 0xD0	; 208
    21e4:	90 83       	st	Z, r25

	//AM/PM
	if(data & 0b00100000)
    21e6:	85 ff       	sbrs	r24, 5
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <GetTimeString+0x9e>
	{
		Time[8]='P';
    21ea:	80 e5       	ldi	r24, 0x50	; 80
    21ec:	80 87       	std	Z+8, r24	; 0x08
	else
	{
		Time[8]='A';
	}

	return 1;//Success
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	04 c0       	rjmp	.+8      	; 0x21fa <GetTimeString+0xa6>
	{
		Time[8]='P';
	}
	else
	{
		Time[8]='A';
    21f2:	81 e4       	ldi	r24, 0x41	; 65
    21f4:	f8 01       	movw	r30, r16
    21f6:	80 87       	std	Z+8, r24	; 0x08
	}

	return 1;//Success
    21f8:	81 e0       	ldi	r24, 0x01	; 1

}
    21fa:	0f 90       	pop	r0
    21fc:	df 91       	pop	r29
    21fe:	cf 91       	pop	r28
    2200:	1f 91       	pop	r17
    2202:	0f 91       	pop	r16
    2204:	08 95       	ret

00002206 <__subsf3>:
    2206:	50 58       	subi	r21, 0x80	; 128

00002208 <__addsf3>:
    2208:	bb 27       	eor	r27, r27
    220a:	aa 27       	eor	r26, r26
    220c:	0e 94 1b 11 	call	0x2236	; 0x2236 <__addsf3x>
    2210:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_round>
    2214:	0e 94 15 12 	call	0x242a	; 0x242a <__fp_pscA>
    2218:	38 f0       	brcs	.+14     	; 0x2228 <__addsf3+0x20>
    221a:	0e 94 1c 12 	call	0x2438	; 0x2438 <__fp_pscB>
    221e:	20 f0       	brcs	.+8      	; 0x2228 <__addsf3+0x20>
    2220:	39 f4       	brne	.+14     	; 0x2230 <__addsf3+0x28>
    2222:	9f 3f       	cpi	r25, 0xFF	; 255
    2224:	19 f4       	brne	.+6      	; 0x222c <__addsf3+0x24>
    2226:	26 f4       	brtc	.+8      	; 0x2230 <__addsf3+0x28>
    2228:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_nan>
    222c:	0e f4       	brtc	.+2      	; 0x2230 <__addsf3+0x28>
    222e:	e0 95       	com	r30
    2230:	e7 fb       	bst	r30, 7
    2232:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__fp_inf>

00002236 <__addsf3x>:
    2236:	e9 2f       	mov	r30, r25
    2238:	0e 94 34 12 	call	0x2468	; 0x2468 <__fp_split3>
    223c:	58 f3       	brcs	.-42     	; 0x2214 <__addsf3+0xc>
    223e:	ba 17       	cp	r27, r26
    2240:	62 07       	cpc	r22, r18
    2242:	73 07       	cpc	r23, r19
    2244:	84 07       	cpc	r24, r20
    2246:	95 07       	cpc	r25, r21
    2248:	20 f0       	brcs	.+8      	; 0x2252 <__addsf3x+0x1c>
    224a:	79 f4       	brne	.+30     	; 0x226a <__addsf3x+0x34>
    224c:	a6 f5       	brtc	.+104    	; 0x22b6 <__addsf3x+0x80>
    224e:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__fp_zero>
    2252:	0e f4       	brtc	.+2      	; 0x2256 <__addsf3x+0x20>
    2254:	e0 95       	com	r30
    2256:	0b 2e       	mov	r0, r27
    2258:	ba 2f       	mov	r27, r26
    225a:	a0 2d       	mov	r26, r0
    225c:	0b 01       	movw	r0, r22
    225e:	b9 01       	movw	r22, r18
    2260:	90 01       	movw	r18, r0
    2262:	0c 01       	movw	r0, r24
    2264:	ca 01       	movw	r24, r20
    2266:	a0 01       	movw	r20, r0
    2268:	11 24       	eor	r1, r1
    226a:	ff 27       	eor	r31, r31
    226c:	59 1b       	sub	r21, r25
    226e:	99 f0       	breq	.+38     	; 0x2296 <__addsf3x+0x60>
    2270:	59 3f       	cpi	r21, 0xF9	; 249
    2272:	50 f4       	brcc	.+20     	; 0x2288 <__addsf3x+0x52>
    2274:	50 3e       	cpi	r21, 0xE0	; 224
    2276:	68 f1       	brcs	.+90     	; 0x22d2 <__addsf3x+0x9c>
    2278:	1a 16       	cp	r1, r26
    227a:	f0 40       	sbci	r31, 0x00	; 0
    227c:	a2 2f       	mov	r26, r18
    227e:	23 2f       	mov	r18, r19
    2280:	34 2f       	mov	r19, r20
    2282:	44 27       	eor	r20, r20
    2284:	58 5f       	subi	r21, 0xF8	; 248
    2286:	f3 cf       	rjmp	.-26     	; 0x226e <__addsf3x+0x38>
    2288:	46 95       	lsr	r20
    228a:	37 95       	ror	r19
    228c:	27 95       	ror	r18
    228e:	a7 95       	ror	r26
    2290:	f0 40       	sbci	r31, 0x00	; 0
    2292:	53 95       	inc	r21
    2294:	c9 f7       	brne	.-14     	; 0x2288 <__addsf3x+0x52>
    2296:	7e f4       	brtc	.+30     	; 0x22b6 <__addsf3x+0x80>
    2298:	1f 16       	cp	r1, r31
    229a:	ba 0b       	sbc	r27, r26
    229c:	62 0b       	sbc	r22, r18
    229e:	73 0b       	sbc	r23, r19
    22a0:	84 0b       	sbc	r24, r20
    22a2:	ba f0       	brmi	.+46     	; 0x22d2 <__addsf3x+0x9c>
    22a4:	91 50       	subi	r25, 0x01	; 1
    22a6:	a1 f0       	breq	.+40     	; 0x22d0 <__addsf3x+0x9a>
    22a8:	ff 0f       	add	r31, r31
    22aa:	bb 1f       	adc	r27, r27
    22ac:	66 1f       	adc	r22, r22
    22ae:	77 1f       	adc	r23, r23
    22b0:	88 1f       	adc	r24, r24
    22b2:	c2 f7       	brpl	.-16     	; 0x22a4 <__addsf3x+0x6e>
    22b4:	0e c0       	rjmp	.+28     	; 0x22d2 <__addsf3x+0x9c>
    22b6:	ba 0f       	add	r27, r26
    22b8:	62 1f       	adc	r22, r18
    22ba:	73 1f       	adc	r23, r19
    22bc:	84 1f       	adc	r24, r20
    22be:	48 f4       	brcc	.+18     	; 0x22d2 <__addsf3x+0x9c>
    22c0:	87 95       	ror	r24
    22c2:	77 95       	ror	r23
    22c4:	67 95       	ror	r22
    22c6:	b7 95       	ror	r27
    22c8:	f7 95       	ror	r31
    22ca:	9e 3f       	cpi	r25, 0xFE	; 254
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <__addsf3x+0x9a>
    22ce:	b0 cf       	rjmp	.-160    	; 0x2230 <__addsf3+0x28>
    22d0:	93 95       	inc	r25
    22d2:	88 0f       	add	r24, r24
    22d4:	08 f0       	brcs	.+2      	; 0x22d8 <__addsf3x+0xa2>
    22d6:	99 27       	eor	r25, r25
    22d8:	ee 0f       	add	r30, r30
    22da:	97 95       	ror	r25
    22dc:	87 95       	ror	r24
    22de:	08 95       	ret

000022e0 <__cmpsf2>:
    22e0:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__fp_cmp>
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <__cmpsf2+0x8>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	08 95       	ret

000022ea <__fixsfsi>:
    22ea:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <__fixunssfsi>
    22ee:	68 94       	set
    22f0:	b1 11       	cpse	r27, r1
    22f2:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__fp_szero>
    22f6:	08 95       	ret

000022f8 <__fixunssfsi>:
    22f8:	0e 94 3c 12 	call	0x2478	; 0x2478 <__fp_splitA>
    22fc:	88 f0       	brcs	.+34     	; 0x2320 <__fixunssfsi+0x28>
    22fe:	9f 57       	subi	r25, 0x7F	; 127
    2300:	98 f0       	brcs	.+38     	; 0x2328 <__fixunssfsi+0x30>
    2302:	b9 2f       	mov	r27, r25
    2304:	99 27       	eor	r25, r25
    2306:	b7 51       	subi	r27, 0x17	; 23
    2308:	b0 f0       	brcs	.+44     	; 0x2336 <__fixunssfsi+0x3e>
    230a:	e1 f0       	breq	.+56     	; 0x2344 <__fixunssfsi+0x4c>
    230c:	66 0f       	add	r22, r22
    230e:	77 1f       	adc	r23, r23
    2310:	88 1f       	adc	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	1a f0       	brmi	.+6      	; 0x231c <__fixunssfsi+0x24>
    2316:	ba 95       	dec	r27
    2318:	c9 f7       	brne	.-14     	; 0x230c <__fixunssfsi+0x14>
    231a:	14 c0       	rjmp	.+40     	; 0x2344 <__fixunssfsi+0x4c>
    231c:	b1 30       	cpi	r27, 0x01	; 1
    231e:	91 f0       	breq	.+36     	; 0x2344 <__fixunssfsi+0x4c>
    2320:	0e 94 56 12 	call	0x24ac	; 0x24ac <__fp_zero>
    2324:	b1 e0       	ldi	r27, 0x01	; 1
    2326:	08 95       	ret
    2328:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__fp_zero>
    232c:	67 2f       	mov	r22, r23
    232e:	78 2f       	mov	r23, r24
    2330:	88 27       	eor	r24, r24
    2332:	b8 5f       	subi	r27, 0xF8	; 248
    2334:	39 f0       	breq	.+14     	; 0x2344 <__fixunssfsi+0x4c>
    2336:	b9 3f       	cpi	r27, 0xF9	; 249
    2338:	cc f3       	brlt	.-14     	; 0x232c <__fixunssfsi+0x34>
    233a:	86 95       	lsr	r24
    233c:	77 95       	ror	r23
    233e:	67 95       	ror	r22
    2340:	b3 95       	inc	r27
    2342:	d9 f7       	brne	.-10     	; 0x233a <__fixunssfsi+0x42>
    2344:	3e f4       	brtc	.+14     	; 0x2354 <__fixunssfsi+0x5c>
    2346:	90 95       	com	r25
    2348:	80 95       	com	r24
    234a:	70 95       	com	r23
    234c:	61 95       	neg	r22
    234e:	7f 4f       	sbci	r23, 0xFF	; 255
    2350:	8f 4f       	sbci	r24, 0xFF	; 255
    2352:	9f 4f       	sbci	r25, 0xFF	; 255
    2354:	08 95       	ret

00002356 <__floatunsisf>:
    2356:	e8 94       	clt
    2358:	09 c0       	rjmp	.+18     	; 0x236c <__floatsisf+0x12>

0000235a <__floatsisf>:
    235a:	97 fb       	bst	r25, 7
    235c:	3e f4       	brtc	.+14     	; 0x236c <__floatsisf+0x12>
    235e:	90 95       	com	r25
    2360:	80 95       	com	r24
    2362:	70 95       	com	r23
    2364:	61 95       	neg	r22
    2366:	7f 4f       	sbci	r23, 0xFF	; 255
    2368:	8f 4f       	sbci	r24, 0xFF	; 255
    236a:	9f 4f       	sbci	r25, 0xFF	; 255
    236c:	99 23       	and	r25, r25
    236e:	a9 f0       	breq	.+42     	; 0x239a <__floatsisf+0x40>
    2370:	f9 2f       	mov	r31, r25
    2372:	96 e9       	ldi	r25, 0x96	; 150
    2374:	bb 27       	eor	r27, r27
    2376:	93 95       	inc	r25
    2378:	f6 95       	lsr	r31
    237a:	87 95       	ror	r24
    237c:	77 95       	ror	r23
    237e:	67 95       	ror	r22
    2380:	b7 95       	ror	r27
    2382:	f1 11       	cpse	r31, r1
    2384:	f8 cf       	rjmp	.-16     	; 0x2376 <__floatsisf+0x1c>
    2386:	fa f4       	brpl	.+62     	; 0x23c6 <__floatsisf+0x6c>
    2388:	bb 0f       	add	r27, r27
    238a:	11 f4       	brne	.+4      	; 0x2390 <__floatsisf+0x36>
    238c:	60 ff       	sbrs	r22, 0
    238e:	1b c0       	rjmp	.+54     	; 0x23c6 <__floatsisf+0x6c>
    2390:	6f 5f       	subi	r22, 0xFF	; 255
    2392:	7f 4f       	sbci	r23, 0xFF	; 255
    2394:	8f 4f       	sbci	r24, 0xFF	; 255
    2396:	9f 4f       	sbci	r25, 0xFF	; 255
    2398:	16 c0       	rjmp	.+44     	; 0x23c6 <__floatsisf+0x6c>
    239a:	88 23       	and	r24, r24
    239c:	11 f0       	breq	.+4      	; 0x23a2 <__floatsisf+0x48>
    239e:	96 e9       	ldi	r25, 0x96	; 150
    23a0:	11 c0       	rjmp	.+34     	; 0x23c4 <__floatsisf+0x6a>
    23a2:	77 23       	and	r23, r23
    23a4:	21 f0       	breq	.+8      	; 0x23ae <__floatsisf+0x54>
    23a6:	9e e8       	ldi	r25, 0x8E	; 142
    23a8:	87 2f       	mov	r24, r23
    23aa:	76 2f       	mov	r23, r22
    23ac:	05 c0       	rjmp	.+10     	; 0x23b8 <__floatsisf+0x5e>
    23ae:	66 23       	and	r22, r22
    23b0:	71 f0       	breq	.+28     	; 0x23ce <__floatsisf+0x74>
    23b2:	96 e8       	ldi	r25, 0x86	; 134
    23b4:	86 2f       	mov	r24, r22
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	60 e0       	ldi	r22, 0x00	; 0
    23ba:	2a f0       	brmi	.+10     	; 0x23c6 <__floatsisf+0x6c>
    23bc:	9a 95       	dec	r25
    23be:	66 0f       	add	r22, r22
    23c0:	77 1f       	adc	r23, r23
    23c2:	88 1f       	adc	r24, r24
    23c4:	da f7       	brpl	.-10     	; 0x23bc <__floatsisf+0x62>
    23c6:	88 0f       	add	r24, r24
    23c8:	96 95       	lsr	r25
    23ca:	87 95       	ror	r24
    23cc:	97 f9       	bld	r25, 7
    23ce:	08 95       	ret

000023d0 <__fp_cmp>:
    23d0:	99 0f       	add	r25, r25
    23d2:	00 08       	sbc	r0, r0
    23d4:	55 0f       	add	r21, r21
    23d6:	aa 0b       	sbc	r26, r26
    23d8:	e0 e8       	ldi	r30, 0x80	; 128
    23da:	fe ef       	ldi	r31, 0xFE	; 254
    23dc:	16 16       	cp	r1, r22
    23de:	17 06       	cpc	r1, r23
    23e0:	e8 07       	cpc	r30, r24
    23e2:	f9 07       	cpc	r31, r25
    23e4:	c0 f0       	brcs	.+48     	; 0x2416 <__fp_cmp+0x46>
    23e6:	12 16       	cp	r1, r18
    23e8:	13 06       	cpc	r1, r19
    23ea:	e4 07       	cpc	r30, r20
    23ec:	f5 07       	cpc	r31, r21
    23ee:	98 f0       	brcs	.+38     	; 0x2416 <__fp_cmp+0x46>
    23f0:	62 1b       	sub	r22, r18
    23f2:	73 0b       	sbc	r23, r19
    23f4:	84 0b       	sbc	r24, r20
    23f6:	95 0b       	sbc	r25, r21
    23f8:	39 f4       	brne	.+14     	; 0x2408 <__fp_cmp+0x38>
    23fa:	0a 26       	eor	r0, r26
    23fc:	61 f0       	breq	.+24     	; 0x2416 <__fp_cmp+0x46>
    23fe:	23 2b       	or	r18, r19
    2400:	24 2b       	or	r18, r20
    2402:	25 2b       	or	r18, r21
    2404:	21 f4       	brne	.+8      	; 0x240e <__fp_cmp+0x3e>
    2406:	08 95       	ret
    2408:	0a 26       	eor	r0, r26
    240a:	09 f4       	brne	.+2      	; 0x240e <__fp_cmp+0x3e>
    240c:	a1 40       	sbci	r26, 0x01	; 1
    240e:	a6 95       	lsr	r26
    2410:	8f ef       	ldi	r24, 0xFF	; 255
    2412:	81 1d       	adc	r24, r1
    2414:	81 1d       	adc	r24, r1
    2416:	08 95       	ret

00002418 <__fp_inf>:
    2418:	97 f9       	bld	r25, 7
    241a:	9f 67       	ori	r25, 0x7F	; 127
    241c:	80 e8       	ldi	r24, 0x80	; 128
    241e:	70 e0       	ldi	r23, 0x00	; 0
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	08 95       	ret

00002424 <__fp_nan>:
    2424:	9f ef       	ldi	r25, 0xFF	; 255
    2426:	80 ec       	ldi	r24, 0xC0	; 192
    2428:	08 95       	ret

0000242a <__fp_pscA>:
    242a:	00 24       	eor	r0, r0
    242c:	0a 94       	dec	r0
    242e:	16 16       	cp	r1, r22
    2430:	17 06       	cpc	r1, r23
    2432:	18 06       	cpc	r1, r24
    2434:	09 06       	cpc	r0, r25
    2436:	08 95       	ret

00002438 <__fp_pscB>:
    2438:	00 24       	eor	r0, r0
    243a:	0a 94       	dec	r0
    243c:	12 16       	cp	r1, r18
    243e:	13 06       	cpc	r1, r19
    2440:	14 06       	cpc	r1, r20
    2442:	05 06       	cpc	r0, r21
    2444:	08 95       	ret

00002446 <__fp_round>:
    2446:	09 2e       	mov	r0, r25
    2448:	03 94       	inc	r0
    244a:	00 0c       	add	r0, r0
    244c:	11 f4       	brne	.+4      	; 0x2452 <__fp_round+0xc>
    244e:	88 23       	and	r24, r24
    2450:	52 f0       	brmi	.+20     	; 0x2466 <__fp_round+0x20>
    2452:	bb 0f       	add	r27, r27
    2454:	40 f4       	brcc	.+16     	; 0x2466 <__fp_round+0x20>
    2456:	bf 2b       	or	r27, r31
    2458:	11 f4       	brne	.+4      	; 0x245e <__fp_round+0x18>
    245a:	60 ff       	sbrs	r22, 0
    245c:	04 c0       	rjmp	.+8      	; 0x2466 <__fp_round+0x20>
    245e:	6f 5f       	subi	r22, 0xFF	; 255
    2460:	7f 4f       	sbci	r23, 0xFF	; 255
    2462:	8f 4f       	sbci	r24, 0xFF	; 255
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	08 95       	ret

00002468 <__fp_split3>:
    2468:	57 fd       	sbrc	r21, 7
    246a:	90 58       	subi	r25, 0x80	; 128
    246c:	44 0f       	add	r20, r20
    246e:	55 1f       	adc	r21, r21
    2470:	59 f0       	breq	.+22     	; 0x2488 <__fp_splitA+0x10>
    2472:	5f 3f       	cpi	r21, 0xFF	; 255
    2474:	71 f0       	breq	.+28     	; 0x2492 <__fp_splitA+0x1a>
    2476:	47 95       	ror	r20

00002478 <__fp_splitA>:
    2478:	88 0f       	add	r24, r24
    247a:	97 fb       	bst	r25, 7
    247c:	99 1f       	adc	r25, r25
    247e:	61 f0       	breq	.+24     	; 0x2498 <__fp_splitA+0x20>
    2480:	9f 3f       	cpi	r25, 0xFF	; 255
    2482:	79 f0       	breq	.+30     	; 0x24a2 <__fp_splitA+0x2a>
    2484:	87 95       	ror	r24
    2486:	08 95       	ret
    2488:	12 16       	cp	r1, r18
    248a:	13 06       	cpc	r1, r19
    248c:	14 06       	cpc	r1, r20
    248e:	55 1f       	adc	r21, r21
    2490:	f2 cf       	rjmp	.-28     	; 0x2476 <__fp_split3+0xe>
    2492:	46 95       	lsr	r20
    2494:	f1 df       	rcall	.-30     	; 0x2478 <__fp_splitA>
    2496:	08 c0       	rjmp	.+16     	; 0x24a8 <__fp_splitA+0x30>
    2498:	16 16       	cp	r1, r22
    249a:	17 06       	cpc	r1, r23
    249c:	18 06       	cpc	r1, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	f1 cf       	rjmp	.-30     	; 0x2484 <__fp_splitA+0xc>
    24a2:	86 95       	lsr	r24
    24a4:	71 05       	cpc	r23, r1
    24a6:	61 05       	cpc	r22, r1
    24a8:	08 94       	sec
    24aa:	08 95       	ret

000024ac <__fp_zero>:
    24ac:	e8 94       	clt

000024ae <__fp_szero>:
    24ae:	bb 27       	eor	r27, r27
    24b0:	66 27       	eor	r22, r22
    24b2:	77 27       	eor	r23, r23
    24b4:	cb 01       	movw	r24, r22
    24b6:	97 f9       	bld	r25, 7
    24b8:	08 95       	ret

000024ba <__mulsf3>:
    24ba:	0e 94 70 12 	call	0x24e0	; 0x24e0 <__mulsf3x>
    24be:	0c 94 23 12 	jmp	0x2446	; 0x2446 <__fp_round>
    24c2:	0e 94 15 12 	call	0x242a	; 0x242a <__fp_pscA>
    24c6:	38 f0       	brcs	.+14     	; 0x24d6 <__mulsf3+0x1c>
    24c8:	0e 94 1c 12 	call	0x2438	; 0x2438 <__fp_pscB>
    24cc:	20 f0       	brcs	.+8      	; 0x24d6 <__mulsf3+0x1c>
    24ce:	95 23       	and	r25, r21
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <__mulsf3+0x1c>
    24d2:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__fp_inf>
    24d6:	0c 94 12 12 	jmp	0x2424	; 0x2424 <__fp_nan>
    24da:	11 24       	eor	r1, r1
    24dc:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__fp_szero>

000024e0 <__mulsf3x>:
    24e0:	0e 94 34 12 	call	0x2468	; 0x2468 <__fp_split3>
    24e4:	70 f3       	brcs	.-36     	; 0x24c2 <__mulsf3+0x8>

000024e6 <__mulsf3_pse>:
    24e6:	95 9f       	mul	r25, r21
    24e8:	c1 f3       	breq	.-16     	; 0x24da <__mulsf3+0x20>
    24ea:	95 0f       	add	r25, r21
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	55 1f       	adc	r21, r21
    24f0:	62 9f       	mul	r22, r18
    24f2:	f0 01       	movw	r30, r0
    24f4:	72 9f       	mul	r23, r18
    24f6:	bb 27       	eor	r27, r27
    24f8:	f0 0d       	add	r31, r0
    24fa:	b1 1d       	adc	r27, r1
    24fc:	63 9f       	mul	r22, r19
    24fe:	aa 27       	eor	r26, r26
    2500:	f0 0d       	add	r31, r0
    2502:	b1 1d       	adc	r27, r1
    2504:	aa 1f       	adc	r26, r26
    2506:	64 9f       	mul	r22, r20
    2508:	66 27       	eor	r22, r22
    250a:	b0 0d       	add	r27, r0
    250c:	a1 1d       	adc	r26, r1
    250e:	66 1f       	adc	r22, r22
    2510:	82 9f       	mul	r24, r18
    2512:	22 27       	eor	r18, r18
    2514:	b0 0d       	add	r27, r0
    2516:	a1 1d       	adc	r26, r1
    2518:	62 1f       	adc	r22, r18
    251a:	73 9f       	mul	r23, r19
    251c:	b0 0d       	add	r27, r0
    251e:	a1 1d       	adc	r26, r1
    2520:	62 1f       	adc	r22, r18
    2522:	83 9f       	mul	r24, r19
    2524:	a0 0d       	add	r26, r0
    2526:	61 1d       	adc	r22, r1
    2528:	22 1f       	adc	r18, r18
    252a:	74 9f       	mul	r23, r20
    252c:	33 27       	eor	r19, r19
    252e:	a0 0d       	add	r26, r0
    2530:	61 1d       	adc	r22, r1
    2532:	23 1f       	adc	r18, r19
    2534:	84 9f       	mul	r24, r20
    2536:	60 0d       	add	r22, r0
    2538:	21 1d       	adc	r18, r1
    253a:	82 2f       	mov	r24, r18
    253c:	76 2f       	mov	r23, r22
    253e:	6a 2f       	mov	r22, r26
    2540:	11 24       	eor	r1, r1
    2542:	9f 57       	subi	r25, 0x7F	; 127
    2544:	50 40       	sbci	r21, 0x00	; 0
    2546:	9a f0       	brmi	.+38     	; 0x256e <__mulsf3_pse+0x88>
    2548:	f1 f0       	breq	.+60     	; 0x2586 <__mulsf3_pse+0xa0>
    254a:	88 23       	and	r24, r24
    254c:	4a f0       	brmi	.+18     	; 0x2560 <__mulsf3_pse+0x7a>
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	bb 1f       	adc	r27, r27
    2554:	66 1f       	adc	r22, r22
    2556:	77 1f       	adc	r23, r23
    2558:	88 1f       	adc	r24, r24
    255a:	91 50       	subi	r25, 0x01	; 1
    255c:	50 40       	sbci	r21, 0x00	; 0
    255e:	a9 f7       	brne	.-22     	; 0x254a <__mulsf3_pse+0x64>
    2560:	9e 3f       	cpi	r25, 0xFE	; 254
    2562:	51 05       	cpc	r21, r1
    2564:	80 f0       	brcs	.+32     	; 0x2586 <__mulsf3_pse+0xa0>
    2566:	0c 94 0c 12 	jmp	0x2418	; 0x2418 <__fp_inf>
    256a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__fp_szero>
    256e:	5f 3f       	cpi	r21, 0xFF	; 255
    2570:	e4 f3       	brlt	.-8      	; 0x256a <__mulsf3_pse+0x84>
    2572:	98 3e       	cpi	r25, 0xE8	; 232
    2574:	d4 f3       	brlt	.-12     	; 0x256a <__mulsf3_pse+0x84>
    2576:	86 95       	lsr	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f7 95       	ror	r31
    2580:	e7 95       	ror	r30
    2582:	9f 5f       	subi	r25, 0xFF	; 255
    2584:	c1 f7       	brne	.-16     	; 0x2576 <__mulsf3_pse+0x90>
    2586:	fe 2b       	or	r31, r30
    2588:	88 0f       	add	r24, r24
    258a:	91 1d       	adc	r25, r1
    258c:	96 95       	lsr	r25
    258e:	87 95       	ror	r24
    2590:	97 f9       	bld	r25, 7
    2592:	08 95       	ret

00002594 <__udivmodsi4>:
    2594:	a1 e2       	ldi	r26, 0x21	; 33
    2596:	1a 2e       	mov	r1, r26
    2598:	aa 1b       	sub	r26, r26
    259a:	bb 1b       	sub	r27, r27
    259c:	fd 01       	movw	r30, r26
    259e:	0d c0       	rjmp	.+26     	; 0x25ba <__udivmodsi4_ep>

000025a0 <__udivmodsi4_loop>:
    25a0:	aa 1f       	adc	r26, r26
    25a2:	bb 1f       	adc	r27, r27
    25a4:	ee 1f       	adc	r30, r30
    25a6:	ff 1f       	adc	r31, r31
    25a8:	a2 17       	cp	r26, r18
    25aa:	b3 07       	cpc	r27, r19
    25ac:	e4 07       	cpc	r30, r20
    25ae:	f5 07       	cpc	r31, r21
    25b0:	20 f0       	brcs	.+8      	; 0x25ba <__udivmodsi4_ep>
    25b2:	a2 1b       	sub	r26, r18
    25b4:	b3 0b       	sbc	r27, r19
    25b6:	e4 0b       	sbc	r30, r20
    25b8:	f5 0b       	sbc	r31, r21

000025ba <__udivmodsi4_ep>:
    25ba:	66 1f       	adc	r22, r22
    25bc:	77 1f       	adc	r23, r23
    25be:	88 1f       	adc	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	1a 94       	dec	r1
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <__udivmodsi4_loop>
    25c6:	60 95       	com	r22
    25c8:	70 95       	com	r23
    25ca:	80 95       	com	r24
    25cc:	90 95       	com	r25
    25ce:	9b 01       	movw	r18, r22
    25d0:	ac 01       	movw	r20, r24
    25d2:	bd 01       	movw	r22, r26
    25d4:	cf 01       	movw	r24, r30
    25d6:	08 95       	ret

000025d8 <__tablejump2__>:
    25d8:	ee 0f       	add	r30, r30
    25da:	ff 1f       	adc	r31, r31
    25dc:	05 90       	lpm	r0, Z+
    25de:	f4 91       	lpm	r31, Z
    25e0:	e0 2d       	mov	r30, r0
    25e2:	09 94       	ijmp

000025e4 <__itoa_ncheck>:
    25e4:	bb 27       	eor	r27, r27
    25e6:	4a 30       	cpi	r20, 0x0A	; 10
    25e8:	31 f4       	brne	.+12     	; 0x25f6 <__itoa_ncheck+0x12>
    25ea:	99 23       	and	r25, r25
    25ec:	22 f4       	brpl	.+8      	; 0x25f6 <__itoa_ncheck+0x12>
    25ee:	bd e2       	ldi	r27, 0x2D	; 45
    25f0:	90 95       	com	r25
    25f2:	81 95       	neg	r24
    25f4:	9f 4f       	sbci	r25, 0xFF	; 255
    25f6:	0c 94 fe 12 	jmp	0x25fc	; 0x25fc <__utoa_common>

000025fa <__utoa_ncheck>:
    25fa:	bb 27       	eor	r27, r27

000025fc <__utoa_common>:
    25fc:	fb 01       	movw	r30, r22
    25fe:	55 27       	eor	r21, r21
    2600:	aa 27       	eor	r26, r26
    2602:	88 0f       	add	r24, r24
    2604:	99 1f       	adc	r25, r25
    2606:	aa 1f       	adc	r26, r26
    2608:	a4 17       	cp	r26, r20
    260a:	10 f0       	brcs	.+4      	; 0x2610 <__utoa_common+0x14>
    260c:	a4 1b       	sub	r26, r20
    260e:	83 95       	inc	r24
    2610:	50 51       	subi	r21, 0x10	; 16
    2612:	b9 f7       	brne	.-18     	; 0x2602 <__utoa_common+0x6>
    2614:	a0 5d       	subi	r26, 0xD0	; 208
    2616:	aa 33       	cpi	r26, 0x3A	; 58
    2618:	08 f0       	brcs	.+2      	; 0x261c <__utoa_common+0x20>
    261a:	a9 5d       	subi	r26, 0xD9	; 217
    261c:	a1 93       	st	Z+, r26
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	79 f7       	brne	.-34     	; 0x2600 <__utoa_common+0x4>
    2622:	b1 11       	cpse	r27, r1
    2624:	b1 93       	st	Z+, r27
    2626:	11 92       	st	Z+, r1
    2628:	cb 01       	movw	r24, r22
    262a:	0c 94 17 13 	jmp	0x262e	; 0x262e <strrev>

0000262e <strrev>:
    262e:	dc 01       	movw	r26, r24
    2630:	fc 01       	movw	r30, r24
    2632:	67 2f       	mov	r22, r23
    2634:	71 91       	ld	r23, Z+
    2636:	77 23       	and	r23, r23
    2638:	e1 f7       	brne	.-8      	; 0x2632 <strrev+0x4>
    263a:	32 97       	sbiw	r30, 0x02	; 2
    263c:	04 c0       	rjmp	.+8      	; 0x2646 <strrev+0x18>
    263e:	7c 91       	ld	r23, X
    2640:	6d 93       	st	X+, r22
    2642:	70 83       	st	Z, r23
    2644:	62 91       	ld	r22, -Z
    2646:	ae 17       	cp	r26, r30
    2648:	bf 07       	cpc	r27, r31
    264a:	c8 f3       	brcs	.-14     	; 0x263e <strrev+0x10>
    264c:	08 95       	ret

0000264e <_exit>:
    264e:	f8 94       	cli

00002650 <__stop_program>:
    2650:	ff cf       	rjmp	.-2      	; 0x2650 <__stop_program>
